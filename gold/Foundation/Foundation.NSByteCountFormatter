@_exported import CoreFoundation

@available(*, unavailable, message: "Not available in Swift")
typealias NSByteCountFormatterUnits = Int
struct NSByteCountFormatterUnits : OptionSet, @unchecked Sendable {
  init(rawValue: UInt)
  let rawValue: UInt
  typealias RawValue = UInt
  typealias Element = NSByteCountFormatterUnits
  typealias ArrayLiteralElement = NSByteCountFormatterUnits
  @available(*, unavailable, message: "use [] to construct an empty option set")
  static var useDefault: NSByteCountFormatterUnits { get }
  @available(*, unavailable, message: "use [] to construct an empty option set")
  @available(swift, obsoleted: 3, renamed: "useDefault")
  static var UseDefault: NSByteCountFormatterUnits { get }
  static var useBytes: NSByteCountFormatterUnits { get }
  @available(swift, obsoleted: 3, renamed: "useBytes")
  static var UseBytes: NSByteCountFormatterUnits { get }
  static var useKB: NSByteCountFormatterUnits { get }
  @available(swift, obsoleted: 3, renamed: "useKB")
  static var UseKB: NSByteCountFormatterUnits { get }
  static var useMB: NSByteCountFormatterUnits { get }
  @available(swift, obsoleted: 3, renamed: "useMB")
  static var UseMB: NSByteCountFormatterUnits { get }
  static var useGB: NSByteCountFormatterUnits { get }
  @available(swift, obsoleted: 3, renamed: "useGB")
  static var UseGB: NSByteCountFormatterUnits { get }
  static var useTB: NSByteCountFormatterUnits { get }
  @available(swift, obsoleted: 3, renamed: "useTB")
  static var UseTB: NSByteCountFormatterUnits { get }
  static var usePB: NSByteCountFormatterUnits { get }
  @available(swift, obsoleted: 3, renamed: "usePB")
  static var UsePB: NSByteCountFormatterUnits { get }
  static var useEB: NSByteCountFormatterUnits { get }
  @available(swift, obsoleted: 3, renamed: "useEB")
  static var UseEB: NSByteCountFormatterUnits { get }
  static var useZB: NSByteCountFormatterUnits { get }
  @available(swift, obsoleted: 3, renamed: "useZB")
  static var UseZB: NSByteCountFormatterUnits { get }
  static var useYBOrHigher: NSByteCountFormatterUnits { get }
  @available(swift, obsoleted: 3, renamed: "useYBOrHigher")
  static var UseYBOrHigher: NSByteCountFormatterUnits { get }
  static var useAll: NSByteCountFormatterUnits { get }
  @available(swift, obsoleted: 3, renamed: "useAll")
  static var UseAll: NSByteCountFormatterUnits { get }
}
@available(swift, obsoleted: 3, renamed: "ByteCountFormatter.CountStyle")
typealias NSByteCountFormatterCountStyle = ByteCountFormatter.CountStyle
extension ByteCountFormatter {
  enum CountStyle : Int, @unchecked Sendable {
    init?(rawValue: Int)
    var rawValue: Int { get }
    typealias RawValue = Int
    case file
    @available(swift, obsoleted: 3, renamed: "file")
    static var File: ByteCountFormatter.CountStyle { get }
    case memory
    @available(swift, obsoleted: 3, renamed: "memory")
    static var Memory: ByteCountFormatter.CountStyle { get }
    case decimal
    @available(swift, obsoleted: 3, renamed: "decimal")
    static var Decimal: ByteCountFormatter.CountStyle { get }
    case binary
    @available(swift, obsoleted: 3, renamed: "binary")
    static var Binary: ByteCountFormatter.CountStyle { get }
  }
}
@available(iOS 6.0, *)
class ByteCountFormatter : Formatter {
  class func string(fromByteCount byteCount: Int64, countStyle: ByteCountFormatter.CountStyle) -> String
  @available(swift, obsoleted: 3, renamed: "string(fromByteCount:countStyle:)")
  class func stringFromByteCount(_ byteCount: Int64, countStyle: ByteCountFormatter.CountStyle) -> String
  func string(fromByteCount byteCount: Int64) -> String
  @available(swift, obsoleted: 3, renamed: "string(fromByteCount:)")
  func stringFromByteCount(_ byteCount: Int64) -> String
  @available(iOS 13.0, *)
  class func string(from measurement: Measurement<UnitInformationStorage>, countStyle: ByteCountFormatter.CountStyle) -> String
  @available(iOS 13.0, *)
  @available(swift, obsoleted: 3, renamed: "string(from:countStyle:)")
  class func stringFromMeasurement(_ measurement: Measurement<UnitInformationStorage>, countStyle: ByteCountFormatter.CountStyle) -> String
  @available(iOS 13.0, *)
  func string(from measurement: Measurement<UnitInformationStorage>) -> String
  @available(iOS 13.0, *)
  @available(swift, obsoleted: 3, renamed: "string(from:)")
  func stringFromMeasurement(_ measurement: Measurement<UnitInformationStorage>) -> String
  func string(for obj: Any?) -> String?
  @available(swift, obsoleted: 3, renamed: "string(for:)")
  func stringForObjectValue(_ obj: Any?) -> String?
  var allowedUnits: Int
  var countStyle: ByteCountFormatter.CountStyle
  var allowsNonnumericFormatting: Bool
  var includesUnit: Bool
  var includesCount: Bool
  var includesActualByteCount: Bool
  var isAdaptive: Bool
  @available(swift, obsoleted: 3, renamed: "isAdaptive")
  var adaptive: Bool
  var zeroPadsFractionDigits: Bool
  @available(iOS 8.0, *)
  var formattingContext: Formatter.Context
  init()
  init?(coder: NSCoder)
}
@available(iOS 6.0, *)
@available(swift, obsoleted: 3, renamed: "ByteCountFormatter")
typealias NSByteCountFormatter = ByteCountFormatter
