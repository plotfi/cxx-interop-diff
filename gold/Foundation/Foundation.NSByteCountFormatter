@_exported import CoreFoundation

typealias NSByteCountFormatterUnits = Int
var NSByteCountFormatterUseDefault: Int { get }
var NSByteCountFormatterUseBytes: Int { get }
var NSByteCountFormatterUseKB: Int { get }
var NSByteCountFormatterUseMB: Int { get }
var NSByteCountFormatterUseGB: Int { get }
var NSByteCountFormatterUseTB: Int { get }
var NSByteCountFormatterUsePB: Int { get }
var NSByteCountFormatterUseEB: Int { get }
var NSByteCountFormatterUseZB: Int { get }
var NSByteCountFormatterUseYBOrHigher: Int { get }
var NSByteCountFormatterUseAll: Int { get }
@available(swift, obsoleted: 3, renamed: "ByteCountFormatter.CountStyle")
typealias NSByteCountFormatterCountStyle = ByteCountFormatter.CountStyle
extension ByteCountFormatter {
  enum CountStyle : Int, @unchecked Sendable {
    init?(rawValue: Int)
    var rawValue: Int { get }
    typealias RawValue = Int
    case file
    @available(swift, obsoleted: 3, renamed: "file")
    static var File: ByteCountFormatter.CountStyle { get }
    case memory
    @available(swift, obsoleted: 3, renamed: "memory")
    static var Memory: ByteCountFormatter.CountStyle { get }
    case decimal
    @available(swift, obsoleted: 3, renamed: "decimal")
    static var Decimal: ByteCountFormatter.CountStyle { get }
    case binary
    @available(swift, obsoleted: 3, renamed: "binary")
    static var Binary: ByteCountFormatter.CountStyle { get }
  }
}
@available(iOS 6.0, *)
class ByteCountFormatter : Formatter {
  class func string(fromByteCount byteCount: Int64, countStyle: ByteCountFormatter.CountStyle) -> String
  @available(swift, obsoleted: 3, renamed: "string(fromByteCount:countStyle:)")
  class func stringFromByteCount(_ byteCount: Int64, countStyle: ByteCountFormatter.CountStyle) -> String
  func string(fromByteCount byteCount: Int64) -> String
  @available(swift, obsoleted: 3, renamed: "string(fromByteCount:)")
  func stringFromByteCount(_ byteCount: Int64) -> String
  @available(iOS 13.0, *)
  class func string(from measurement: Measurement<UnitInformationStorage>, countStyle: ByteCountFormatter.CountStyle) -> String
  @available(iOS 13.0, *)
  @available(swift, obsoleted: 3, renamed: "string(from:countStyle:)")
  class func stringFromMeasurement(_ measurement: Measurement<UnitInformationStorage>, countStyle: ByteCountFormatter.CountStyle) -> String
  @available(iOS 13.0, *)
  func string(from measurement: Measurement<UnitInformationStorage>) -> String
  @available(iOS 13.0, *)
  @available(swift, obsoleted: 3, renamed: "string(from:)")
  func stringFromMeasurement(_ measurement: Measurement<UnitInformationStorage>) -> String
  func string(for obj: Any?) -> String?
  @available(swift, obsoleted: 3, renamed: "string(for:)")
  func stringForObjectValue(_ obj: Any?) -> String?
  var allowedUnits: NSByteCountFormatterUnits
  var countStyle: ByteCountFormatter.CountStyle
  var allowsNonnumericFormatting: Bool
  var includesUnit: Bool
  var includesCount: Bool
  var includesActualByteCount: Bool
  var isAdaptive: Bool
  @available(swift, obsoleted: 3, renamed: "isAdaptive")
  var adaptive: Bool
  var zeroPadsFractionDigits: Bool
  @available(iOS 8.0, *)
  var formattingContext: Formatter.Context
  init()
  init?(coder: NSCoder)
}
@available(iOS 6.0, *)
@available(swift, obsoleted: 3, renamed: "ByteCountFormatter")
typealias NSByteCountFormatter = ByteCountFormatter
