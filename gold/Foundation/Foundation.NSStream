@_exported import CoreFoundation

@available(swift, obsoleted: 3, renamed: "Stream.PropertyKey")
typealias NSStreamPropertyKey = Stream.PropertyKey
extension Stream {
  struct PropertyKey : _ObjectiveCBridgeable, Hashable, Equatable, _SwiftNewtypeWrapper, RawRepresentable, @unchecked Sendable {
    init(_ rawValue: String)
    init(rawValue: String)
    var _rawValue: NSString
    var rawValue: String { get }
    typealias RawValue = String
    typealias _ObjectiveCType = NSString
  }
  enum Status : UInt, @unchecked Sendable {
    init?(rawValue: UInt)
    var rawValue: UInt { get }
    typealias RawValue = UInt
    case notOpen
    @available(swift, obsoleted: 3, renamed: "notOpen")
    static var NotOpen: Stream.Status { get }
    case opening
    @available(swift, obsoleted: 3, renamed: "opening")
    static var Opening: Stream.Status { get }
    case open
    @available(swift, obsoleted: 3, renamed: "open")
    static var Open: Stream.Status { get }
    case reading
    @available(swift, obsoleted: 3, renamed: "reading")
    static var Reading: Stream.Status { get }
    case writing
    @available(swift, obsoleted: 3, renamed: "writing")
    static var Writing: Stream.Status { get }
    case atEnd
    @available(swift, obsoleted: 3, renamed: "atEnd")
    static var AtEnd: Stream.Status { get }
    case closed
    @available(swift, obsoleted: 3, renamed: "closed")
    static var Closed: Stream.Status { get }
    case error
    @available(swift, obsoleted: 3, renamed: "error")
    static var Error: Stream.Status { get }
  }
}
@available(swift, obsoleted: 3, renamed: "Stream.Status")
typealias NSStreamStatus = Stream.Status
typealias NSStreamEvent = Int
var NSStreamEventNone: Int { get }
var NSStreamEventOpenCompleted: Int { get }
var NSStreamEventHasBytesAvailable: Int { get }
var NSStreamEventHasSpaceAvailable: Int { get }
var NSStreamEventErrorOccurred: Int { get }
var NSStreamEventEndEncountered: Int { get }
@available(swift, obsoleted: 3, renamed: "Stream")
typealias NSStream = Stream
class Stream : NSObject {
  func open()
  func close()
  unowned(unsafe) var delegate: @sil_unmanaged StreamDelegate?
  func property(forKey key: Stream.PropertyKey) -> Any?
  @available(swift, obsoleted: 3, renamed: "property(forKey:)")
  func propertyForKey(_ key: Stream.PropertyKey) -> Any?
  func setProperty(_ property: Any?, forKey key: Stream.PropertyKey) -> Bool
  func schedule(in aRunLoop: RunLoop, forMode mode: RunLoop.Mode)
  @available(swift, obsoleted: 3, renamed: "schedule(in:forMode:)")
  func scheduleInRunLoop(_ aRunLoop: RunLoop, forMode mode: RunLoop.Mode)
  func remove(from aRunLoop: RunLoop, forMode mode: RunLoop.Mode)
  @available(swift, obsoleted: 3, renamed: "remove(from:forMode:)")
  func removeFromRunLoop(_ aRunLoop: RunLoop, forMode mode: RunLoop.Mode)
  var streamStatus: Stream.Status { get }
  var streamError: Error? { get }
  init()
}
class InputStream : Stream {
  func read(_ buffer: UnsafeMutablePointer<UInt8>, maxLength len: Int) -> Int
  func getBuffer(_ buffer: UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>, length len: UnsafeMutablePointer<Int>) -> Bool
  var hasBytesAvailable: Bool { get }
  init(data: Data)
  @available(iOS 4.0, *)
  init?(url: URL)
  @available(iOS 4.0, *)
  @available(swift, obsoleted: 3, renamed: "init(url:)")
  init?(URL url: URL)
  convenience init()
}
@available(swift, obsoleted: 3, renamed: "InputStream")
typealias NSInputStream = InputStream
@available(swift, obsoleted: 3, renamed: "OutputStream")
typealias NSOutputStream = OutputStream
class OutputStream : Stream {
  func write(_ buffer: UnsafePointer<UInt8>, maxLength len: Int) -> Int
  var hasSpaceAvailable: Bool { get }
  init(toMemory: ())
  init(toBuffer buffer: UnsafeMutablePointer<UInt8>, capacity: Int)
  @available(iOS 4.0, *)
  init?(url: URL, append shouldAppend: Bool)
  @available(iOS 4.0, *)
  @available(swift, obsoleted: 3, renamed: "init(url:append:)")
  init?(URL url: URL, append shouldAppend: Bool)
  convenience init()
}
extension Stream {
  @available(iOS, introduced: 8.0, deprecated: 100000, message: "Use nw_connection_t in Network framework instead")
  class func getStreamsToHost(withName hostname: String, port: Int, inputStream: AutoreleasingUnsafeMutablePointer<InputStream?>?, outputStream: AutoreleasingUnsafeMutablePointer<OutputStream?>?)
  @available(swift, obsoleted: 3, renamed: "getStreamsToHost(withName:port:inputStream:outputStream:)")
  @available(iOS, introduced: 8.0, deprecated: 100000, message: "Use nw_connection_t in Network framework instead")
  class func getStreamsToHostWithName(_ hostname: String, port: Int, inputStream: AutoreleasingUnsafeMutablePointer<InputStream?>?, outputStream: AutoreleasingUnsafeMutablePointer<OutputStream?>?)
}
extension Stream {
  @available(iOS 8.0, *)
  class func getBoundStreams(withBufferSize bufferSize: Int, inputStream: AutoreleasingUnsafeMutablePointer<InputStream?>?, outputStream: AutoreleasingUnsafeMutablePointer<OutputStream?>?)
  @available(iOS 8.0, *)
  @available(swift, obsoleted: 3, renamed: "getBoundStreams(withBufferSize:inputStream:outputStream:)")
  class func getBoundStreamsWithBufferSize(_ bufferSize: Int, inputStream: AutoreleasingUnsafeMutablePointer<InputStream?>?, outputStream: AutoreleasingUnsafeMutablePointer<OutputStream?>?)
}
extension InputStream {
  convenience init?(fileAtPath path: String)
  @available(*, unavailable, renamed: "init(data:)", message: "Not available in Swift")
  class func inputStreamWithData(_ data: Data) -> Self?
  @available(*, unavailable, renamed: "init(fileAtPath:)", message: "Not available in Swift")
  class func inputStreamWithFileAtPath(_ path: String) -> Self?
  @available(iOS 4.0, *)
  @available(swift, obsoleted: 3, renamed: "init(url:)")
  convenience init?(URL url: URL)
  @available(iOS 4.0, *)
  @available(*, unavailable, renamed: "init(url:)", message: "Not available in Swift")
  class func inputStreamWithURL(_ url: URL) -> Self?
}
extension OutputStream {
  convenience init?(toFileAtPath path: String, append shouldAppend: Bool)
  class func toMemory() -> Self
  @available(swift, obsoleted: 3, renamed: "toMemory()")
  class func outputStreamToMemory() -> Self
  @available(*, unavailable, renamed: "init(toBuffer:capacity:)", message: "Not available in Swift")
  class func outputStreamToBuffer(_ buffer: UnsafeMutablePointer<UInt8>, capacity: Int) -> Self
  @available(*, unavailable, renamed: "init(toFileAtPath:append:)", message: "Not available in Swift")
  class func outputStreamToFileAtPath(_ path: String, append shouldAppend: Bool) -> Self
  @available(iOS 4.0, *)
  @available(swift, obsoleted: 3, renamed: "init(url:append:)")
  convenience init?(URL url: URL, append shouldAppend: Bool)
  @available(iOS 4.0, *)
  @available(*, unavailable, renamed: "init(url:append:)", message: "Not available in Swift")
  class func outputStreamWithURL(_ url: URL, append shouldAppend: Bool) -> Self?
}
@available(swift, obsoleted: 3, renamed: "StreamDelegate")
typealias NSStreamDelegate = StreamDelegate
protocol StreamDelegate : NSObjectProtocol {
  optional func stream(_ aStream: Stream, handleEvent eventCode: NSStreamEvent)
}
@available(iOS 2.0, *)
@available(swift, obsoleted: 3, renamed: "Stream.PropertyKey.socketSecurityLevelKey")
let NSStreamSocketSecurityLevelKey: Stream.PropertyKey
extension Stream.PropertyKey {
  @available(iOS 2.0, *)
  static let socketSecurityLevelKey: Stream.PropertyKey
  @available(iOS 2.0, *)
  static let socksProxyConfigurationKey: Stream.PropertyKey
  @available(iOS 2.0, *)
  static let dataWrittenToMemoryStreamKey: Stream.PropertyKey
  @available(iOS 2.0, *)
  static let fileCurrentOffsetKey: Stream.PropertyKey
  @available(iOS 4.0, *)
  static let networkServiceType: Stream.PropertyKey
}
@available(swift, obsoleted: 3, renamed: "StreamSocketSecurityLevel")
typealias NSStreamSocketSecurityLevel = StreamSocketSecurityLevel
struct StreamSocketSecurityLevel : _ObjectiveCBridgeable, Hashable, Equatable, _SwiftNewtypeWrapper, RawRepresentable, @unchecked Sendable {
  init(rawValue: String)
  var _rawValue: NSString
  var rawValue: String { get }
  typealias RawValue = String
  typealias _ObjectiveCType = NSString
}
@available(iOS 2.0, *)
@available(swift, obsoleted: 3, renamed: "StreamSocketSecurityLevel.none")
let NSStreamSocketSecurityLevelNone: StreamSocketSecurityLevel
extension StreamSocketSecurityLevel {
  @available(iOS 2.0, *)
  static let none: StreamSocketSecurityLevel
  @available(iOS 2.0, *)
  static let ssLv2: StreamSocketSecurityLevel
  @available(iOS 2.0, *)
  static let ssLv3: StreamSocketSecurityLevel
  @available(iOS 2.0, *)
  static let tlSv1: StreamSocketSecurityLevel
  @available(iOS 2.0, *)
  static let negotiatedSSL: StreamSocketSecurityLevel
}
@available(iOS 2.0, *)
@available(swift, obsoleted: 3, renamed: "StreamSocketSecurityLevel.ssLv2")
let NSStreamSocketSecurityLevelSSLv2: StreamSocketSecurityLevel
@available(iOS 2.0, *)
@available(swift, obsoleted: 3, renamed: "StreamSocketSecurityLevel.ssLv3")
let NSStreamSocketSecurityLevelSSLv3: StreamSocketSecurityLevel
@available(iOS 2.0, *)
@available(swift, obsoleted: 3, renamed: "StreamSocketSecurityLevel.tlSv1")
let NSStreamSocketSecurityLevelTLSv1: StreamSocketSecurityLevel
@available(iOS 2.0, *)
@available(swift, obsoleted: 3, renamed: "StreamSocketSecurityLevel.negotiatedSSL")
let NSStreamSocketSecurityLevelNegotiatedSSL: StreamSocketSecurityLevel
@available(iOS 2.0, *)
@available(swift, obsoleted: 3, renamed: "Stream.PropertyKey.socksProxyConfigurationKey")
let NSStreamSOCKSProxyConfigurationKey: Stream.PropertyKey
@available(swift, obsoleted: 3, renamed: "StreamSOCKSProxyConfiguration")
typealias NSStreamSOCKSProxyConfiguration = StreamSOCKSProxyConfiguration
struct StreamSOCKSProxyConfiguration : _ObjectiveCBridgeable, Hashable, Equatable, _SwiftNewtypeWrapper, RawRepresentable, @unchecked Sendable {
  init(rawValue: String)
  var _rawValue: NSString
  var rawValue: String { get }
  typealias RawValue = String
  typealias _ObjectiveCType = NSString
}
@available(iOS 2.0, *)
@available(swift, obsoleted: 3, renamed: "StreamSOCKSProxyConfiguration.hostKey")
let NSStreamSOCKSProxyHostKey: StreamSOCKSProxyConfiguration
extension StreamSOCKSProxyConfiguration {
  @available(iOS 2.0, *)
  static let hostKey: StreamSOCKSProxyConfiguration
  @available(iOS 2.0, *)
  static let portKey: StreamSOCKSProxyConfiguration
  @available(iOS 2.0, *)
  static let versionKey: StreamSOCKSProxyConfiguration
  @available(iOS 2.0, *)
  static let userKey: StreamSOCKSProxyConfiguration
  @available(iOS 2.0, *)
  static let passwordKey: StreamSOCKSProxyConfiguration
}
@available(iOS 2.0, *)
@available(swift, obsoleted: 3, renamed: "StreamSOCKSProxyConfiguration.portKey")
let NSStreamSOCKSProxyPortKey: StreamSOCKSProxyConfiguration
@available(iOS 2.0, *)
@available(swift, obsoleted: 3, renamed: "StreamSOCKSProxyConfiguration.versionKey")
let NSStreamSOCKSProxyVersionKey: StreamSOCKSProxyConfiguration
@available(iOS 2.0, *)
@available(swift, obsoleted: 3, renamed: "StreamSOCKSProxyConfiguration.userKey")
let NSStreamSOCKSProxyUserKey: StreamSOCKSProxyConfiguration
@available(iOS 2.0, *)
@available(swift, obsoleted: 3, renamed: "StreamSOCKSProxyConfiguration.passwordKey")
let NSStreamSOCKSProxyPasswordKey: StreamSOCKSProxyConfiguration
@available(swift, obsoleted: 3, renamed: "StreamSOCKSProxyVersion")
typealias NSStreamSOCKSProxyVersion = StreamSOCKSProxyVersion
struct StreamSOCKSProxyVersion : _ObjectiveCBridgeable, Hashable, Equatable, _SwiftNewtypeWrapper, RawRepresentable, @unchecked Sendable {
  init(rawValue: String)
  var _rawValue: NSString
  var rawValue: String { get }
  typealias RawValue = String
  typealias _ObjectiveCType = NSString
}
@available(iOS 2.0, *)
@available(swift, obsoleted: 3, renamed: "StreamSOCKSProxyVersion.version4")
let NSStreamSOCKSProxyVersion4: StreamSOCKSProxyVersion
extension StreamSOCKSProxyVersion {
  @available(iOS 2.0, *)
  static let version4: StreamSOCKSProxyVersion
  @available(iOS 2.0, *)
  static let version5: StreamSOCKSProxyVersion
}
@available(iOS 2.0, *)
@available(swift, obsoleted: 3, renamed: "StreamSOCKSProxyVersion.version5")
let NSStreamSOCKSProxyVersion5: StreamSOCKSProxyVersion
@available(iOS 2.0, *)
@available(swift, obsoleted: 3, renamed: "Stream.PropertyKey.dataWrittenToMemoryStreamKey")
let NSStreamDataWrittenToMemoryStreamKey: Stream.PropertyKey
@available(iOS 2.0, *)
@available(swift, obsoleted: 3, renamed: "Stream.PropertyKey.fileCurrentOffsetKey")
let NSStreamFileCurrentOffsetKey: Stream.PropertyKey
@available(iOS 2.0, *)
let NSStreamSocketSSLErrorDomain: String
@available(iOS 2.0, *)
let NSStreamSOCKSErrorDomain: String
@available(iOS 4.0, *)
@available(swift, obsoleted: 3, renamed: "Stream.PropertyKey.networkServiceType")
let NSStreamNetworkServiceType: Stream.PropertyKey
@available(swift, obsoleted: 3, renamed: "StreamNetworkServiceTypeValue")
typealias NSStreamNetworkServiceTypeValue = StreamNetworkServiceTypeValue
struct StreamNetworkServiceTypeValue : _ObjectiveCBridgeable, Hashable, Equatable, _SwiftNewtypeWrapper, RawRepresentable, @unchecked Sendable {
  init(rawValue: String)
  var _rawValue: NSString
  var rawValue: String { get }
  typealias RawValue = String
  typealias _ObjectiveCType = NSString
}
@available(iOS 4.0, *)
@available(swift, obsoleted: 3, renamed: "StreamNetworkServiceTypeValue.voIP")
let NSStreamNetworkServiceTypeVoIP: StreamNetworkServiceTypeValue
extension StreamNetworkServiceTypeValue {
  @available(iOS 4.0, *)
  static let voIP: StreamNetworkServiceTypeValue
  @available(iOS 5.0, *)
  static let video: StreamNetworkServiceTypeValue
  @available(iOS 5.0, *)
  static let background: StreamNetworkServiceTypeValue
  @available(iOS 5.0, *)
  static let voice: StreamNetworkServiceTypeValue
  @available(iOS 10.0, *)
  static let callSignaling: StreamNetworkServiceTypeValue
}
@available(iOS 5.0, *)
@available(swift, obsoleted: 3, renamed: "StreamNetworkServiceTypeValue.video")
let NSStreamNetworkServiceTypeVideo: StreamNetworkServiceTypeValue
@available(iOS 5.0, *)
@available(swift, obsoleted: 3, renamed: "StreamNetworkServiceTypeValue.background")
let NSStreamNetworkServiceTypeBackground: StreamNetworkServiceTypeValue
@available(iOS 5.0, *)
@available(swift, obsoleted: 3, renamed: "StreamNetworkServiceTypeValue.voice")
let NSStreamNetworkServiceTypeVoice: StreamNetworkServiceTypeValue
@available(iOS 10.0, *)
@available(swift, obsoleted: 3, renamed: "StreamNetworkServiceTypeValue.callSignaling")
let NSStreamNetworkServiceTypeCallSignaling: StreamNetworkServiceTypeValue
