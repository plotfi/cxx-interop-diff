@_exported import CoreFoundation

@available(*, unavailable, message: "Not available in Swift")
typealias NSRegularExpressionOptions = Int
struct NSRegularExpressionOptions : OptionSet, @unchecked Sendable {
  init(rawValue: UInt)
  let rawValue: UInt
  typealias RawValue = UInt
  typealias Element = NSRegularExpressionOptions
  typealias ArrayLiteralElement = NSRegularExpressionOptions
  static var caseInsensitive: NSRegularExpressionOptions { get }
  @available(swift, obsoleted: 3, renamed: "caseInsensitive")
  static var CaseInsensitive: NSRegularExpressionOptions { get }
  static var allowCommentsAndWhitespace: NSRegularExpressionOptions { get }
  @available(swift, obsoleted: 3, renamed: "allowCommentsAndWhitespace")
  static var AllowCommentsAndWhitespace: NSRegularExpressionOptions { get }
  static var ignoreMetacharacters: NSRegularExpressionOptions { get }
  @available(swift, obsoleted: 3, renamed: "ignoreMetacharacters")
  static var IgnoreMetacharacters: NSRegularExpressionOptions { get }
  static var dotMatchesLineSeparators: NSRegularExpressionOptions { get }
  @available(swift, obsoleted: 3, renamed: "dotMatchesLineSeparators")
  static var DotMatchesLineSeparators: NSRegularExpressionOptions { get }
  static var anchorsMatchLines: NSRegularExpressionOptions { get }
  @available(swift, obsoleted: 3, renamed: "anchorsMatchLines")
  static var AnchorsMatchLines: NSRegularExpressionOptions { get }
  static var useUnixLineSeparators: NSRegularExpressionOptions { get }
  @available(swift, obsoleted: 3, renamed: "useUnixLineSeparators")
  static var UseUnixLineSeparators: NSRegularExpressionOptions { get }
  static var useUnicodeWordBoundaries: NSRegularExpressionOptions { get }
  @available(swift, obsoleted: 3, renamed: "useUnicodeWordBoundaries")
  static var UseUnicodeWordBoundaries: NSRegularExpressionOptions { get }
}
@available(iOS 4.0, *)
class NSRegularExpression : NSObject, NSCopying, NSSecureCoding {
  @available(*, unavailable, message: "superseded by import of -[NSRegularExpression initWithPattern:options:error:]")
  /*not inherited*/ init(pattern: String, options: NSRegularExpressionOptions = []) throws
  @available(*, unavailable, renamed: "init(pattern:options:)", message: "Not available in Swift")
  class func regularExpressionWithPattern(_ pattern: String, options: NSRegularExpressionOptions = []) throws -> NSRegularExpression
  init(pattern: String, options: NSRegularExpressionOptions = []) throws
  var pattern: String { get }
  var options: Int { get }
  var numberOfCaptureGroups: Int { get }
  class func escapedPattern(for string: String) -> String
  @available(swift, obsoleted: 3, renamed: "escapedPattern(for:)")
  class func escapedPatternForString(_ string: String) -> String
  convenience init()
  @available(iOS 4.0, *)
  class var supportsSecureCoding: Bool { get }
  @available(iOS 4.0, *)
  func copy(with zone: NSZone? = nil) -> Any
  @available(iOS 4.0, *)
  func encode(with coder: NSCoder)
  init?(coder: NSCoder)
}
@available(*, unavailable, message: "Not available in Swift")
typealias NSMatchingOptions = Int
struct NSMatchingOptions : OptionSet, @unchecked Sendable {
  init(rawValue: UInt)
  let rawValue: UInt
  typealias RawValue = UInt
  typealias Element = NSMatchingOptions
  typealias ArrayLiteralElement = NSMatchingOptions
  static var reportProgress: NSMatchingOptions { get }
  @available(swift, obsoleted: 3, renamed: "reportProgress")
  static var ReportProgress: NSMatchingOptions { get }
  static var reportCompletion: NSMatchingOptions { get }
  @available(swift, obsoleted: 3, renamed: "reportCompletion")
  static var ReportCompletion: NSMatchingOptions { get }
  static var anchored: NSMatchingOptions { get }
  @available(swift, obsoleted: 3, renamed: "anchored")
  static var Anchored: NSMatchingOptions { get }
  static var withTransparentBounds: NSMatchingOptions { get }
  @available(swift, obsoleted: 3, renamed: "withTransparentBounds")
  static var WithTransparentBounds: NSMatchingOptions { get }
  static var withoutAnchoringBounds: NSMatchingOptions { get }
  @available(swift, obsoleted: 3, renamed: "withoutAnchoringBounds")
  static var WithoutAnchoringBounds: NSMatchingOptions { get }
}
@available(*, unavailable, message: "Not available in Swift")
typealias NSMatchingFlags = Int
struct NSMatchingFlags : OptionSet, @unchecked Sendable {
  init(rawValue: UInt)
  let rawValue: UInt
  typealias RawValue = UInt
  typealias Element = NSMatchingFlags
  typealias ArrayLiteralElement = NSMatchingFlags
  static var progress: NSMatchingFlags { get }
  @available(swift, obsoleted: 3, renamed: "progress")
  static var Progress: NSMatchingFlags { get }
  static var completed: NSMatchingFlags { get }
  @available(swift, obsoleted: 3, renamed: "completed")
  static var Completed: NSMatchingFlags { get }
  static var hitEnd: NSMatchingFlags { get }
  @available(swift, obsoleted: 3, renamed: "hitEnd")
  static var HitEnd: NSMatchingFlags { get }
  static var requiredEnd: NSMatchingFlags { get }
  @available(swift, obsoleted: 3, renamed: "requiredEnd")
  static var RequiredEnd: NSMatchingFlags { get }
  static var internalError: NSMatchingFlags { get }
  @available(swift, obsoleted: 3, renamed: "internalError")
  static var InternalError: NSMatchingFlags { get }
}
extension NSRegularExpression {
  func enumerateMatches(in string: String, options: NSMatchingOptions = [], range: NSRange, using block: (NSTextCheckingResult?, Int, UnsafeMutablePointer<ObjCBool>) -> Void)
  @available(swift, obsoleted: 3, renamed: "enumerateMatches(in:options:range:using:)")
  func enumerateMatchesInString(_ string: String, options: NSMatchingOptions = [], range: NSRange, usingBlock block: (NSTextCheckingResult?, Int, UnsafeMutablePointer<ObjCBool>) -> Void)
  func matches(in string: String, options: NSMatchingOptions = [], range: NSRange) -> [NSTextCheckingResult]
  @available(swift, obsoleted: 3, renamed: "matches(in:options:range:)")
  func matchesInString(_ string: String, options: NSMatchingOptions = [], range: NSRange) -> [NSTextCheckingResult]
  func numberOfMatches(in string: String, options: NSMatchingOptions = [], range: NSRange) -> Int
  @available(swift, obsoleted: 3, renamed: "numberOfMatches(in:options:range:)")
  func numberOfMatchesInString(_ string: String, options: NSMatchingOptions = [], range: NSRange) -> Int
  func firstMatch(in string: String, options: NSMatchingOptions = [], range: NSRange) -> NSTextCheckingResult?
  @available(swift, obsoleted: 3, renamed: "firstMatch(in:options:range:)")
  func firstMatchInString(_ string: String, options: NSMatchingOptions = [], range: NSRange) -> NSTextCheckingResult?
  func rangeOfFirstMatch(in string: String, options: NSMatchingOptions = [], range: NSRange) -> NSRange
  @available(swift, obsoleted: 3, renamed: "rangeOfFirstMatch(in:options:range:)")
  func rangeOfFirstMatchInString(_ string: String, options: NSMatchingOptions = [], range: NSRange) -> NSRange
}
extension NSRegularExpression {
  func stringByReplacingMatches(in string: String, options: NSMatchingOptions = [], range: NSRange, withTemplate templ: String) -> String
  @available(swift, obsoleted: 3, renamed: "stringByReplacingMatches(in:options:range:withTemplate:)")
  func stringByReplacingMatchesInString(_ string: String, options: NSMatchingOptions = [], range: NSRange, withTemplate templ: String) -> String
  func replaceMatches(in string: NSMutableString, options: NSMatchingOptions = [], range: NSRange, withTemplate templ: String) -> Int
  @available(swift, obsoleted: 3, renamed: "replaceMatches(in:options:range:withTemplate:)")
  func replaceMatchesInString(_ string: NSMutableString, options: NSMatchingOptions = [], range: NSRange, withTemplate templ: String) -> Int
  func replacementString(for result: NSTextCheckingResult, in string: String, offset: Int, template templ: String) -> String
  @available(swift, obsoleted: 3, renamed: "replacementString(for:in:offset:template:)")
  func replacementStringForResult(_ result: NSTextCheckingResult, inString string: String, offset: Int, template templ: String) -> String
  class func escapedTemplate(for string: String) -> String
  @available(swift, obsoleted: 3, renamed: "escapedTemplate(for:)")
  class func escapedTemplateForString(_ string: String) -> String
}
@available(iOS 4.0, *)
class NSDataDetector : NSRegularExpression {
  @available(*, unavailable, message: "superseded by import of -[NSDataDetector initWithTypes:error:]")
  /*not inherited*/ init(types checkingTypes: NSTextCheckingTypes) throws
  @available(*, unavailable, renamed: "init(types:)", message: "Not available in Swift")
  class func dataDetectorWithTypes(_ checkingTypes: NSTextCheckingTypes) throws -> NSDataDetector
  init(types checkingTypes: NSTextCheckingTypes) throws
  var checkingTypes: NSTextCheckingTypes { get }
  convenience init(pattern: String, options: NSRegularExpressionOptions = []) throws
  convenience init()
  init?(coder: NSCoder)
}
