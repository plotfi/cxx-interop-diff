@_exported import CoreFoundation

@available(swift, obsoleted: 3, renamed: "NSCalendar.Identifier")
typealias NSCalendarIdentifier = NSCalendar.Identifier
extension NSCalendar {
  struct Identifier : _ObjectiveCBridgeable, Hashable, Equatable, _SwiftNewtypeWrapper, RawRepresentable, @unchecked Sendable {
    init(_ rawValue: String)
    init(rawValue: String)
    var _rawValue: NSString
    var rawValue: String { get }
    typealias RawValue = String
    typealias _ObjectiveCType = NSString
  }
}
@available(iOS 4.0, *)
@available(swift, obsoleted: 3, renamed: "NSCalendar.Identifier.gregorian")
let NSCalendarIdentifierGregorian: NSCalendar.Identifier
extension NSCalendar.Identifier {
  @available(iOS 4.0, *)
  static let gregorian: NSCalendar.Identifier
  @available(iOS 4.0, *)
  static let buddhist: NSCalendar.Identifier
  @available(iOS 4.0, *)
  static let chinese: NSCalendar.Identifier
  @available(iOS 4.0, *)
  static let coptic: NSCalendar.Identifier
  @available(iOS 4.0, *)
  static let ethiopicAmeteMihret: NSCalendar.Identifier
  @available(iOS 4.0, *)
  static let ethiopicAmeteAlem: NSCalendar.Identifier
  @available(iOS 4.0, *)
  static let hebrew: NSCalendar.Identifier
  @available(iOS 4.0, *)
  static let ISO8601: NSCalendar.Identifier
  @available(iOS 4.0, *)
  static let indian: NSCalendar.Identifier
  @available(iOS 4.0, *)
  static let islamic: NSCalendar.Identifier
  @available(iOS 4.0, *)
  static let islamicCivil: NSCalendar.Identifier
  @available(iOS 4.0, *)
  static let japanese: NSCalendar.Identifier
  @available(iOS 4.0, *)
  static let persian: NSCalendar.Identifier
  @available(iOS 4.0, *)
  static let republicOfChina: NSCalendar.Identifier
  @available(iOS 8.0, *)
  static let islamicTabular: NSCalendar.Identifier
  @available(iOS 8.0, *)
  static let islamicUmmAlQura: NSCalendar.Identifier
}
@available(iOS 4.0, *)
@available(swift, obsoleted: 3, renamed: "NSCalendar.Identifier.buddhist")
let NSCalendarIdentifierBuddhist: NSCalendar.Identifier
@available(iOS 4.0, *)
@available(swift, obsoleted: 3, renamed: "NSCalendar.Identifier.chinese")
let NSCalendarIdentifierChinese: NSCalendar.Identifier
@available(iOS 4.0, *)
@available(swift, obsoleted: 3, renamed: "NSCalendar.Identifier.coptic")
let NSCalendarIdentifierCoptic: NSCalendar.Identifier
@available(iOS 4.0, *)
@available(swift, obsoleted: 3, renamed: "NSCalendar.Identifier.ethiopicAmeteMihret")
let NSCalendarIdentifierEthiopicAmeteMihret: NSCalendar.Identifier
@available(iOS 4.0, *)
@available(swift, obsoleted: 3, renamed: "NSCalendar.Identifier.ethiopicAmeteAlem")
let NSCalendarIdentifierEthiopicAmeteAlem: NSCalendar.Identifier
@available(iOS 4.0, *)
@available(swift, obsoleted: 3, renamed: "NSCalendar.Identifier.hebrew")
let NSCalendarIdentifierHebrew: NSCalendar.Identifier
@available(iOS 4.0, *)
@available(swift, obsoleted: 3, renamed: "NSCalendar.Identifier.ISO8601")
let NSCalendarIdentifierISO8601: NSCalendar.Identifier
@available(iOS 4.0, *)
@available(swift, obsoleted: 3, renamed: "NSCalendar.Identifier.indian")
let NSCalendarIdentifierIndian: NSCalendar.Identifier
@available(iOS 4.0, *)
@available(swift, obsoleted: 3, renamed: "NSCalendar.Identifier.islamic")
let NSCalendarIdentifierIslamic: NSCalendar.Identifier
@available(iOS 4.0, *)
@available(swift, obsoleted: 3, renamed: "NSCalendar.Identifier.islamicCivil")
let NSCalendarIdentifierIslamicCivil: NSCalendar.Identifier
@available(iOS 4.0, *)
@available(swift, obsoleted: 3, renamed: "NSCalendar.Identifier.japanese")
let NSCalendarIdentifierJapanese: NSCalendar.Identifier
@available(iOS 4.0, *)
@available(swift, obsoleted: 3, renamed: "NSCalendar.Identifier.persian")
let NSCalendarIdentifierPersian: NSCalendar.Identifier
@available(iOS 4.0, *)
@available(swift, obsoleted: 3, renamed: "NSCalendar.Identifier.republicOfChina")
let NSCalendarIdentifierRepublicOfChina: NSCalendar.Identifier
@available(iOS 8.0, *)
@available(swift, obsoleted: 3, renamed: "NSCalendar.Identifier.islamicTabular")
let NSCalendarIdentifierIslamicTabular: NSCalendar.Identifier
@available(iOS 8.0, *)
@available(swift, obsoleted: 3, renamed: "NSCalendar.Identifier.islamicUmmAlQura")
let NSCalendarIdentifierIslamicUmmAlQura: NSCalendar.Identifier
@available(*, unavailable, message: "Not available in Swift")
typealias NSCalendarUnit = Int
struct NSCalendarUnit : OptionSet, @unchecked Sendable {
  init(rawValue: UInt)
  let rawValue: UInt
  typealias RawValue = UInt
  typealias Element = NSCalendarUnit
  typealias ArrayLiteralElement = NSCalendarUnit
  static var era: NSCalendarUnit { get }
  @available(swift, obsoleted: 3, renamed: "era")
  static var Era: NSCalendarUnit { get }
  static var year: NSCalendarUnit { get }
  @available(swift, obsoleted: 3, renamed: "year")
  static var Year: NSCalendarUnit { get }
  static var month: NSCalendarUnit { get }
  @available(swift, obsoleted: 3, renamed: "month")
  static var Month: NSCalendarUnit { get }
  static var day: NSCalendarUnit { get }
  @available(swift, obsoleted: 3, renamed: "day")
  static var Day: NSCalendarUnit { get }
  static var hour: NSCalendarUnit { get }
  @available(swift, obsoleted: 3, renamed: "hour")
  static var Hour: NSCalendarUnit { get }
  static var minute: NSCalendarUnit { get }
  @available(swift, obsoleted: 3, renamed: "minute")
  static var Minute: NSCalendarUnit { get }
  static var second: NSCalendarUnit { get }
  @available(swift, obsoleted: 3, renamed: "second")
  static var Second: NSCalendarUnit { get }
  static var weekday: NSCalendarUnit { get }
  @available(swift, obsoleted: 3, renamed: "weekday")
  static var Weekday: NSCalendarUnit { get }
  static var weekdayOrdinal: NSCalendarUnit { get }
  @available(swift, obsoleted: 3, renamed: "weekdayOrdinal")
  static var WeekdayOrdinal: NSCalendarUnit { get }
  @available(iOS 4.0, *)
  static var quarter: NSCalendarUnit { get }
  @available(iOS 4.0, *)
  @available(swift, obsoleted: 3, renamed: "quarter")
  static var Quarter: NSCalendarUnit { get }
  @available(iOS 5.0, *)
  static var weekOfMonth: NSCalendarUnit { get }
  @available(iOS 5.0, *)
  @available(swift, obsoleted: 3, renamed: "weekOfMonth")
  static var WeekOfMonth: NSCalendarUnit { get }
  @available(iOS 5.0, *)
  static var weekOfYear: NSCalendarUnit { get }
  @available(iOS 5.0, *)
  @available(swift, obsoleted: 3, renamed: "weekOfYear")
  static var WeekOfYear: NSCalendarUnit { get }
  @available(iOS 5.0, *)
  static var yearForWeekOfYear: NSCalendarUnit { get }
  @available(iOS 5.0, *)
  @available(swift, obsoleted: 3, renamed: "yearForWeekOfYear")
  static var YearForWeekOfYear: NSCalendarUnit { get }
  @available(iOS 5.0, *)
  static var nanosecond: NSCalendarUnit { get }
  @available(iOS 5.0, *)
  @available(swift, obsoleted: 3, renamed: "nanosecond")
  static var Nanosecond: NSCalendarUnit { get }
  @available(iOS 4.0, *)
  static var calendar: NSCalendarUnit { get }
  @available(iOS 4.0, *)
  @available(swift, obsoleted: 3, renamed: "calendar")
  static var Calendar: NSCalendarUnit { get }
  @available(iOS 4.0, *)
  static var timeZone: NSCalendarUnit { get }
  @available(iOS 4.0, *)
  @available(swift, obsoleted: 3, renamed: "timeZone")
  static var TimeZone: NSCalendarUnit { get }
  @available(iOS, introduced: 2.0, deprecated: 8.0, renamed: "NSCalendarUnit.era")
  static var NSEraCalendarUnit: NSCalendarUnit { get }
  @available(iOS, introduced: 2.0, deprecated: 8.0, renamed: "NSCalendarUnit.year")
  static var NSYearCalendarUnit: NSCalendarUnit { get }
  @available(iOS, introduced: 2.0, deprecated: 8.0, renamed: "NSCalendarUnit.month")
  static var NSMonthCalendarUnit: NSCalendarUnit { get }
  @available(iOS, introduced: 2.0, deprecated: 8.0, renamed: "NSCalendarUnit.day")
  static var NSDayCalendarUnit: NSCalendarUnit { get }
  @available(iOS, introduced: 2.0, deprecated: 8.0, renamed: "NSCalendarUnit.hour")
  static var NSHourCalendarUnit: NSCalendarUnit { get }
  @available(iOS, introduced: 2.0, deprecated: 8.0, renamed: "NSCalendarUnit.minute")
  static var NSMinuteCalendarUnit: NSCalendarUnit { get }
  @available(iOS, introduced: 2.0, deprecated: 8.0, renamed: "NSCalendarUnit.second")
  static var NSSecondCalendarUnit: NSCalendarUnit { get }
  @available(iOS, introduced: 2.0, deprecated: 8.0, message: "NSCalendarUnitWeekOfMonth or NSCalendarUnitWeekOfYear, depending on which you mean")
  static var NSWeekCalendarUnit: NSCalendarUnit { get }
  @available(iOS, introduced: 2.0, deprecated: 8.0, renamed: "NSCalendarUnit.weekday")
  static var NSWeekdayCalendarUnit: NSCalendarUnit { get }
  @available(iOS, introduced: 2.0, deprecated: 8.0, renamed: "NSCalendarUnit.weekdayOrdinal")
  static var NSWeekdayOrdinalCalendarUnit: NSCalendarUnit { get }
  @available(iOS, introduced: 4.0, deprecated: 8.0, renamed: "NSCalendarUnit.quarter")
  static var NSQuarterCalendarUnit: NSCalendarUnit { get }
  @available(iOS, introduced: 5.0, deprecated: 8.0, renamed: "NSCalendarUnit.weekOfMonth")
  static var NSWeekOfMonthCalendarUnit: NSCalendarUnit { get }
  @available(iOS, introduced: 5.0, deprecated: 8.0, renamed: "NSCalendarUnit.weekOfYear")
  static var NSWeekOfYearCalendarUnit: NSCalendarUnit { get }
  @available(iOS, introduced: 5.0, deprecated: 8.0, renamed: "NSCalendarUnit.yearForWeekOfYear")
  static var NSYearForWeekOfYearCalendarUnit: NSCalendarUnit { get }
  @available(iOS, introduced: 4.0, deprecated: 8.0, renamed: "NSCalendarUnit.calendar")
  static var NSCalendarCalendarUnit: NSCalendarUnit { get }
  @available(iOS, introduced: 4.0, deprecated: 8.0, renamed: "NSCalendarUnit.timeZone")
  static var NSTimeZoneCalendarUnit: NSCalendarUnit { get }
}
@available(*, unavailable, message: "Not available in Swift")
typealias NSCalendarOptions = Int
struct NSCalendarOptions : OptionSet, @unchecked Sendable {
  init(rawValue: UInt)
  let rawValue: UInt
  typealias RawValue = UInt
  typealias Element = NSCalendarOptions
  typealias ArrayLiteralElement = NSCalendarOptions
  static var wrapComponents: NSCalendarOptions { get }
  @available(swift, obsoleted: 3, renamed: "wrapComponents")
  static var WrapComponents: NSCalendarOptions { get }
  @available(iOS 7.0, *)
  static var matchStrictly: NSCalendarOptions { get }
  @available(iOS 7.0, *)
  @available(swift, obsoleted: 3, renamed: "matchStrictly")
  static var MatchStrictly: NSCalendarOptions { get }
  @available(iOS 7.0, *)
  static var searchBackwards: NSCalendarOptions { get }
  @available(iOS 7.0, *)
  @available(swift, obsoleted: 3, renamed: "searchBackwards")
  static var SearchBackwards: NSCalendarOptions { get }
  @available(iOS 7.0, *)
  static var matchPreviousTimePreservingSmallerUnits: NSCalendarOptions { get }
  @available(iOS 7.0, *)
  @available(swift, obsoleted: 3, renamed: "matchPreviousTimePreservingSmallerUnits")
  static var MatchPreviousTimePreservingSmallerUnits: NSCalendarOptions { get }
  @available(iOS 7.0, *)
  static var matchNextTimePreservingSmallerUnits: NSCalendarOptions { get }
  @available(iOS 7.0, *)
  @available(swift, obsoleted: 3, renamed: "matchNextTimePreservingSmallerUnits")
  static var MatchNextTimePreservingSmallerUnits: NSCalendarOptions { get }
  @available(iOS 7.0, *)
  static var matchNextTime: NSCalendarOptions { get }
  @available(iOS 7.0, *)
  @available(swift, obsoleted: 3, renamed: "matchNextTime")
  static var MatchNextTime: NSCalendarOptions { get }
  @available(iOS 7.0, *)
  static var matchFirst: NSCalendarOptions { get }
  @available(iOS 7.0, *)
  @available(swift, obsoleted: 3, renamed: "matchFirst")
  static var MatchFirst: NSCalendarOptions { get }
  @available(iOS 7.0, *)
  static var matchLast: NSCalendarOptions { get }
  @available(iOS 7.0, *)
  @available(swift, obsoleted: 3, renamed: "matchLast")
  static var MatchLast: NSCalendarOptions { get }
}
@available(iOS, introduced: 2.0, deprecated: 8.0, renamed: "NSCalendarOptions.wrapComponents")
var NSWrapCalendarComponents: Int { get }
class NSCalendar : NSObject, NSCopying, NSSecureCoding {
  class var current: Calendar { get }
  @available(swift, obsoleted: 3, renamed: "current")
  class var currentCalendar: Calendar { get }
  @available(iOS 2.0, *)
  class var autoupdatingCurrent: Calendar { get }
  @available(iOS 2.0, *)
  @available(swift, obsoleted: 3, renamed: "autoupdatingCurrent")
  class var autoupdatingCurrentCalendar: Calendar { get }
  @available(iOS 8.0, *)
  /*not inherited*/ init?(identifier calendarIdentifierConstant: NSCalendar.Identifier)
  @available(iOS 8.0, *)
  @available(*, unavailable, renamed: "init(identifier:)", message: "Not available in Swift")
  class func calendarWithIdentifier(_ calendarIdentifierConstant: NSCalendar.Identifier) -> Calendar?
  @available(iOS, unavailable)
  convenience init()
  init?(calendarIdentifier ident: NSCalendar.Identifier)
  var calendarIdentifier: NSCalendar.Identifier { get }
  var locale: Locale?
  var timeZone: TimeZone
  var firstWeekday: Int
  var minimumDaysInFirstWeek: Int
  @available(iOS 5.0, *)
  var eraSymbols: [String] { get }
  @available(iOS 5.0, *)
  var longEraSymbols: [String] { get }
  @available(iOS 5.0, *)
  var monthSymbols: [String] { get }
  @available(iOS 5.0, *)
  var shortMonthSymbols: [String] { get }
  @available(iOS 5.0, *)
  var veryShortMonthSymbols: [String] { get }
  @available(iOS 5.0, *)
  var standaloneMonthSymbols: [String] { get }
  @available(iOS 5.0, *)
  var shortStandaloneMonthSymbols: [String] { get }
  @available(iOS 5.0, *)
  var veryShortStandaloneMonthSymbols: [String] { get }
  @available(iOS 5.0, *)
  var weekdaySymbols: [String] { get }
  @available(iOS 5.0, *)
  var shortWeekdaySymbols: [String] { get }
  @available(iOS 5.0, *)
  var veryShortWeekdaySymbols: [String] { get }
  @available(iOS 5.0, *)
  var standaloneWeekdaySymbols: [String] { get }
  @available(iOS 5.0, *)
  var shortStandaloneWeekdaySymbols: [String] { get }
  @available(iOS 5.0, *)
  var veryShortStandaloneWeekdaySymbols: [String] { get }
  @available(iOS 5.0, *)
  var quarterSymbols: [String] { get }
  @available(iOS 5.0, *)
  var shortQuarterSymbols: [String] { get }
  @available(iOS 5.0, *)
  var standaloneQuarterSymbols: [String] { get }
  @available(iOS 5.0, *)
  var shortStandaloneQuarterSymbols: [String] { get }
  @available(iOS 5.0, *)
  var amSymbol: String { get }
  @available(iOS 5.0, *)
  @available(swift, obsoleted: 3, renamed: "amSymbol")
  var AMSymbol: String { get }
  @available(iOS 5.0, *)
  var pmSymbol: String { get }
  @available(iOS 5.0, *)
  @available(swift, obsoleted: 3, renamed: "pmSymbol")
  var PMSymbol: String { get }
  func minimumRange(ofUnit unit: NSCalendarUnit) -> NSRange
  @available(swift, obsoleted: 3, renamed: "minimumRange(ofUnit:)")
  func minimumRangeOfUnit(_ unit: NSCalendarUnit) -> NSRange
  func maximumRange(ofUnit unit: NSCalendarUnit) -> NSRange
  @available(swift, obsoleted: 3, renamed: "maximumRange(ofUnit:)")
  func maximumRangeOfUnit(_ unit: NSCalendarUnit) -> NSRange
  func range(ofUnit smaller: NSCalendarUnit, inUnit larger: NSCalendarUnit, for date: Date) -> NSRange
  @available(swift, obsoleted: 3, renamed: "range(ofUnit:inUnit:for:)")
  func rangeOfUnit(_ smaller: NSCalendarUnit, inUnit larger: NSCalendarUnit, forDate date: Date) -> NSRange
  func ordinality(ofUnit smaller: NSCalendarUnit, inUnit larger: NSCalendarUnit, for date: Date) -> Int
  @available(swift, obsoleted: 3, renamed: "ordinality(ofUnit:inUnit:for:)")
  func ordinalityOfUnit(_ smaller: NSCalendarUnit, inUnit larger: NSCalendarUnit, forDate date: Date) -> Int
  @available(iOS 2.0, *)
  func range(ofUnit unit: NSCalendarUnit, start datep: AutoreleasingUnsafeMutablePointer<NSDate?>?, interval tip: UnsafeMutablePointer<TimeInterval>?, for date: Date) -> Bool
  @available(iOS 2.0, *)
  @available(swift, obsoleted: 3, renamed: "range(ofUnit:start:interval:for:)")
  func rangeOfUnit(_ unit: NSCalendarUnit, startDate datep: AutoreleasingUnsafeMutablePointer<NSDate?>?, interval tip: UnsafeMutablePointer<TimeInterval>?, forDate date: Date) -> Bool
  func date(from comps: DateComponents) -> Date?
  @available(swift, obsoleted: 3, renamed: "date(from:)")
  func dateFromComponents(_ comps: DateComponents) -> Date?
  func components(_ unitFlags: NSCalendarUnit, from date: Date) -> DateComponents
  @available(swift, obsoleted: 3, renamed: "components(_:from:)")
  func components(_ unitFlags: NSCalendarUnit, fromDate date: Date) -> DateComponents
  func date(byAdding comps: DateComponents, to date: Date, options opts: NSCalendarOptions = []) -> Date?
  @available(swift, obsoleted: 3, renamed: "date(byAdding:to:options:)")
  func dateByAddingComponents(_ comps: DateComponents, toDate date: Date, options opts: NSCalendarOptions = []) -> Date?
  func components(_ unitFlags: NSCalendarUnit, from startingDate: Date, to resultDate: Date, options opts: NSCalendarOptions = []) -> DateComponents
  @available(swift, obsoleted: 3, renamed: "components(_:from:to:options:)")
  func components(_ unitFlags: NSCalendarUnit, fromDate startingDate: Date, toDate resultDate: Date, options opts: NSCalendarOptions = []) -> DateComponents
  @available(iOS 8.0, *)
  func getEra(_ eraValuePointer: UnsafeMutablePointer<Int>?, year yearValuePointer: UnsafeMutablePointer<Int>?, month monthValuePointer: UnsafeMutablePointer<Int>?, day dayValuePointer: UnsafeMutablePointer<Int>?, from date: Date)
  @available(iOS 8.0, *)
  @available(swift, obsoleted: 3, renamed: "getEra(_:year:month:day:from:)")
  func getEra(_ eraValuePointer: UnsafeMutablePointer<Int>?, year yearValuePointer: UnsafeMutablePointer<Int>?, month monthValuePointer: UnsafeMutablePointer<Int>?, day dayValuePointer: UnsafeMutablePointer<Int>?, fromDate date: Date)
  @available(iOS 8.0, *)
  func getEra(_ eraValuePointer: UnsafeMutablePointer<Int>?, yearForWeekOfYear yearValuePointer: UnsafeMutablePointer<Int>?, weekOfYear weekValuePointer: UnsafeMutablePointer<Int>?, weekday weekdayValuePointer: UnsafeMutablePointer<Int>?, from date: Date)
  @available(iOS 8.0, *)
  @available(swift, obsoleted: 3, renamed: "getEra(_:yearForWeekOfYear:weekOfYear:weekday:from:)")
  func getEra(_ eraValuePointer: UnsafeMutablePointer<Int>?, yearForWeekOfYear yearValuePointer: UnsafeMutablePointer<Int>?, weekOfYear weekValuePointer: UnsafeMutablePointer<Int>?, weekday weekdayValuePointer: UnsafeMutablePointer<Int>?, fromDate date: Date)
  @available(iOS 8.0, *)
  func getHour(_ hourValuePointer: UnsafeMutablePointer<Int>?, minute minuteValuePointer: UnsafeMutablePointer<Int>?, second secondValuePointer: UnsafeMutablePointer<Int>?, nanosecond nanosecondValuePointer: UnsafeMutablePointer<Int>?, from date: Date)
  @available(iOS 8.0, *)
  @available(swift, obsoleted: 3, renamed: "getHour(_:minute:second:nanosecond:from:)")
  func getHour(_ hourValuePointer: UnsafeMutablePointer<Int>?, minute minuteValuePointer: UnsafeMutablePointer<Int>?, second secondValuePointer: UnsafeMutablePointer<Int>?, nanosecond nanosecondValuePointer: UnsafeMutablePointer<Int>?, fromDate date: Date)
  @available(iOS 8.0, *)
  func component(_ unit: NSCalendarUnit, from date: Date) -> Int
  @available(iOS 8.0, *)
  @available(swift, obsoleted: 3, renamed: "component(_:from:)")
  func component(_ unit: NSCalendarUnit, fromDate date: Date) -> Int
  @available(iOS 8.0, *)
  func date(era eraValue: Int, year yearValue: Int, month monthValue: Int, day dayValue: Int, hour hourValue: Int, minute minuteValue: Int, second secondValue: Int, nanosecond nanosecondValue: Int) -> Date?
  @available(iOS 8.0, *)
  @available(swift, obsoleted: 3, renamed: "date(era:year:month:day:hour:minute:second:nanosecond:)")
  func dateWithEra(_ eraValue: Int, year yearValue: Int, month monthValue: Int, day dayValue: Int, hour hourValue: Int, minute minuteValue: Int, second secondValue: Int, nanosecond nanosecondValue: Int) -> Date?
  @available(iOS 8.0, *)
  func date(era eraValue: Int, yearForWeekOfYear yearValue: Int, weekOfYear weekValue: Int, weekday weekdayValue: Int, hour hourValue: Int, minute minuteValue: Int, second secondValue: Int, nanosecond nanosecondValue: Int) -> Date?
  @available(iOS 8.0, *)
  @available(swift, obsoleted: 3, renamed: "date(era:yearForWeekOfYear:weekOfYear:weekday:hour:minute:second:nanosecond:)")
  func dateWithEra(_ eraValue: Int, yearForWeekOfYear yearValue: Int, weekOfYear weekValue: Int, weekday weekdayValue: Int, hour hourValue: Int, minute minuteValue: Int, second secondValue: Int, nanosecond nanosecondValue: Int) -> Date?
  @available(iOS 8.0, *)
  func startOfDay(for date: Date) -> Date
  @available(iOS 8.0, *)
  @available(swift, obsoleted: 3, renamed: "startOfDay(for:)")
  func startOfDayForDate(_ date: Date) -> Date
  @available(iOS 8.0, *)
  func components(in timezone: TimeZone, from date: Date) -> DateComponents
  @available(iOS 8.0, *)
  @available(swift, obsoleted: 3, renamed: "components(in:from:)")
  func componentsInTimeZone(_ timezone: TimeZone, fromDate date: Date) -> DateComponents
  @available(iOS 8.0, *)
  func compare(_ date1: Date, to date2: Date, toUnitGranularity unit: NSCalendarUnit) -> ComparisonResult
  @available(iOS 8.0, *)
  @available(swift, obsoleted: 3, renamed: "compare(_:to:toUnitGranularity:)")
  func compareDate(_ date1: Date, toDate date2: Date, toUnitGranularity unit: NSCalendarUnit) -> ComparisonResult
  @available(iOS 8.0, *)
  func isDate(_ date1: Date, equalTo date2: Date, toUnitGranularity unit: NSCalendarUnit) -> Bool
  @available(iOS 8.0, *)
  @available(swift, obsoleted: 3, renamed: "isDate(_:equalTo:toUnitGranularity:)")
  func isDate(_ date1: Date, equalToDate date2: Date, toUnitGranularity unit: NSCalendarUnit) -> Bool
  @available(iOS 8.0, *)
  func isDate(_ date1: Date, inSameDayAs date2: Date) -> Bool
  @available(iOS 8.0, *)
  @available(swift, obsoleted: 3, renamed: "isDate(_:inSameDayAs:)")
  func isDate(_ date1: Date, inSameDayAsDate date2: Date) -> Bool
  @available(iOS 8.0, *)
  func isDateInToday(_ date: Date) -> Bool
  @available(iOS 8.0, *)
  func isDateInYesterday(_ date: Date) -> Bool
  @available(iOS 8.0, *)
  func isDateInTomorrow(_ date: Date) -> Bool
  @available(iOS 8.0, *)
  func isDateInWeekend(_ date: Date) -> Bool
  @available(iOS 8.0, *)
  func range(ofWeekendStart datep: AutoreleasingUnsafeMutablePointer<NSDate?>?, interval tip: UnsafeMutablePointer<TimeInterval>?, containing date: Date) -> Bool
  @available(iOS 8.0, *)
  @available(swift, obsoleted: 3, renamed: "range(ofWeekendStart:interval:containing:)")
  func rangeOfWeekendStartDate(_ datep: AutoreleasingUnsafeMutablePointer<NSDate?>?, interval tip: UnsafeMutablePointer<TimeInterval>?, containingDate date: Date) -> Bool
  @available(iOS 8.0, *)
  func nextWeekendStart(_ datep: AutoreleasingUnsafeMutablePointer<NSDate?>?, interval tip: UnsafeMutablePointer<TimeInterval>?, options: NSCalendarOptions = [], after date: Date) -> Bool
  @available(iOS 8.0, *)
  @available(swift, obsoleted: 3, renamed: "nextWeekendStart(_:interval:options:after:)")
  func nextWeekendStartDate(_ datep: AutoreleasingUnsafeMutablePointer<NSDate?>?, interval tip: UnsafeMutablePointer<TimeInterval>?, options: NSCalendarOptions = [], afterDate date: Date) -> Bool
  @available(iOS 8.0, *)
  func components(_ unitFlags: NSCalendarUnit, from startingDateComp: DateComponents, to resultDateComp: DateComponents, options: NSCalendarOptions = []) -> DateComponents
  @available(iOS 8.0, *)
  @available(swift, obsoleted: 3, renamed: "components(_:from:to:options:)")
  func components(_ unitFlags: NSCalendarUnit, fromDateComponents startingDateComp: DateComponents, toDateComponents resultDateComp: DateComponents, options: NSCalendarOptions = []) -> DateComponents
  @available(iOS 8.0, *)
  func date(byAddingUnit unit: NSCalendarUnit, value: Int, to date: Date, options: NSCalendarOptions = []) -> Date?
  @available(iOS 8.0, *)
  @available(swift, obsoleted: 3, renamed: "date(byAddingUnit:value:to:options:)")
  func dateByAddingUnit(_ unit: NSCalendarUnit, value: Int, toDate date: Date, options: NSCalendarOptions = []) -> Date?
  @available(iOS 8.0, *)
  func enumerateDates(startingAfter start: Date, matching comps: DateComponents, options opts: NSCalendarOptions = [], using block: (Date?, Bool, UnsafeMutablePointer<ObjCBool>) -> Void)
  @available(iOS 8.0, *)
  @available(swift, obsoleted: 3, renamed: "enumerateDates(startingAfter:matching:options:using:)")
  func enumerateDatesStartingAfterDate(_ start: Date, matchingComponents comps: DateComponents, options opts: NSCalendarOptions = [], usingBlock block: (Date?, Bool, UnsafeMutablePointer<ObjCBool>) -> Void)
  @available(iOS 8.0, *)
  func nextDate(after date: Date, matching comps: DateComponents, options: NSCalendarOptions = []) -> Date?
  @available(iOS 8.0, *)
  @available(swift, obsoleted: 3, renamed: "nextDate(after:matching:options:)")
  func nextDateAfterDate(_ date: Date, matchingComponents comps: DateComponents, options: NSCalendarOptions = []) -> Date?
  @available(iOS 8.0, *)
  func nextDate(after date: Date, matchingUnit unit: NSCalendarUnit, value: Int, options: NSCalendarOptions = []) -> Date?
  @available(iOS 8.0, *)
  @available(swift, obsoleted: 3, renamed: "nextDate(after:matchingUnit:value:options:)")
  func nextDateAfterDate(_ date: Date, matchingUnit unit: NSCalendarUnit, value: Int, options: NSCalendarOptions = []) -> Date?
  @available(iOS 8.0, *)
  func nextDate(after date: Date, matchingHour hourValue: Int, minute minuteValue: Int, second secondValue: Int, options: NSCalendarOptions = []) -> Date?
  @available(iOS 8.0, *)
  @available(swift, obsoleted: 3, renamed: "nextDate(after:matchingHour:minute:second:options:)")
  func nextDateAfterDate(_ date: Date, matchingHour hourValue: Int, minute minuteValue: Int, second secondValue: Int, options: NSCalendarOptions = []) -> Date?
  @available(iOS 8.0, *)
  func date(bySettingUnit unit: NSCalendarUnit, value v: Int, of date: Date, options opts: NSCalendarOptions = []) -> Date?
  @available(iOS 8.0, *)
  @available(swift, obsoleted: 3, renamed: "date(bySettingUnit:value:of:options:)")
  func dateBySettingUnit(_ unit: NSCalendarUnit, value v: Int, ofDate date: Date, options opts: NSCalendarOptions = []) -> Date?
  @available(iOS 8.0, *)
  func date(bySettingHour h: Int, minute m: Int, second s: Int, of date: Date, options opts: NSCalendarOptions = []) -> Date?
  @available(iOS 8.0, *)
  @available(swift, obsoleted: 3, renamed: "date(bySettingHour:minute:second:of:options:)")
  func dateBySettingHour(_ h: Int, minute m: Int, second s: Int, ofDate date: Date, options opts: NSCalendarOptions = []) -> Date?
  @available(iOS 8.0, *)
  func date(_ date: Date, matchesComponents components: DateComponents) -> Bool
  class var supportsSecureCoding: Bool { get }
  func copy(with zone: NSZone? = nil) -> Any
  func encode(with coder: NSCoder)
  init?(coder: NSCoder)
}

extension NSCalendar : _HasCustomAnyHashableRepresentation {
  @nonobjc func _toCustomAnyHashable() -> AnyHashable?
}
@available(iOS 8.0, *)
@available(swift, obsoleted: 3, renamed: "NSNotification.Name.NSCalendarDayChanged")
let NSCalendarDayChangedNotification: NSNotification.Name
extension NSNotification.Name {
  @available(iOS 8.0, *)
  static let NSCalendarDayChanged: NSNotification.Name
}
var NSDateComponentUndefined: Int { get }
@available(iOS, introduced: 2.0, deprecated: 8.0, renamed: "NSDateComponentUndefined")
var NSUndefinedDateComponent: Int { get }
class NSDateComponents : NSObject, NSCopying, NSSecureCoding {
  @available(iOS 4.0, *)
  var calendar: Calendar?
  @available(iOS 4.0, *)
  var timeZone: TimeZone?
  var era: Int
  var year: Int
  var month: Int
  var day: Int
  var hour: Int
  var minute: Int
  var second: Int
  @available(iOS 5.0, *)
  var nanosecond: Int
  var weekday: Int
  var weekdayOrdinal: Int
  @available(iOS 4.0, *)
  var quarter: Int
  @available(iOS 5.0, *)
  var weekOfMonth: Int
  @available(iOS 5.0, *)
  var weekOfYear: Int
  @available(iOS 5.0, *)
  var yearForWeekOfYear: Int
  @available(iOS 6.0, *)
  var isLeapMonth: Bool
  @available(iOS 6.0, *)
  @available(swift, obsoleted: 3, renamed: "isLeapMonth")
  var leapMonth: Bool
  @available(iOS 4.0, *)
  var date: Date? { get }
  @available(iOS, unavailable, introduced: 2.0, deprecated: 7.0, message: "Use -weekOfMonth or -weekOfYear, depending on which you mean")
  func week() -> Int
  @available(iOS, unavailable, introduced: 2.0, deprecated: 7.0, message: "Use -setWeekOfMonth: or -setWeekOfYear:, depending on which you mean")
  func setWeek(_ v: Int)
  @available(iOS 8.0, *)
  func setValue(_ value: Int, forComponent unit: NSCalendarUnit)
  @available(iOS 8.0, *)
  func value(forComponent unit: NSCalendarUnit) -> Int
  @available(iOS 8.0, *)
  @available(swift, obsoleted: 3, renamed: "value(forComponent:)")
  func valueForComponent(_ unit: NSCalendarUnit) -> Int
  @available(iOS 8.0, *)
  var isValidDate: Bool { get }
  @available(iOS 8.0, *)
  @available(swift, obsoleted: 3, renamed: "isValidDate")
  var validDate: Bool { get }
  @available(iOS 8.0, *)
  func isValidDate(in calendar: Calendar) -> Bool
  @available(iOS 8.0, *)
  @available(swift, obsoleted: 3, renamed: "isValidDate(in:)")
  func isValidDateInCalendar(_ calendar: Calendar) -> Bool
  init()
  class var supportsSecureCoding: Bool { get }
  func copy(with zone: NSZone? = nil) -> Any
  func encode(with coder: NSCoder)
  init?(coder: NSCoder)
}

extension NSDateComponents : _HasCustomAnyHashableRepresentation {
  @nonobjc func _toCustomAnyHashable() -> AnyHashable?
}
