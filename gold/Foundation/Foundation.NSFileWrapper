@_exported import CoreFoundation

@available(*, unavailable, message: "Not available in Swift")
typealias NSFileWrapperReadingOptions = Int
@available(iOS 4.0, *)
@available(swift, obsoleted: 3, renamed: "FileWrapper.ReadingOptions")
typealias NSFileWrapperReadingOptions = FileWrapper.ReadingOptions
extension FileWrapper {
  @available(iOS 4.0, *)
  struct ReadingOptions : OptionSet, @unchecked Sendable {
    init(rawValue: UInt)
    let rawValue: UInt
    typealias RawValue = UInt
    typealias Element = FileWrapper.ReadingOptions
    typealias ArrayLiteralElement = FileWrapper.ReadingOptions
    static var immediate: FileWrapper.ReadingOptions { get }
    @available(swift, obsoleted: 3, renamed: "immediate")
    static var Immediate: FileWrapper.ReadingOptions { get }
    static var withoutMapping: FileWrapper.ReadingOptions { get }
    @available(swift, obsoleted: 3, renamed: "withoutMapping")
    static var WithoutMapping: FileWrapper.ReadingOptions { get }
  }
  @available(iOS 4.0, *)
  struct WritingOptions : OptionSet, @unchecked Sendable {
    init(rawValue: UInt)
    let rawValue: UInt
    typealias RawValue = UInt
    typealias Element = FileWrapper.WritingOptions
    typealias ArrayLiteralElement = FileWrapper.WritingOptions
    static var atomic: FileWrapper.WritingOptions { get }
    @available(swift, obsoleted: 3, renamed: "atomic")
    static var Atomic: FileWrapper.WritingOptions { get }
    static var withNameUpdating: FileWrapper.WritingOptions { get }
    @available(swift, obsoleted: 3, renamed: "withNameUpdating")
    static var WithNameUpdating: FileWrapper.WritingOptions { get }
  }
}
@available(*, unavailable, message: "Not available in Swift")
typealias NSFileWrapperWritingOptions = Int
@available(iOS 4.0, *)
@available(swift, obsoleted: 3, renamed: "FileWrapper.WritingOptions")
typealias NSFileWrapperWritingOptions = FileWrapper.WritingOptions
@available(iOS 4.0, *)
class FileWrapper : NSObject, NSSecureCoding {
  @available(iOS 4.0, *)
  init(url: URL, options: FileWrapper.ReadingOptions = []) throws
  @available(iOS 4.0, *)
  @available(swift, obsoleted: 3, renamed: "init(url:options:)")
  init(URL url: URL, options: FileWrapper.ReadingOptions = []) throws
  init(directoryWithFileWrappers childrenByPreferredName: [String : FileWrapper])
  init(regularFileWithContents contents: Data)
  @available(iOS 4.0, *)
  init(symbolicLinkWithDestinationURL url: URL)
  init?(serializedRepresentation serializeRepresentation: Data)
  init?(coder inCoder: NSCoder)
  var isDirectory: Bool { get }
  @available(swift, obsoleted: 3, renamed: "isDirectory")
  var directory: Bool { get }
  var isRegularFile: Bool { get }
  @available(swift, obsoleted: 3, renamed: "isRegularFile")
  var regularFile: Bool { get }
  var isSymbolicLink: Bool { get }
  @available(swift, obsoleted: 3, renamed: "isSymbolicLink")
  var symbolicLink: Bool { get }
  var preferredFilename: String?
  var filename: String?
  var fileAttributes: [String : Any]
  @available(iOS 4.0, *)
  func matchesContents(of url: URL) -> Bool
  @available(iOS 4.0, *)
  @available(swift, obsoleted: 3, renamed: "matchesContents(of:)")
  func matchesContentsOfURL(_ url: URL) -> Bool
  @available(iOS 4.0, *)
  func read(from url: URL, options: FileWrapper.ReadingOptions = []) throws
  @available(iOS 4.0, *)
  @available(swift, obsoleted: 3, renamed: "read(from:options:)")
  func readFromURL(_ url: URL, options: FileWrapper.ReadingOptions = []) throws
  @available(iOS 4.0, *)
  func write(to url: URL, options: FileWrapper.WritingOptions = [], originalContentsURL: URL?) throws
  @available(iOS 4.0, *)
  @available(swift, obsoleted: 3, renamed: "write(to:options:originalContentsURL:)")
  func writeToURL(_ url: URL, options: FileWrapper.WritingOptions = [], originalContentsURL: URL?) throws
  var serializedRepresentation: Data? { get }
  func addFileWrapper(_ child: FileWrapper) -> String
  func addRegularFile(withContents data: Data, preferredFilename fileName: String) -> String
  @available(swift, obsoleted: 3, renamed: "addRegularFile(withContents:preferredFilename:)")
  func addRegularFileWithContents(_ data: Data, preferredFilename fileName: String) -> String
  func removeFileWrapper(_ child: FileWrapper)
  var fileWrappers: [String : FileWrapper]? { get }
  func keyForChildFileWrapper(_ child: FileWrapper) -> String?
  @available(swift, obsoleted: 3, renamed: "keyForChildFileWrapper(_:)")
  func keyForFileWrapper(_ child: FileWrapper) -> String?
  var regularFileContents: Data? { get }
  @available(iOS 4.0, *)
  var symbolicLinkDestinationURL: URL? { get }
  convenience init()
  @available(iOS 4.0, *)
  class var supportsSecureCoding: Bool { get }
  @available(iOS 4.0, *)
  func encode(with coder: NSCoder)
}
@available(iOS 4.0, *)
@available(swift, obsoleted: 3, renamed: "FileWrapper")
typealias NSFileWrapper = FileWrapper
