/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk/usr/include/net/if_var_status.h:449:8: error: definition of 'ifnet_interface_advisory' must be imported from module 'Darwin.net.if_var_status' before it is required
struct ifnet_interface_advisory {
       ^
<unknown>:0: note: in evaluation of exception specification for 'ifnet_interface_advisory::ifnet_interface_advisory' needed here
/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk/usr/include/net/if_var_status.h:449:8: note: definition here is not reachable
struct ifnet_interface_advisory {
       ^
import Darwin.AssertMacros
import Darwin.Availability
import Darwin.C
import Darwin.ConditionalMacros
import Darwin.MacTypes
import Darwin.Mach
import Darwin.POSIX
import Darwin.TargetConditionals
import Darwin.__wctype
import Darwin._locale
import Darwin._types
import Darwin._wctype
import Darwin.alloca
import Darwin.architecture
import Darwin.bank
import Darwin.block
import Darwin.bsm
import Darwin.cdefs
import Darwin.crt_externs
import Darwin.device
import Darwin.gethostuuid
import Darwin.getopt
import Darwin.libkern
import Darwin.machine
import Darwin.malloc
import Darwin.net
import Darwin.netinet
import Darwin.netinet6
import Darwin.os
import Darwin.paths
import Darwin.runetype
import Darwin.secure
import Darwin.sys
import Darwin.sysexits
import Darwin.uuid
import SwiftOverlayShims
import SwiftShims

@available(swift, deprecated: 3.0, message: "Please use 'Double.ulpOfOne' or '.ulpOfOne'.")
let DBL_EPSILON: Double

@available(swift, deprecated: 3.0, message: "Please use 'Double.significandBitCount + 1'.")
let DBL_MANT_DIG: Int

@available(swift, deprecated: 3.0, message: "Please use 'Double.greatestFiniteMagnitude' or '.greatestFiniteMagnitude'.")
let DBL_MAX: Double

@available(swift, deprecated: 3.0, message: "Please use 'Double.greatestFiniteMagnitude.exponent + 1'.")
let DBL_MAX_EXP: Int

@available(swift, deprecated: 3.0, message: "Please use 'Double.leastNormalMagnitude' or '.leastNormalMagnitude'.")
let DBL_MIN: Double

@available(swift, deprecated: 3.0, message: "Please use 'Double.leastNormalMagnitude.exponent + 1'.")
let DBL_MIN_EXP: Int

@available(swift, deprecated: 3.0, message: "Please use 'Double.leastNonzeroMagnitude' or '.leastNonzeroMagnitude'.")
let DBL_TRUE_MIN: Double

/// The `Boolean` type declared in MacTypes.h and used throughout Core
/// Foundation.
///
/// The C type is a typedef for `unsigned char`.
@frozen struct DarwinBoolean : ExpressibleByBooleanLiteral {
  @usableFromInline
  var _value: UInt8
  @_transparent init(_ value: Bool)
  /// The value of `self`, expressed as a `Bool`.
  @_transparent var boolValue: Bool { get }
  /// Create an instance initialized to `value`.
  @_transparent init(booleanLiteral value: Bool)
  typealias BooleanLiteralType = Bool
}

extension DarwinBoolean : CustomReflectable {
  /// Returns a mirror that reflects `self`.
  var customMirror: Mirror { get }
}

extension DarwinBoolean : CustomStringConvertible {
  /// A textual representation of `self`.
  var description: String { get }
}

extension DarwinBoolean : Equatable {
  @_transparent static func == (lhs: DarwinBoolean, rhs: DarwinBoolean) -> Bool
}

extension DarwinBoolean : Sendable {
}

@available(swift, deprecated: 3.0, message: "Please use 'Float.ulpOfOne' or '.ulpOfOne'.")
let FLT_EPSILON: Float

@available(swift, deprecated: 3.0, message: "Please use 'Float.significandBitCount + 1'.")
let FLT_MANT_DIG: Int

@available(swift, deprecated: 3.0, message: "Please use 'Float.greatestFiniteMagnitude' or '.greatestFiniteMagnitude'.")
let FLT_MAX: Float

@available(swift, deprecated: 3.0, message: "Please use 'Float.greatestFiniteMagnitude.exponent + 1'.")
let FLT_MAX_EXP: Int

@available(swift, deprecated: 3.0, message: "Please use 'Float.leastNormalMagnitude' or '.leastNormalMagnitude'.")
let FLT_MIN: Float

@available(swift, deprecated: 3.0, message: "Please use 'Float.leastNormalMagnitude.exponent + 1'.")
let FLT_MIN_EXP: Int

@available(swift, deprecated: 3.0, message: "Please use 'T.radix' to get the radix of a FloatingPoint type 'T'.")
let FLT_RADIX: Int

@available(swift, deprecated: 3.0, message: "Please use 'Float.leastNonzeroMagnitude' or '.leastNonzeroMagnitude'.")
let FLT_TRUE_MIN: Float

let MAP_FAILED: UnsafeMutableRawPointer!

@available(swift, deprecated: 3.0, message: "Please use 'Double.pi' or '.pi' to get the value of correct type and avoid casting.")
let M_PI: Double

@available(swift, deprecated: 3.0, message: "Please use 'Double.pi / 2' or '.pi / 2' to get the value of correct type and avoid casting.")
let M_PI_2: Double

@available(swift, deprecated: 3.0, message: "Please use 'Double.pi / 4' or '.pi / 4' to get the value of correct type and avoid casting.")
let M_PI_4: Double

@available(swift, deprecated: 3.0, message: "Please use '0.5.squareRoot()'.")
let M_SQRT1_2: Double

@available(swift, deprecated: 3.0, message: "Please use '2.squareRoot()'.")
let M_SQRT2: Double

/// Enumeration describing Mach error codes.
@objc enum MachErrorCode : Int32 {
  case success
  /// Specified address is not currently valid.
  case invalidAddress
  /// Specified memory is valid, but does not permit the required
  /// forms of access.
  case protectionFailure
  /// The address range specified is already in use, or no address
  /// range of the size specified could be found.  
  case noSpace
  /// The function requested was not applicable to this type of
  /// argument, or an argument is invalid.
  case invalidArgument
  /// The function could not be performed.  A catch-all.
  case failure
  /// A system resource could not be allocated to fulfill this
  /// request.  This failure may not be permanent.
  case resourceShortage
  /// The task in question does not hold receive rights for the port
  /// argument.
  case notReceiver
  /// Bogus access restriction.
  case noAccess
  /// During a page fault, the target address refers to a memory
  /// object that has been destroyed.  This failure is permanent.
  case memoryFailure
  /// During a page fault, the memory object indicated that the data
  /// could not be returned.  This failure may be temporary; future
  /// attempts to access this same data may succeed, as defined by the
  /// memory object.
  case memoryError
  /// The receive right is already a member of the portset.
  case alreadyInSet
  /// The receive right is not a member of a port set.
  case notInSet
  /// The name already denotes a right in the task.
  case nameExists
  /// The operation was aborted.  Ipc code will catch this and reflect
  /// it as a message error.
  case aborted
  /// The name doesn't denote a right in the task.
  case invalidName
  /// Target task isn't an active task.
  case invalidTask
  /// The name denotes a right, but not an appropriate right.
  case invalidRight
  /// A blatant range error.
  case invalidValue
  /// Operation would overflow limit on user-references.
  case userReferencesOverflow
  /// The supplied (port) capability is improper.
  case invalidCapability
  /// The task already has send or receive rights for the port under
  /// another name.
  case rightExists
  /// Target host isn't actually a host.
  case invalidHost
  /// An attempt was made to supply "precious" data for memory that is
  /// already present in a memory object.
  case memoryPresent
  /// A page was requested of a memory manager via
  /// memory_object_data_request for an object using a
  /// MEMORY_OBJECT_COPY_CALL strategy, with the VM_PROT_WANTS_COPY
  /// flag being used to specify that the page desired is for a copy
  /// of the object, and the memory manager has detected the page was
  /// pushed into a copy of the object while the kernel was walking
  /// the shadow chain from the copy to the object. This error code is
  /// delivered via memory_object_data_error and is handled by the
  /// kernel (it forces the kernel to restart the fault). It will not
  /// be seen by users.
  case memoryDataMoved
  /// A strategic copy was attempted of an object upon which a quicker
  /// copy is now possible.  The caller should retry the copy using
  /// vm_object_copy_quickly. This error code is seen only by the
  /// kernel.
  case memoryRestartCopy
  /// An argument applied to assert processor set privilege was not a
  /// processor set control port.
  case invalidProcessorSet
  /// The specified scheduling attributes exceed the thread's limits.
  case policyLimit
  /// The specified scheduling policy is not currently enabled for the
  /// processor set.
  case invalidPolicy
  /// The external memory manager failed to initialize the memory object.
  case invalidObject
  /// A thread is attempting to wait for an event for which there is
  /// already a waiting thread.
  case alreadyWaiting
  /// An attempt was made to destroy the default processor set.
  case defaultSet
  /// An attempt was made to fetch an exception port that is
  /// protected, or to abort a thread while processing a protected
  /// exception.
  case exceptionProtected
  /// A ledger was required but not supplied.
  case invalidLedger
  /// The port was not a memory cache control port.
  case invalidMemoryControl
  /// An argument supplied to assert security privilege was not a host
  /// security port.
  case invalidSecurity
  /// thread_depress_abort was called on a thread which was not
  /// currently depressed.
  case notDepressed
  /// Object has been terminated and is no longer available.
  case terminated
  /// Lock set has been destroyed and is no longer available.
  case lockSetDestroyed
  /// The thread holding the lock terminated before releasing the lock.
  case lockUnstable
  /// The lock is already owned by another thread.
  case lockOwned
  /// The lock is already owned by the calling thread.
  case lockOwnedSelf
  /// Semaphore has been destroyed and is no longer available.
  case semaphoreDestroyed
  /// Return from RPC indicating the target server was terminated
  /// before it successfully replied.
  case rpcServerTerminated
  /// Terminate an orphaned activation.
  case rpcTerminateOrphan
  /// Allow an orphaned activation to continue executing.
  case rpcContinueOrphan
  /// Empty thread activation (No thread linked to it).
  case notSupported
  /// Remote node down or inaccessible.
  case nodeDown
  /// A signalled thread was not actually waiting.
  case notWaiting
  /// Some thread-oriented operation (semaphore_wait) timed out.
  case operationTimedOut
  /// During a page fault, indicates that the page was rejected as a
  /// result of a signature check.
  case codesignError
  /// The requested property cannot be changed at this time.
  case policyStatic
  init?(rawValue: Int32)
  typealias RawValue = Int32
  var rawValue: Int32 { get }
}

extension MachErrorCode : Equatable {
}

extension MachErrorCode : Hashable {
}

extension MachErrorCode : RawRepresentable {
}

/// Enumeration describing POSIX error codes.
@objc enum POSIXErrorCode : Int32 {
  /// Operation not permitted.
  case EPERM
  /// No such file or directory.
  case ENOENT
  /// No such process.
  case ESRCH
  /// Interrupted system call.
  case EINTR
  /// Input/output error.
  case EIO
  /// Device not configured.
  case ENXIO
  /// Argument list too long.
  case E2BIG
  /// Exec format error.
  case ENOEXEC
  /// Bad file descriptor.
  case EBADF
  /// No child processes.
  case ECHILD
  /// Resource deadlock avoided.
  case EDEADLK
  /// 11 was EAGAIN.
  /// Cannot allocate memory.
  case ENOMEM
  /// Permission denied.
  case EACCES
  /// Bad address.
  case EFAULT
  /// Block device required.
  case ENOTBLK
  /// Device / Resource busy.
  case EBUSY
  /// File exists.
  case EEXIST
  /// Cross-device link.
  case EXDEV
  /// Operation not supported by device.
  case ENODEV
  /// Not a directory.
  case ENOTDIR
  /// Is a directory.
  case EISDIR
  /// Invalid argument.
  case EINVAL
  /// Too many open files in system.
  case ENFILE
  /// Too many open files.
  case EMFILE
  /// Inappropriate ioctl for device.
  case ENOTTY
  /// Text file busy.
  case ETXTBSY
  /// File too large.
  case EFBIG
  /// No space left on device.
  case ENOSPC
  /// Illegal seek.
  case ESPIPE
  /// Read-only file system.
  case EROFS
  /// Too many links.
  case EMLINK
  /// Broken pipe.
  case EPIPE
  /// math software.
  /// Numerical argument out of domain.
  case EDOM
  /// Result too large.
  case ERANGE
  /// non-blocking and interrupt i/o.
  /// Resource temporarily unavailable.
  case EAGAIN
  /// Operation would block.
  static var EWOULDBLOCK: POSIXErrorCode { get }
  /// Operation now in progress.
  case EINPROGRESS
  /// Operation already in progress.
  case EALREADY
  /// ipc/network software -- argument errors.
  /// Socket operation on non-socket.
  case ENOTSOCK
  /// Destination address required.
  case EDESTADDRREQ
  /// Message too long.
  case EMSGSIZE
  /// Protocol wrong type for socket.
  case EPROTOTYPE
  /// Protocol not available.
  case ENOPROTOOPT
  /// Protocol not supported.
  case EPROTONOSUPPORT
  /// Socket type not supported.
  case ESOCKTNOSUPPORT
  /// Operation not supported.
  case ENOTSUP
  /// Protocol family not supported.
  case EPFNOSUPPORT
  /// Address family not supported by protocol family.
  case EAFNOSUPPORT
  /// Address already in use.
  case EADDRINUSE
  /// Can't assign requested address.
  case EADDRNOTAVAIL
  /// ipc/network software -- operational errors
  /// Network is down.
  case ENETDOWN
  /// Network is unreachable.
  case ENETUNREACH
  /// Network dropped connection on reset.
  case ENETRESET
  /// Software caused connection abort.
  case ECONNABORTED
  /// Connection reset by peer.
  case ECONNRESET
  /// No buffer space available.
  case ENOBUFS
  /// Socket is already connected.
  case EISCONN
  /// Socket is not connected.
  case ENOTCONN
  /// Can't send after socket shutdown.
  case ESHUTDOWN
  /// Too many references: can't splice.
  case ETOOMANYREFS
  /// Operation timed out.
  case ETIMEDOUT
  /// Connection refused.
  case ECONNREFUSED
  /// Too many levels of symbolic links.
  case ELOOP
  /// File name too long.
  case ENAMETOOLONG
  /// Host is down.
  case EHOSTDOWN
  /// No route to host.
  case EHOSTUNREACH
  /// Directory not empty.
  case ENOTEMPTY
  /// quotas & mush.
  /// Too many processes.
  case EPROCLIM
  /// Too many users.
  case EUSERS
  /// Disc quota exceeded.
  case EDQUOT
  /// Network File System.
  /// Stale NFS file handle.
  case ESTALE
  /// Too many levels of remote in path.
  case EREMOTE
  /// RPC struct is bad.
  case EBADRPC
  /// RPC version wrong.
  case ERPCMISMATCH
  /// RPC prog. not avail.
  case EPROGUNAVAIL
  /// Program version wrong.
  case EPROGMISMATCH
  /// Bad procedure for program.
  case EPROCUNAVAIL
  /// No locks available.
  case ENOLCK
  /// Function not implemented.
  case ENOSYS
  /// Inappropriate file type or format.
  case EFTYPE
  /// Authentication error.
  case EAUTH
  /// Need authenticator.
  case ENEEDAUTH
  /// Intelligent device errors.
  /// Device power is off.
  case EPWROFF
  /// Device error, e.g. paper out.
  case EDEVERR
  /// Value too large to be stored in data type.
  case EOVERFLOW
  /// Bad executable.
  case EBADEXEC
  /// Bad CPU type in executable.
  case EBADARCH
  /// Shared library version mismatch.
  case ESHLIBVERS
  /// Malformed Macho file.
  case EBADMACHO
  /// Operation canceled.
  case ECANCELED
  /// Identifier removed.
  case EIDRM
  /// No message of desired type.
  case ENOMSG
  /// Illegal byte sequence.
  case EILSEQ
  /// Attribute not found.
  case ENOATTR
  /// Bad message.
  case EBADMSG
  /// Reserved.
  case EMULTIHOP
  /// No message available on STREAM.
  case ENODATA
  /// Reserved.
  case ENOLINK
  /// No STREAM resources.
  case ENOSR
  /// Not a STREAM.
  case ENOSTR
  /// Protocol error.
  case EPROTO
  /// STREAM ioctl timeout.
  case ETIME
  /// No such policy registered.
  case ENOPOLICY
  /// State not recoverable.
  case ENOTRECOVERABLE
  /// Previous owner died.
  case EOWNERDEAD
  /// Interface output queue is full.
  case EQFULL
  /// Must be equal largest errno.
  static var ELAST: POSIXErrorCode { get }
  init?(rawValue: Int32)
  typealias RawValue = Int32
  var rawValue: Int32 { get }
}

extension POSIXErrorCode : Equatable {
}

extension POSIXErrorCode : Hashable {
}

extension POSIXErrorCode : RawRepresentable {
}

/// The value returned by `sem_open()` in the case of failure.
var SEM_FAILED: Semaphore? { get }

var SIG_DFL: sig_t? { get }

var SIG_ERR: sig_t { get }

var SIG_HOLD: sig_t { get }

var SIG_IGN: sig_t { get }

var S_IEXEC: mode_t { get }

var S_IFBLK: mode_t { get }

var S_IFCHR: mode_t { get }

var S_IFDIR: mode_t { get }

var S_IFIFO: mode_t { get }

var S_IFLNK: mode_t { get }

var S_IFMT: mode_t { get }

var S_IFREG: mode_t { get }

var S_IFSOCK: mode_t { get }

var S_IFWHT: mode_t { get }

var S_IREAD: mode_t { get }

var S_IRGRP: mode_t { get }

var S_IROTH: mode_t { get }

var S_IRUSR: mode_t { get }

var S_IRWXG: mode_t { get }

var S_IRWXO: mode_t { get }

var S_IRWXU: mode_t { get }

var S_ISGID: mode_t { get }

var S_ISTXT: mode_t { get }

var S_ISUID: mode_t { get }

var S_ISVTX: mode_t { get }

var S_IWGRP: mode_t { get }

var S_IWOTH: mode_t { get }

var S_IWRITE: mode_t { get }

var S_IWUSR: mode_t { get }

var S_IXGRP: mode_t { get }

var S_IXOTH: mode_t { get }

var S_IXUSR: mode_t { get }

typealias Semaphore = UnsafeMutablePointer<sem_t>

/// Clear break bit.
var TIOCCBRK: UInt { get }

/// Clear data terminal ready.
var TIOCCDTR: UInt { get }

/// Become virtual console.
var TIOCCONS: UInt { get }

/// Enable/get timestamp of last DCd rise.
var TIOCDCDTIMESTAMP: UInt { get }

/// Wait till output drained.
var TIOCDRAIN: UInt { get }

/// Download microcode to DSI Softmodem.
var TIOCDSIMICROCODE: UInt { get }

/// Set exclusive use of tty.
var TIOCEXCL: UInt { get }

/// Pty: external processing.
var TIOCEXT: UInt { get }

/// Flush buffers.
var TIOCFLUSH: UInt { get }

/// Get ttywait timeout.
var TIOCGDRAINWAIT: UInt { get }

/// Get termios struct.
var TIOCGETA: UInt { get }

/// Get special characters.
var TIOCGETC: UInt { get }

/// Get line discipline.
var TIOCGETD: UInt { get }

/// Get parameters -- gtty.
var TIOCGETP: UInt { get }

/// Get local special chars.
var TIOCGLTC: UInt { get }

/// Get pgrp of tty.
var TIOCGPGRP: UInt { get }

/// Get window size.
var TIOCGWINSZ: UInt { get }

/// Hang up on last close.
var TIOCHPCL: UInt { get }

/// Internal input VSTOP.
var TIOCIXOFF: UInt { get }

/// Internal input VSTART.
var TIOCIXON: UInt { get }

/// Bic local mode bits.
var TIOCLBIC: UInt { get }

/// Bis local mode bits.
var TIOCLBIS: UInt { get }

/// Get local modes.
var TIOCLGET: UInt { get }

/// Set entire local mode word.
var TIOCLSET: UInt { get }

/// Bic modem bits.
var TIOCMBIC: UInt { get }

/// Bis modem bits.
var TIOCMBIS: UInt { get }

/// Modem: get wait on close.
var TIOCMGDTRWAIT: UInt { get }

/// Get all modem bits.
var TIOCMGET: UInt { get }

/// Get modem control state.
var TIOCMODG: UInt { get }

/// Set modem control state.
var TIOCMODS: UInt { get }

/// Modem: set wait on close.
var TIOCMSDTRWAIT: UInt { get }

/// Set all modem bits.
var TIOCMSET: UInt { get }

/// Void tty association.
var TIOCNOTTY: UInt { get }

/// Reset exclusive use of tty.
var TIOCNXCL: UInt { get }

/// Output queue size.
var TIOCOUTQ: UInt { get }

/// Pty: set/clear packet mode.
var TIOCPKT: UInt { get }

/// Ptsname(3).
var TIOCPTYGNAME: UInt { get }

/// Grantpt(3).
var TIOCPTYGRANT: UInt { get }

/// Unlockpt(3).
var TIOCPTYUNLK: UInt { get }

/// Remote input editing.
var TIOCREMOTE: UInt { get }

/// Set break bit.
var TIOCSBRK: UInt { get }

/// 4.2 compatibility.
var TIOCSCONS: UInt { get }

/// Become controlling tty.
var TIOCSCTTY: UInt { get }

/// Set ttywait timeout.
var TIOCSDRAINWAIT: UInt { get }

/// Set data terminal ready.
var TIOCSDTR: UInt { get }

/// Set termios struct.
var TIOCSETA: UInt { get }

/// Drn out, fls in, set.
var TIOCSETAF: UInt { get }

/// Drain output, set.
var TIOCSETAW: UInt { get }

/// Set special characters.
var TIOCSETC: UInt { get }

/// Set line discipline.
var TIOCSETD: UInt { get }

/// As above, but no flushtty.
var TIOCSETN: UInt { get }

/// Set parameters -- stty.
var TIOCSETP: UInt { get }

/// Pty: generate signal.
var TIOCSIG: UInt { get }

/// Set local special chars.
var TIOCSLTC: UInt { get }

/// Set pgrp of tty.
var TIOCSPGRP: UInt { get }

/// Start output, like `^Q`.
var TIOCSTART: UInt { get }

/// Simulate `^T` status message.
var TIOCSTAT: UInt { get }

/// Simulate terminal input.
var TIOCSTI: UInt { get }

/// Stop output, like `^S`.
var TIOCSTOP: UInt { get }

/// Set window size.
var TIOCSWINSZ: UInt { get }

/// Enable/get timestamp of last input event.
var TIOCTIMESTAMP: UInt { get }

/// Pty: set/clr usr cntl mode.
var TIOCUCNTL: UInt { get }

@_transparent func _convertBoolToDarwinBoolean(_ x: Bool) -> DarwinBoolean

@_transparent func _convertDarwinBooleanToBool(_ x: DarwinBoolean) -> Bool

@_transparent func acos(_ x: Float) -> Float

@_transparent func acosh(_ x: Float) -> Float

@_transparent func asin(_ x: Float) -> Float

@_transparent func asinh(_ x: Float) -> Float

@_transparent func atan(_ x: Float) -> Float

@_transparent func atan2(_ lhs: Float, _ rhs: Float) -> Float

@_transparent func atanh(_ x: Float) -> Float

@_transparent func cbrt(_ x: Float) -> Float

@_transparent func ceil<T>(_ x: T) -> T where T : FloatingPoint

@_transparent func copysign(_ lhs: Float, _ rhs: Float) -> Float

@_transparent func cos(_ x: Float) -> Float

@_transparent func cos(_ x: Double) -> Double

@_transparent func cosh(_ x: Float) -> Float

func dprintf(_ fd: Int, _ format: UnsafePointer<Int8>, _ args: CVarArg...) -> Int32

var environ: UnsafeMutablePointer<UnsafeMutablePointer<CChar>?> { get }

@_transparent func erf(_ x: Float) -> Float

@_transparent func erfc(_ x: Float) -> Float

var errno: Int32

@_transparent func exp(_ x: Float) -> Float

@_transparent func exp(_ x: Double) -> Double

@_transparent func exp2(_ x: Float) -> Float

@_transparent func exp2(_ x: Double) -> Double

@_transparent func expm1(_ x: Float) -> Float

@available(swift, deprecated: 4.2, renamed: "abs")
@_transparent func fabs<T>(_ x: T) -> T where T : FloatingPoint

func fcntl(_ fd: Int32, _ cmd: Int32) -> Int32

func fcntl(_ fd: Int32, _ cmd: Int32, _ value: Int32) -> Int32

func fcntl(_ fd: Int32, _ cmd: Int32, _ ptr: UnsafeMutableRawPointer) -> Int32

@_transparent func fdim(_ lhs: Float, _ rhs: Float) -> Float

@_transparent func floor<T>(_ x: T) -> T where T : FloatingPoint

@_transparent func fma<T>(_ x: T, _ y: T, _ z: T) -> T where T : FloatingPoint

@_transparent func fmax(_ lhs: Float, _ rhs: Float) -> Float

@_transparent func fmin(_ lhs: Float, _ rhs: Float) -> Float

@_transparent func fmod<T>(_ x: T, _ y: T) -> T where T : FloatingPoint

@available(*, unavailable, message: "Please use threads or posix_spawn*()")
func fork() -> Int32

@available(*, unavailable, message: "use the floatingPointClass property.")
func fpclassify<T>(_ value: T) -> Int where T : FloatingPoint

@_transparent func frexp<T>(_ x: T) -> (T, Int) where T : BinaryFloatingPoint

@_transparent func hypot(_ lhs: Float, _ rhs: Float) -> Float

@available(swift, deprecated: 4.2, message: "use the exponent property.")
func ilogb<T>(_ x: T) -> Int where T : BinaryFloatingPoint

func ioctl(_ fd: CInt, _ request: UInt, _ value: CInt) -> CInt

func ioctl(_ fd: CInt, _ request: UInt, _ ptr: UnsafeMutableRawPointer) -> CInt

func ioctl(_ fd: CInt, _ request: UInt) -> CInt

@available(*, unavailable, message: "use the isFinite property.")
func isfinite<T>(_ value: T) -> Bool where T : FloatingPoint

@available(*, unavailable, message: "use the isInfinite property.")
func isinf<T>(_ value: T) -> Bool where T : FloatingPoint

@available(*, unavailable, message: "use the isNaN property.")
func isnan<T>(_ value: T) -> Bool where T : FloatingPoint

@available(*, unavailable, message: "use the isNormal property.")
func isnormal<T>(_ value: T) -> Bool where T : FloatingPoint

@_transparent func jn(_ n: Int, _ x: Double) -> Double

@available(swift, deprecated: 4.2, renamed: "scalbn")
@_transparent func ldexp(_ x: Float, _ n: Int) -> Float

@available(swift, deprecated: 4.2, renamed: "scalbn")
@_transparent func ldexp(_ x: Double, _ n: Int) -> Double

@_transparent func lgamma(_ x: Float) -> (Float, Int)

@_transparent func lgamma(_ x: Double) -> (Double, Int)

@_transparent func log(_ x: Float) -> Float

@_transparent func log(_ x: Double) -> Double

@_transparent func log10(_ x: Float) -> Float

@_transparent func log10(_ x: Double) -> Double

@_transparent func log1p(_ x: Float) -> Float

@_transparent func log2(_ x: Float) -> Float

@_transparent func log2(_ x: Double) -> Double

@_transparent func logb(_ x: Float) -> Float

@_transparent func modf<T>(_ x: T) -> (T, T) where T : FloatingPoint

@available(swift, deprecated: 4.2, message: "use Float(nan: Float.RawSignificand).")
@_transparent func nan(_ tag: String) -> Float

@_transparent func nearbyint(_ x: Float) -> Float

@_transparent func nearbyint(_ x: Double) -> Double

@_transparent func nextafter(_ lhs: Float, _ rhs: Float) -> Float

var noErr: OSStatus { get }

func open(_ path: UnsafePointer<CChar>, _ oflag: Int32) -> Int32

func open(_ path: UnsafePointer<CChar>, _ oflag: Int32, _ mode: mode_t) -> Int32

func openat(_ fd: Int32, _ path: UnsafePointer<CChar>, _ oflag: Int32) -> Int32

func openat(_ fd: Int32, _ path: UnsafePointer<CChar>, _ oflag: Int32, _ mode: mode_t) -> Int32

@_transparent func pow(_ lhs: Float, _ rhs: Float) -> Float

@_transparent func remainder<T>(_ x: T, _ y: T) -> T where T : FloatingPoint

@_transparent func remquo(_ x: Float, _ y: Float) -> (Float, Int)

@_transparent func remquo(_ x: Double, _ y: Double) -> (Double, Int)

@_transparent func rint(_ x: Float) -> Float

@_transparent func rint(_ x: Double) -> Double

@_transparent func round<T>(_ x: T) -> T where T : FloatingPoint

@_transparent func scalbn<T>(_ x: T, _ n: Int) -> T where T : FloatingPoint

func sem_open(_ name: UnsafePointer<CChar>, _ oflag: Int32) -> Semaphore?

func sem_open(_ name: UnsafePointer<CChar>, _ oflag: Int32, _ mode: mode_t, _ value: CUnsignedInt) -> Semaphore?

@available(*, unavailable, message: "use the sign property.")
func signbit<T>(_ value: T) -> Int where T : FloatingPoint

@_transparent func sin(_ x: Float) -> Float

@_transparent func sin(_ x: Double) -> Double

@_transparent func sinh(_ x: Float) -> Float

func snprintf(ptr: UnsafeMutablePointer<Int8>, _ len: Int, _ format: UnsafePointer<Int8>, _ args: CVarArg...) -> Int32

@_transparent func sqrt<T>(_ x: T) -> T where T : FloatingPoint

var stderr: UnsafeMutablePointer<FILE>

var stdin: UnsafeMutablePointer<FILE>

var stdout: UnsafeMutablePointer<FILE>

@_transparent func tan(_ x: Float) -> Float

@_transparent func tanh(_ x: Float) -> Float

@_transparent func tgamma(_ x: Float) -> Float

@_transparent func trunc<T>(_ x: T) -> T where T : FloatingPoint

@available(*, unavailable, message: "Please use threads or posix_spawn*()")
func vfork() -> Int32

@_transparent func yn(_ n: Int, _ x: Double) -> Double

@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension timespec {
  @available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
  init(_ duration: Duration)
}

@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension Duration {
  @available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
  init(_ ts: timespec)
}

@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension timeval {
  @available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
  init(_ duration: Duration)
}

@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension Duration {
  @available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
  init(_ tv: timeval)
}

extension extern_proc {
  @_transparent var p_starttime: timeval
}

let noErr: OSStatus { get }

var errno: Int32

var stdin: UnsafeMutablePointer<FILE>

var stdout: UnsafeMutablePointer<FILE>

var stderr: UnsafeMutablePointer<FILE>

let S_IFMT: mode_t { get }

let S_IFIFO: mode_t { get }

let S_IFCHR: mode_t { get }

let S_IFDIR: mode_t { get }

let S_IFBLK: mode_t { get }

let S_IFREG: mode_t { get }

let S_IFLNK: mode_t { get }

let S_IFSOCK: mode_t { get }

let S_IFWHT: mode_t { get }

let S_IRWXU: mode_t { get }

let S_IRUSR: mode_t { get }

let S_IWUSR: mode_t { get }

let S_IXUSR: mode_t { get }

let S_IRWXG: mode_t { get }

let S_IRGRP: mode_t { get }

let S_IWGRP: mode_t { get }

let S_IXGRP: mode_t { get }

let S_IRWXO: mode_t { get }

let S_IROTH: mode_t { get }

let S_IWOTH: mode_t { get }

let S_IXOTH: mode_t { get }

let S_ISUID: mode_t { get }

let S_ISGID: mode_t { get }

let S_ISVTX: mode_t { get }

let S_ISTXT: mode_t { get }

let S_IREAD: mode_t { get }

let S_IWRITE: mode_t { get }

let S_IEXEC: mode_t { get }

let SIG_DFL: sig_t? { get }

let SIG_IGN: sig_t { get }

let SIG_ERR: sig_t { get }

let SIG_HOLD: sig_t { get }

/// The value returned by `sem_open()` in the case of failure.
let SEM_FAILED: Semaphore? { get }

let environ: UnsafeMutablePointer<UnsafeMutablePointer<CChar>?> { get }

/// Set exclusive use of tty.
let TIOCEXCL: UInt { get }

/// Reset exclusive use of tty.
let TIOCNXCL: UInt { get }

/// Flush buffers.
let TIOCFLUSH: UInt { get }

/// Get line discipline.
let TIOCGETD: UInt { get }

/// Set line discipline.
let TIOCSETD: UInt { get }

/// Set break bit.
let TIOCSBRK: UInt { get }

/// Clear break bit.
let TIOCCBRK: UInt { get }

/// Set data terminal ready.
let TIOCSDTR: UInt { get }

/// Clear data terminal ready.
let TIOCCDTR: UInt { get }

/// Get pgrp of tty.
let TIOCGPGRP: UInt { get }

/// Set pgrp of tty.
let TIOCSPGRP: UInt { get }

/// Output queue size.
let TIOCOUTQ: UInt { get }

/// Simulate terminal input.
let TIOCSTI: UInt { get }

/// Void tty association.
let TIOCNOTTY: UInt { get }

/// Pty: set/clear packet mode.
let TIOCPKT: UInt { get }

/// Stop output, like `^S`.
let TIOCSTOP: UInt { get }

/// Start output, like `^Q`.
let TIOCSTART: UInt { get }

/// Set all modem bits.
let TIOCMSET: UInt { get }

/// Bis modem bits.
let TIOCMBIS: UInt { get }

/// Bic modem bits.
let TIOCMBIC: UInt { get }

/// Get all modem bits.
let TIOCMGET: UInt { get }

/// Get window size.
let TIOCGWINSZ: UInt { get }

/// Set window size.
let TIOCSWINSZ: UInt { get }

/// Pty: set/clr usr cntl mode.
let TIOCUCNTL: UInt { get }

/// Simulate `^T` status message.
let TIOCSTAT: UInt { get }

/// Become virtual console.
let TIOCCONS: UInt { get }

/// Become controlling tty.
let TIOCSCTTY: UInt { get }

/// Pty: external processing.
let TIOCEXT: UInt { get }

/// Wait till output drained.
let TIOCDRAIN: UInt { get }

/// Modem: set wait on close.
let TIOCMSDTRWAIT: UInt { get }

/// Modem: get wait on close.
let TIOCMGDTRWAIT: UInt { get }

/// Enable/get timestamp of last input event.
let TIOCTIMESTAMP: UInt { get }

/// Set ttywait timeout.
let TIOCSDRAINWAIT: UInt { get }

/// Get ttywait timeout.
let TIOCGDRAINWAIT: UInt { get }

/// Hang up on last close.
let TIOCHPCL: UInt { get }

/// Get parameters -- gtty.
let TIOCGETP: UInt { get }

/// Set parameters -- stty.
let TIOCSETP: UInt { get }

/// As above, but no flushtty.
let TIOCSETN: UInt { get }

/// Set special characters.
let TIOCSETC: UInt { get }

/// Get special characters.
let TIOCGETC: UInt { get }

/// Bis local mode bits.
let TIOCLBIS: UInt { get }

/// Bic local mode bits.
let TIOCLBIC: UInt { get }

/// Set entire local mode word.
let TIOCLSET: UInt { get }

/// Get local modes.
let TIOCLGET: UInt { get }

/// Set local special chars.
let TIOCSLTC: UInt { get }

/// Get local special chars.
let TIOCGLTC: UInt { get }

/// Get termios struct.
let TIOCGETA: UInt { get }

/// Set termios struct.
let TIOCSETA: UInt { get }

/// Drain output, set.
let TIOCSETAW: UInt { get }

/// Drn out, fls in, set.
let TIOCSETAF: UInt { get }

/// Pty: generate signal.
let TIOCSIG: UInt { get }

/// Get modem control state.
let TIOCMODG: UInt { get }

/// Set modem control state.
let TIOCMODS: UInt { get }

/// Internal input VSTART.
let TIOCIXON: UInt { get }

/// Internal input VSTOP.
let TIOCIXOFF: UInt { get }

/// Remote input editing.
let TIOCREMOTE: UInt { get }

/// 4.2 compatibility.
let TIOCSCONS: UInt { get }

/// Enable/get timestamp of last DCd rise.
let TIOCDCDTIMESTAMP: UInt { get }

/// Download microcode to DSI Softmodem.
let TIOCDSIMICROCODE: UInt { get }

/// Grantpt(3).
let TIOCPTYGRANT: UInt { get }

/// Ptsname(3).
let TIOCPTYGNAME: UInt { get }

/// Unlockpt(3).
let TIOCPTYUNLK: UInt { get }

var MAP_FAILED: UnsafeMutableRawPointer!

@available(swift, deprecated: 3.0, message: "Please use 'Double.pi' or '.pi' to get the value of correct type and avoid casting.")
var M_PI: Double

@available(swift, deprecated: 3.0, message: "Please use 'Double.pi / 2' or '.pi / 2' to get the value of correct type and avoid casting.")
var M_PI_2: Double

@available(swift, deprecated: 3.0, message: "Please use 'Double.pi / 4' or '.pi / 4' to get the value of correct type and avoid casting.")
var M_PI_4: Double

@available(swift, deprecated: 3.0, message: "Please use '2.squareRoot()'.")
var M_SQRT2: Double

@available(swift, deprecated: 3.0, message: "Please use '0.5.squareRoot()'.")
var M_SQRT1_2: Double

@available(swift, deprecated: 3.0, message: "Please use 'T.radix' to get the radix of a FloatingPoint type 'T'.")
var FLT_RADIX: Int

@available(swift, deprecated: 3.0, message: "Please use 'Float.significandBitCount + 1'.")
var FLT_MANT_DIG: Int

@available(swift, deprecated: 3.0, message: "Please use 'Float.greatestFiniteMagnitude.exponent + 1'.")
var FLT_MAX_EXP: Int

@available(swift, deprecated: 3.0, message: "Please use 'Float.leastNormalMagnitude.exponent + 1'.")
var FLT_MIN_EXP: Int

@available(swift, deprecated: 3.0, message: "Please use 'Float.greatestFiniteMagnitude' or '.greatestFiniteMagnitude'.")
var FLT_MAX: Float

@available(swift, deprecated: 3.0, message: "Please use 'Float.ulpOfOne' or '.ulpOfOne'.")
var FLT_EPSILON: Float

@available(swift, deprecated: 3.0, message: "Please use 'Float.leastNormalMagnitude' or '.leastNormalMagnitude'.")
var FLT_MIN: Float

@available(swift, deprecated: 3.0, message: "Please use 'Float.leastNonzeroMagnitude' or '.leastNonzeroMagnitude'.")
var FLT_TRUE_MIN: Float

@available(swift, deprecated: 3.0, message: "Please use 'Double.significandBitCount + 1'.")
var DBL_MANT_DIG: Int

@available(swift, deprecated: 3.0, message: "Please use 'Double.greatestFiniteMagnitude.exponent + 1'.")
var DBL_MAX_EXP: Int

@available(swift, deprecated: 3.0, message: "Please use 'Double.leastNormalMagnitude.exponent + 1'.")
var DBL_MIN_EXP: Int

@available(swift, deprecated: 3.0, message: "Please use 'Double.greatestFiniteMagnitude' or '.greatestFiniteMagnitude'.")
var DBL_MAX: Double

@available(swift, deprecated: 3.0, message: "Please use 'Double.ulpOfOne' or '.ulpOfOne'.")
var DBL_EPSILON: Double

@available(swift, deprecated: 3.0, message: "Please use 'Double.leastNormalMagnitude' or '.leastNormalMagnitude'.")
var DBL_MIN: Double

@available(swift, deprecated: 3.0, message: "Please use 'Double.leastNonzeroMagnitude' or '.leastNonzeroMagnitude'.")
var DBL_TRUE_MIN: Double

