@_exported import CoreFoundation

@available(*, unavailable, message: "Not available in Swift")
typealias NSKeyValueObservingOptions = Int
struct NSKeyValueObservingOptions : OptionSet, @unchecked Sendable {
  init(rawValue: UInt)
  let rawValue: UInt
  typealias RawValue = UInt
  typealias Element = NSKeyValueObservingOptions
  typealias ArrayLiteralElement = NSKeyValueObservingOptions
  static var new: NSKeyValueObservingOptions { get }
  @available(swift, obsoleted: 3, renamed: "new")
  static var New: NSKeyValueObservingOptions { get }
  static var old: NSKeyValueObservingOptions { get }
  @available(swift, obsoleted: 3, renamed: "old")
  static var Old: NSKeyValueObservingOptions { get }
  @available(iOS 2.0, *)
  static var initial: NSKeyValueObservingOptions { get }
  @available(iOS 2.0, *)
  @available(swift, obsoleted: 3, renamed: "initial")
  static var Initial: NSKeyValueObservingOptions { get }
  @available(iOS 2.0, *)
  static var prior: NSKeyValueObservingOptions { get }
  @available(iOS 2.0, *)
  @available(swift, obsoleted: 3, renamed: "prior")
  static var Prior: NSKeyValueObservingOptions { get }
}
enum NSKeyValueChange : UInt, @unchecked Sendable {
  init?(rawValue: UInt)
  var rawValue: UInt { get }
  typealias RawValue = UInt
  case setting
  @available(swift, obsoleted: 3, renamed: "setting")
  static var Setting: NSKeyValueChange { get }
  case insertion
  @available(swift, obsoleted: 3, renamed: "insertion")
  static var Insertion: NSKeyValueChange { get }
  case removal
  @available(swift, obsoleted: 3, renamed: "removal")
  static var Removal: NSKeyValueChange { get }
  case replacement
  @available(swift, obsoleted: 3, renamed: "replacement")
  static var Replacement: NSKeyValueChange { get }
}
enum NSKeyValueSetMutationKind : UInt, @unchecked Sendable {
  init?(rawValue: UInt)
  var rawValue: UInt { get }
  typealias RawValue = UInt
  case union
  @available(swift, obsoleted: 3, renamed: "union")
  static var NSKeyValueUnionSetMutation: NSKeyValueSetMutationKind { get }
  case minus
  @available(swift, obsoleted: 3, renamed: "minus")
  static var NSKeyValueMinusSetMutation: NSKeyValueSetMutationKind { get }
  case intersect
  @available(swift, obsoleted: 3, renamed: "intersect")
  static var NSKeyValueIntersectSetMutation: NSKeyValueSetMutationKind { get }
  case set
  @available(swift, obsoleted: 3, renamed: "set")
  static var NSKeyValueSetSetMutation: NSKeyValueSetMutationKind { get }
}
struct NSKeyValueChangeKey : _ObjectiveCBridgeable, Hashable, Equatable, _SwiftNewtypeWrapper, RawRepresentable, @unchecked Sendable {
  init(rawValue: String)
  var _rawValue: NSString
  var rawValue: String { get }
  typealias RawValue = String
  typealias _ObjectiveCType = NSString
}
@available(swift, obsoleted: 3, renamed: "NSKeyValueChangeKey.kindKey")
let NSKeyValueChangeKindKey: NSKeyValueChangeKey
extension NSKeyValueChangeKey {
  static let kindKey: NSKeyValueChangeKey
  static let newKey: NSKeyValueChangeKey
  static let oldKey: NSKeyValueChangeKey
  static let indexesKey: NSKeyValueChangeKey
  @available(iOS 2.0, *)
  static let notificationIsPriorKey: NSKeyValueChangeKey
}
@available(swift, obsoleted: 3, renamed: "NSKeyValueChangeKey.newKey")
let NSKeyValueChangeNewKey: NSKeyValueChangeKey
@available(swift, obsoleted: 3, renamed: "NSKeyValueChangeKey.oldKey")
let NSKeyValueChangeOldKey: NSKeyValueChangeKey
@available(swift, obsoleted: 3, renamed: "NSKeyValueChangeKey.indexesKey")
let NSKeyValueChangeIndexesKey: NSKeyValueChangeKey
@available(iOS 2.0, *)
@available(swift, obsoleted: 3, renamed: "NSKeyValueChangeKey.notificationIsPriorKey")
let NSKeyValueChangeNotificationIsPriorKey: NSKeyValueChangeKey
extension NSObject {
  class func observeValue(forKeyPath keyPath: String?, of object: Any?, change: [NSKeyValueChangeKey : Any]?, context: UnsafeMutableRawPointer?)
  func observeValue(forKeyPath keyPath: String?, of object: Any?, change: [NSKeyValueChangeKey : Any]?, context: UnsafeMutableRawPointer?)
  @available(swift, obsoleted: 3, renamed: "observeValue(forKeyPath:of:change:context:)")
  class func observeValueForKeyPath(_ keyPath: String?, ofObject object: Any?, change: [NSKeyValueChangeKey : Any]?, context: UnsafeMutableRawPointer?)
  @available(swift, obsoleted: 3, renamed: "observeValue(forKeyPath:of:change:context:)")
  func observeValueForKeyPath(_ keyPath: String?, ofObject object: Any?, change: [NSKeyValueChangeKey : Any]?, context: UnsafeMutableRawPointer?)
}
extension NSObject {
  class func addObserver(_ observer: NSObject, forKeyPath keyPath: String, options: NSKeyValueObservingOptions = [], context: UnsafeMutableRawPointer?)
  func addObserver(_ observer: NSObject, forKeyPath keyPath: String, options: NSKeyValueObservingOptions = [], context: UnsafeMutableRawPointer?)
  @available(iOS 5.0, *)
  class func removeObserver(_ observer: NSObject, forKeyPath keyPath: String, context: UnsafeMutableRawPointer?)
  @available(iOS 5.0, *)
  func removeObserver(_ observer: NSObject, forKeyPath keyPath: String, context: UnsafeMutableRawPointer?)
  class func removeObserver(_ observer: NSObject, forKeyPath keyPath: String)
  func removeObserver(_ observer: NSObject, forKeyPath keyPath: String)
}
extension NSArray {
  func addObserver(_ observer: NSObject, toObjectsAt indexes: IndexSet, forKeyPath keyPath: String, options: NSKeyValueObservingOptions = [], context: UnsafeMutableRawPointer?)
  @available(swift, obsoleted: 3, renamed: "addObserver(_:toObjectsAt:forKeyPath:options:context:)")
  func addObserver(_ observer: NSObject, toObjectsAtIndexes indexes: IndexSet, forKeyPath keyPath: String, options: NSKeyValueObservingOptions = [], context: UnsafeMutableRawPointer?)
  @available(iOS 5.0, *)
  func removeObserver(_ observer: NSObject, fromObjectsAt indexes: IndexSet, forKeyPath keyPath: String, context: UnsafeMutableRawPointer?)
  @available(iOS 5.0, *)
  @available(swift, obsoleted: 3, renamed: "removeObserver(_:fromObjectsAt:forKeyPath:context:)")
  func removeObserver(_ observer: NSObject, fromObjectsAtIndexes indexes: IndexSet, forKeyPath keyPath: String, context: UnsafeMutableRawPointer?)
  func removeObserver(_ observer: NSObject, fromObjectsAt indexes: IndexSet, forKeyPath keyPath: String)
  @available(swift, obsoleted: 3, renamed: "removeObserver(_:fromObjectsAt:forKeyPath:)")
  func removeObserver(_ observer: NSObject, fromObjectsAtIndexes indexes: IndexSet, forKeyPath keyPath: String)
  func addObserver(_ observer: NSObject, forKeyPath keyPath: String, options: NSKeyValueObservingOptions = [], context: UnsafeMutableRawPointer?)
  @available(iOS 5.0, *)
  func removeObserver(_ observer: NSObject, forKeyPath keyPath: String, context: UnsafeMutableRawPointer?)
  func removeObserver(_ observer: NSObject, forKeyPath keyPath: String)
}
extension NSOrderedSet {
  func addObserver(_ observer: NSObject, forKeyPath keyPath: String, options: NSKeyValueObservingOptions = [], context: UnsafeMutableRawPointer?)
  @available(iOS 5.0, *)
  func removeObserver(_ observer: NSObject, forKeyPath keyPath: String, context: UnsafeMutableRawPointer?)
  func removeObserver(_ observer: NSObject, forKeyPath keyPath: String)
}
extension NSSet {
  func addObserver(_ observer: NSObject, forKeyPath keyPath: String, options: NSKeyValueObservingOptions = [], context: UnsafeMutableRawPointer?)
  @available(iOS 5.0, *)
  func removeObserver(_ observer: NSObject, forKeyPath keyPath: String, context: UnsafeMutableRawPointer?)
  func removeObserver(_ observer: NSObject, forKeyPath keyPath: String)
}
extension NSObject {
  class func willChangeValue(forKey key: String)
  func willChangeValue(forKey key: String)
  @available(swift, obsoleted: 3, renamed: "willChangeValue(forKey:)")
  class func willChangeValueForKey(_ key: String)
  @available(swift, obsoleted: 3, renamed: "willChangeValue(forKey:)")
  func willChangeValueForKey(_ key: String)
  class func didChangeValue(forKey key: String)
  func didChangeValue(forKey key: String)
  @available(swift, obsoleted: 3, renamed: "didChangeValue(forKey:)")
  class func didChangeValueForKey(_ key: String)
  @available(swift, obsoleted: 3, renamed: "didChangeValue(forKey:)")
  func didChangeValueForKey(_ key: String)
  class func willChange(_ changeKind: NSKeyValueChange, valuesAt indexes: IndexSet, forKey key: String)
  func willChange(_ changeKind: NSKeyValueChange, valuesAt indexes: IndexSet, forKey key: String)
  @available(swift, obsoleted: 3, renamed: "willChange(_:valuesAt:forKey:)")
  class func willChange(_ changeKind: NSKeyValueChange, valuesAtIndexes indexes: IndexSet, forKey key: String)
  @available(swift, obsoleted: 3, renamed: "willChange(_:valuesAt:forKey:)")
  func willChange(_ changeKind: NSKeyValueChange, valuesAtIndexes indexes: IndexSet, forKey key: String)
  class func didChange(_ changeKind: NSKeyValueChange, valuesAt indexes: IndexSet, forKey key: String)
  func didChange(_ changeKind: NSKeyValueChange, valuesAt indexes: IndexSet, forKey key: String)
  @available(swift, obsoleted: 3, renamed: "didChange(_:valuesAt:forKey:)")
  class func didChange(_ changeKind: NSKeyValueChange, valuesAtIndexes indexes: IndexSet, forKey key: String)
  @available(swift, obsoleted: 3, renamed: "didChange(_:valuesAt:forKey:)")
  func didChange(_ changeKind: NSKeyValueChange, valuesAtIndexes indexes: IndexSet, forKey key: String)
  class func willChangeValue(forKey key: String, withSetMutation mutationKind: NSKeyValueSetMutationKind, using objects: Set<AnyHashable>)
  func willChangeValue(forKey key: String, withSetMutation mutationKind: NSKeyValueSetMutationKind, using objects: Set<AnyHashable>)
  @available(swift, obsoleted: 3, renamed: "willChangeValue(forKey:withSetMutation:using:)")
  class func willChangeValueForKey(_ key: String, withSetMutation mutationKind: NSKeyValueSetMutationKind, usingObjects objects: Set<AnyHashable>)
  @available(swift, obsoleted: 3, renamed: "willChangeValue(forKey:withSetMutation:using:)")
  func willChangeValueForKey(_ key: String, withSetMutation mutationKind: NSKeyValueSetMutationKind, usingObjects objects: Set<AnyHashable>)
  class func didChangeValue(forKey key: String, withSetMutation mutationKind: NSKeyValueSetMutationKind, using objects: Set<AnyHashable>)
  func didChangeValue(forKey key: String, withSetMutation mutationKind: NSKeyValueSetMutationKind, using objects: Set<AnyHashable>)
  @available(swift, obsoleted: 3, renamed: "didChangeValue(forKey:withSetMutation:using:)")
  class func didChangeValueForKey(_ key: String, withSetMutation mutationKind: NSKeyValueSetMutationKind, usingObjects objects: Set<AnyHashable>)
  @available(swift, obsoleted: 3, renamed: "didChangeValue(forKey:withSetMutation:using:)")
  func didChangeValueForKey(_ key: String, withSetMutation mutationKind: NSKeyValueSetMutationKind, usingObjects objects: Set<AnyHashable>)
}
extension NSObject {
  @available(iOS 2.0, *)
  class func keyPathsForValuesAffectingValue(forKey key: String) -> Set<String>
  @available(iOS 2.0, *)
  @available(swift, obsoleted: 3, renamed: "keyPathsForValuesAffectingValue(forKey:)")
  class func keyPathsForValuesAffectingValueForKey(_ key: String) -> Set<String>
  class func automaticallyNotifiesObservers(forKey key: String) -> Bool
  @available(swift, obsoleted: 3, renamed: "automaticallyNotifiesObservers(forKey:)")
  class func automaticallyNotifiesObserversForKey(_ key: String) -> Bool
  var observationInfo: UnsafeMutableRawPointer?
  class func observationInfo() -> UnsafeMutableRawPointer?
  class func setObservationInfo(_ observationInfo: UnsafeMutableRawPointer?)
}
