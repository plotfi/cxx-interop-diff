@_exported import CoreFoundation

typealias unichar = UInt16
@available(*, unavailable, message: "Not available in Swift")
typealias NSStringCompareOptions = Int
@available(swift, obsoleted: 3, renamed: "NSString.CompareOptions")
typealias NSStringCompareOptions = NSString.CompareOptions
extension NSString {
  struct CompareOptions : OptionSet, @unchecked Sendable {
    init(rawValue: UInt)
    let rawValue: UInt
    typealias RawValue = UInt
    typealias Element = NSString.CompareOptions
    typealias ArrayLiteralElement = NSString.CompareOptions
    static var caseInsensitive: NSString.CompareOptions { get }
    @available(swift, obsoleted: 3, renamed: "caseInsensitive")
    static var NSCaseInsensitiveSearch: NSString.CompareOptions { get }
    static var literal: NSString.CompareOptions { get }
    @available(swift, obsoleted: 3, renamed: "literal")
    static var NSLiteralSearch: NSString.CompareOptions { get }
    static var backwards: NSString.CompareOptions { get }
    @available(swift, obsoleted: 3, renamed: "backwards")
    static var NSBackwardsSearch: NSString.CompareOptions { get }
    static var anchored: NSString.CompareOptions { get }
    @available(swift, obsoleted: 3, renamed: "anchored")
    static var NSAnchoredSearch: NSString.CompareOptions { get }
    static var numeric: NSString.CompareOptions { get }
    @available(swift, obsoleted: 3, renamed: "numeric")
    static var NSNumericSearch: NSString.CompareOptions { get }
    @available(iOS 2.0, *)
    static var diacriticInsensitive: NSString.CompareOptions { get }
    @available(iOS 2.0, *)
    @available(swift, obsoleted: 3, renamed: "diacriticInsensitive")
    static var NSDiacriticInsensitiveSearch: NSString.CompareOptions { get }
    @available(iOS 2.0, *)
    static var widthInsensitive: NSString.CompareOptions { get }
    @available(iOS 2.0, *)
    @available(swift, obsoleted: 3, renamed: "widthInsensitive")
    static var NSWidthInsensitiveSearch: NSString.CompareOptions { get }
    @available(iOS 2.0, *)
    static var forcedOrdering: NSString.CompareOptions { get }
    @available(iOS 2.0, *)
    @available(swift, obsoleted: 3, renamed: "forcedOrdering")
    static var NSForcedOrderingSearch: NSString.CompareOptions { get }
    @available(iOS 3.2, *)
    static var regularExpression: NSString.CompareOptions { get }
    @available(iOS 3.2, *)
    @available(swift, obsoleted: 3, renamed: "regularExpression")
    static var NSRegularExpressionSearch: NSString.CompareOptions { get }
  }
  struct EncodingConversionOptions : OptionSet, @unchecked Sendable {
    init(rawValue: UInt)
    let rawValue: UInt
    typealias RawValue = UInt
    typealias Element = NSString.EncodingConversionOptions
    typealias ArrayLiteralElement = NSString.EncodingConversionOptions
    static var allowLossy: NSString.EncodingConversionOptions { get }
    @available(swift, obsoleted: 3, renamed: "allowLossy")
    static var AllowLossy: NSString.EncodingConversionOptions { get }
    static var externalRepresentation: NSString.EncodingConversionOptions { get }
    @available(swift, obsoleted: 3, renamed: "externalRepresentation")
    static var ExternalRepresentation: NSString.EncodingConversionOptions { get }
  }
  struct EnumerationOptions : OptionSet, @unchecked Sendable {
    init(rawValue: UInt)
    let rawValue: UInt
    typealias RawValue = UInt
    typealias Element = NSString.EnumerationOptions
    typealias ArrayLiteralElement = NSString.EnumerationOptions
    static var byLines: NSString.EnumerationOptions { get }
    @available(*, unavailable, message: "use [] to construct an empty option set")
    @available(swift, obsoleted: 3, renamed: "byLines")
    static var ByLines: NSString.EnumerationOptions { get }
    static var byParagraphs: NSString.EnumerationOptions { get }
    @available(swift, obsoleted: 3, renamed: "byParagraphs")
    static var ByParagraphs: NSString.EnumerationOptions { get }
    static var byComposedCharacterSequences: NSString.EnumerationOptions { get }
    @available(swift, obsoleted: 3, renamed: "byComposedCharacterSequences")
    static var ByComposedCharacterSequences: NSString.EnumerationOptions { get }
    static var byWords: NSString.EnumerationOptions { get }
    @available(swift, obsoleted: 3, renamed: "byWords")
    static var ByWords: NSString.EnumerationOptions { get }
    static var bySentences: NSString.EnumerationOptions { get }
    @available(swift, obsoleted: 3, renamed: "bySentences")
    static var BySentences: NSString.EnumerationOptions { get }
    @available(iOS 14.0, *)
    static var byCaretPositions: NSString.EnumerationOptions { get }
    @available(iOS 14.0, *)
    @available(swift, obsoleted: 3, renamed: "byCaretPositions")
    static var ByCaretPositions: NSString.EnumerationOptions { get }
    @available(iOS 14.0, *)
    static var byDeletionClusters: NSString.EnumerationOptions { get }
    @available(iOS 14.0, *)
    @available(swift, obsoleted: 3, renamed: "byDeletionClusters")
    static var ByDeletionClusters: NSString.EnumerationOptions { get }
    static var reverse: NSString.EnumerationOptions { get }
    @available(swift, obsoleted: 3, renamed: "reverse")
    static var Reverse: NSString.EnumerationOptions { get }
    static var substringNotRequired: NSString.EnumerationOptions { get }
    @available(swift, obsoleted: 3, renamed: "substringNotRequired")
    static var SubstringNotRequired: NSString.EnumerationOptions { get }
    static var localized: NSString.EnumerationOptions { get }
    @available(swift, obsoleted: 3, renamed: "localized")
    static var Localized: NSString.EnumerationOptions { get }
  }
}
var NSASCIIStringEncoding: UInt { get }
var NSNEXTSTEPStringEncoding: UInt { get }
var NSJapaneseEUCStringEncoding: UInt { get }
var NSUTF8StringEncoding: UInt { get }
var NSISOLatin1StringEncoding: UInt { get }
var NSSymbolStringEncoding: UInt { get }
var NSNonLossyASCIIStringEncoding: UInt { get }
var NSShiftJISStringEncoding: UInt { get }
var NSISOLatin2StringEncoding: UInt { get }
var NSUnicodeStringEncoding: UInt { get }
var NSWindowsCP1251StringEncoding: UInt { get }
var NSWindowsCP1252StringEncoding: UInt { get }
var NSWindowsCP1253StringEncoding: UInt { get }
var NSWindowsCP1254StringEncoding: UInt { get }
var NSWindowsCP1250StringEncoding: UInt { get }
var NSISO2022JPStringEncoding: UInt { get }
var NSMacOSRomanStringEncoding: UInt { get }
var NSUTF16StringEncoding: UInt { get }
var NSUTF16BigEndianStringEncoding: UInt { get }
var NSUTF16LittleEndianStringEncoding: UInt { get }
var NSUTF32StringEncoding: UInt { get }
var NSUTF32BigEndianStringEncoding: UInt { get }
var NSUTF32LittleEndianStringEncoding: UInt { get }
@available(*, unavailable, message: "Not available in Swift")
typealias NSStringEncodingConversionOptions = Int
@available(swift, obsoleted: 3, renamed: "NSString.EncodingConversionOptions")
typealias NSStringEncodingConversionOptions = NSString.EncodingConversionOptions
class NSString : NSObject, NSCopying, NSMutableCopying, NSSecureCoding {
  var length: Int { get }
  func character(at index: Int) -> unichar
  @available(swift, obsoleted: 3, renamed: "character(at:)")
  func characterAtIndex(_ index: Int) -> unichar
  init()
  init?(coder: NSCoder)
  class var supportsSecureCoding: Bool { get }
  func copy(with zone: NSZone? = nil) -> Any
  func mutableCopy(with zone: NSZone? = nil) -> Any
  func encode(with coder: NSCoder)
}

extension NSString : ExpressibleByStringLiteral {
  /// Create an instance initialized to `value`.
  required convenience init(stringLiteral value: StaticString)
  typealias ExtendedGraphemeClusterLiteralType = StaticString
  typealias StringLiteralType = StaticString
  typealias UnicodeScalarLiteralType = StaticString
}

extension NSString : _HasCustomAnyHashableRepresentation {
  @nonobjc func _toCustomAnyHashable() -> AnyHashable?
}

extension NSString {
  convenience init(format: __shared NSString, _ args: CVarArg...)
  convenience init(format: __shared NSString, locale: Locale?, _ args: CVarArg...)
  class func localizedStringWithFormat(_ format: NSString, _ args: CVarArg...) -> Self
  func appendingFormat(_ format: NSString, _ args: CVarArg...) -> NSString
}

extension NSString {
  /// Returns an `NSString` object initialized by copying the characters
  /// from another given string.
  ///
  /// - Returns: An `NSString` object initialized by copying the
  ///   characters from `aString`. The returned object may be different
  ///   from the original receiver.
  @nonobjc convenience init(string aString: __shared NSString)
}

extension NSString : _CustomPlaygroundQuickLookable {
  @available(*, deprecated, message: "NSString.customPlaygroundQuickLook will be removed in a future Swift version")
  var customPlaygroundQuickLook: PlaygroundQuickLook { get }
}
extension NSString {
  func substring(from: Int) -> String
  @available(swift, obsoleted: 3, renamed: "substring(from:)")
  func substringFromIndex(_ from: Int) -> String
  func substring(to: Int) -> String
  @available(swift, obsoleted: 3, renamed: "substring(to:)")
  func substringToIndex(_ to: Int) -> String
  func substring(with range: NSRange) -> String
  @available(swift, obsoleted: 3, renamed: "substring(with:)")
  func substringWithRange(_ range: NSRange) -> String
  func getCharacters(_ buffer: UnsafeMutablePointer<unichar>, range: NSRange)
  func compare(_ string: String) -> ComparisonResult
  func compare(_ string: String, options mask: NSString.CompareOptions = []) -> ComparisonResult
  func compare(_ string: String, options mask: NSString.CompareOptions = [], range rangeOfReceiverToCompare: NSRange) -> ComparisonResult
  func compare(_ string: String, options mask: NSString.CompareOptions = [], range rangeOfReceiverToCompare: NSRange, locale: Any?) -> ComparisonResult
  func caseInsensitiveCompare(_ string: String) -> ComparisonResult
  func localizedCompare(_ string: String) -> ComparisonResult
  func localizedCaseInsensitiveCompare(_ string: String) -> ComparisonResult
  @available(iOS 4.0, *)
  func localizedStandardCompare(_ string: String) -> ComparisonResult
  func isEqual(to aString: String) -> Bool
  @available(swift, obsoleted: 3, renamed: "isEqual(to:)")
  func isEqualToString(_ aString: String) -> Bool
  func hasPrefix(_ str: String) -> Bool
  func hasSuffix(_ str: String) -> Bool
  func commonPrefix(with str: String, options mask: NSString.CompareOptions = []) -> String
  @available(swift, obsoleted: 3, renamed: "commonPrefix(with:options:)")
  func commonPrefixWithString(_ str: String, options mask: NSString.CompareOptions = []) -> String
  @available(iOS 8.0, *)
  func contains(_ str: String) -> Bool
  @available(iOS 8.0, *)
  @available(swift, obsoleted: 3, renamed: "contains(_:)")
  func containsString(_ str: String) -> Bool
  @available(iOS 8.0, *)
  func localizedCaseInsensitiveContains(_ str: String) -> Bool
  @available(iOS 8.0, *)
  @available(swift, obsoleted: 3, renamed: "localizedCaseInsensitiveContains(_:)")
  func localizedCaseInsensitiveContainsString(_ str: String) -> Bool
  @available(iOS 9.0, *)
  func localizedStandardContains(_ str: String) -> Bool
  @available(iOS 9.0, *)
  @available(swift, obsoleted: 3, renamed: "localizedStandardContains(_:)")
  func localizedStandardContainsString(_ str: String) -> Bool
  @available(iOS 9.0, *)
  func localizedStandardRange(of str: String) -> NSRange
  @available(iOS 9.0, *)
  @available(swift, obsoleted: 3, renamed: "localizedStandardRange(of:)")
  func localizedStandardRangeOfString(_ str: String) -> NSRange
  func range(of searchString: String) -> NSRange
  @available(swift, obsoleted: 3, renamed: "range(of:)")
  func rangeOfString(_ searchString: String) -> NSRange
  func range(of searchString: String, options mask: NSString.CompareOptions = []) -> NSRange
  @available(swift, obsoleted: 3, renamed: "range(of:options:)")
  func rangeOfString(_ searchString: String, options mask: NSString.CompareOptions = []) -> NSRange
  func range(of searchString: String, options mask: NSString.CompareOptions = [], range rangeOfReceiverToSearch: NSRange) -> NSRange
  @available(swift, obsoleted: 3, renamed: "range(of:options:range:)")
  func rangeOfString(_ searchString: String, options mask: NSString.CompareOptions = [], range rangeOfReceiverToSearch: NSRange) -> NSRange
  @available(iOS 2.0, *)
  func range(of searchString: String, options mask: NSString.CompareOptions = [], range rangeOfReceiverToSearch: NSRange, locale: Locale?) -> NSRange
  @available(iOS 2.0, *)
  @available(swift, obsoleted: 3, renamed: "range(of:options:range:locale:)")
  func rangeOfString(_ searchString: String, options mask: NSString.CompareOptions = [], range rangeOfReceiverToSearch: NSRange, locale: Locale?) -> NSRange
  func rangeOfCharacter(from searchSet: CharacterSet) -> NSRange
  @available(swift, obsoleted: 3, renamed: "rangeOfCharacter(from:)")
  func rangeOfCharacterFromSet(_ searchSet: CharacterSet) -> NSRange
  func rangeOfCharacter(from searchSet: CharacterSet, options mask: NSString.CompareOptions = []) -> NSRange
  @available(swift, obsoleted: 3, renamed: "rangeOfCharacter(from:options:)")
  func rangeOfCharacterFromSet(_ searchSet: CharacterSet, options mask: NSString.CompareOptions = []) -> NSRange
  func rangeOfCharacter(from searchSet: CharacterSet, options mask: NSString.CompareOptions = [], range rangeOfReceiverToSearch: NSRange) -> NSRange
  @available(swift, obsoleted: 3, renamed: "rangeOfCharacter(from:options:range:)")
  func rangeOfCharacterFromSet(_ searchSet: CharacterSet, options mask: NSString.CompareOptions = [], range rangeOfReceiverToSearch: NSRange) -> NSRange
  func rangeOfComposedCharacterSequence(at index: Int) -> NSRange
  @available(swift, obsoleted: 3, renamed: "rangeOfComposedCharacterSequence(at:)")
  func rangeOfComposedCharacterSequenceAtIndex(_ index: Int) -> NSRange
  @available(iOS 2.0, *)
  func rangeOfComposedCharacterSequences(for range: NSRange) -> NSRange
  @available(iOS 2.0, *)
  @available(swift, obsoleted: 3, renamed: "rangeOfComposedCharacterSequences(for:)")
  func rangeOfComposedCharacterSequencesForRange(_ range: NSRange) -> NSRange
  func appending(_ aString: String) -> String
  @available(swift, obsoleted: 3, renamed: "appending(_:)")
  func stringByAppendingString(_ aString: String) -> String
  var doubleValue: Double { get }
  var floatValue: Float { get }
  var intValue: Int32 { get }
  @available(iOS 2.0, *)
  var integerValue: Int { get }
  @available(iOS 2.0, *)
  var longLongValue: Int64 { get }
  @available(iOS 2.0, *)
  var boolValue: Bool { get }
  var uppercased: String { get }
  @available(swift, obsoleted: 3, renamed: "uppercased")
  var uppercaseString: String { get }
  var lowercased: String { get }
  @available(swift, obsoleted: 3, renamed: "lowercased")
  var lowercaseString: String { get }
  var capitalized: String { get }
  @available(swift, obsoleted: 3, renamed: "capitalized")
  var capitalizedString: String { get }
  @available(iOS 9.0, *)
  var localizedUppercase: String { get }
  @available(iOS 9.0, *)
  @available(swift, obsoleted: 3, renamed: "localizedUppercase")
  var localizedUppercaseString: String { get }
  @available(iOS 9.0, *)
  var localizedLowercase: String { get }
  @available(iOS 9.0, *)
  @available(swift, obsoleted: 3, renamed: "localizedLowercase")
  var localizedLowercaseString: String { get }
  @available(iOS 9.0, *)
  var localizedCapitalized: String { get }
  @available(iOS 9.0, *)
  @available(swift, obsoleted: 3, renamed: "localizedCapitalized")
  var localizedCapitalizedString: String { get }
  @available(iOS 6.0, *)
  func uppercased(with locale: Locale?) -> String
  @available(iOS 6.0, *)
  @available(swift, obsoleted: 3, renamed: "uppercased(with:)")
  func uppercaseStringWithLocale(_ locale: Locale?) -> String
  @available(iOS 6.0, *)
  func lowercased(with locale: Locale?) -> String
  @available(iOS 6.0, *)
  @available(swift, obsoleted: 3, renamed: "lowercased(with:)")
  func lowercaseStringWithLocale(_ locale: Locale?) -> String
  @available(iOS 6.0, *)
  func capitalized(with locale: Locale?) -> String
  @available(iOS 6.0, *)
  @available(swift, obsoleted: 3, renamed: "capitalized(with:)")
  func capitalizedStringWithLocale(_ locale: Locale?) -> String
  func getLineStart(_ startPtr: UnsafeMutablePointer<Int>?, end lineEndPtr: UnsafeMutablePointer<Int>?, contentsEnd contentsEndPtr: UnsafeMutablePointer<Int>?, for range: NSRange)
  @available(swift, obsoleted: 3, renamed: "getLineStart(_:end:contentsEnd:for:)")
  func getLineStart(_ startPtr: UnsafeMutablePointer<Int>?, end lineEndPtr: UnsafeMutablePointer<Int>?, contentsEnd contentsEndPtr: UnsafeMutablePointer<Int>?, forRange range: NSRange)
  func lineRange(for range: NSRange) -> NSRange
  @available(swift, obsoleted: 3, renamed: "lineRange(for:)")
  func lineRangeForRange(_ range: NSRange) -> NSRange
  func getParagraphStart(_ startPtr: UnsafeMutablePointer<Int>?, end parEndPtr: UnsafeMutablePointer<Int>?, contentsEnd contentsEndPtr: UnsafeMutablePointer<Int>?, for range: NSRange)
  @available(swift, obsoleted: 3, renamed: "getParagraphStart(_:end:contentsEnd:for:)")
  func getParagraphStart(_ startPtr: UnsafeMutablePointer<Int>?, end parEndPtr: UnsafeMutablePointer<Int>?, contentsEnd contentsEndPtr: UnsafeMutablePointer<Int>?, forRange range: NSRange)
  func paragraphRange(for range: NSRange) -> NSRange
  @available(swift, obsoleted: 3, renamed: "paragraphRange(for:)")
  func paragraphRangeForRange(_ range: NSRange) -> NSRange
  @available(iOS 4.0, *)
  func enumerateSubstrings(in range: NSRange, options opts: NSString.EnumerationOptions = [], using block: @escaping (String?, NSRange, NSRange, UnsafeMutablePointer<ObjCBool>) -> Void)
  @available(iOS 4.0, *)
  @available(swift, obsoleted: 3, renamed: "enumerateSubstrings(in:options:using:)")
  func enumerateSubstringsInRange(_ range: NSRange, options opts: NSString.EnumerationOptions = [], usingBlock block: @escaping (String?, NSRange, NSRange, UnsafeMutablePointer<ObjCBool>) -> Void)
  @available(iOS 4.0, *)
  func enumerateLines(_ block: @escaping (String, UnsafeMutablePointer<ObjCBool>) -> Void)
  @available(iOS 4.0, *)
  @available(swift, obsoleted: 3, renamed: "enumerateLines(_:)")
  func enumerateLinesUsingBlock(_ block: @escaping (String, UnsafeMutablePointer<ObjCBool>) -> Void)
  var utf8String: UnsafePointer<CChar>? { get }
  @available(swift, obsoleted: 3, renamed: "utf8String")
  var UTF8String: UnsafePointer<CChar>? { get }
  var fastestEncoding: UInt { get }
  var smallestEncoding: UInt { get }
  func data(using encoding: UInt, allowLossyConversion lossy: Bool) -> Data?
  @available(swift, obsoleted: 3, renamed: "data(using:allowLossyConversion:)")
  func dataUsingEncoding(_ encoding: UInt, allowLossyConversion lossy: Bool) -> Data?
  func data(using encoding: UInt) -> Data?
  @available(swift, obsoleted: 3, renamed: "data(using:)")
  func dataUsingEncoding(_ encoding: UInt) -> Data?
  func canBeConverted(to encoding: UInt) -> Bool
  @available(swift, obsoleted: 3, renamed: "canBeConverted(to:)")
  func canBeConvertedToEncoding(_ encoding: UInt) -> Bool
  func cString(using encoding: UInt) -> UnsafePointer<CChar>?
  @available(swift, obsoleted: 3, renamed: "cString(using:)")
  func cStringUsingEncoding(_ encoding: UInt) -> UnsafePointer<CChar>?
  func getCString(_ buffer: UnsafeMutablePointer<CChar>, maxLength maxBufferCount: Int, encoding: UInt) -> Bool
  func getBytes(_ buffer: UnsafeMutableRawPointer?, maxLength maxBufferCount: Int, usedLength usedBufferCount: UnsafeMutablePointer<Int>?, encoding: UInt, options: NSString.EncodingConversionOptions = [], range: NSRange, remaining leftover: NSRangePointer?) -> Bool
  @available(swift, obsoleted: 3, renamed: "getBytes(_:maxLength:usedLength:encoding:options:range:remaining:)")
  func getBytes(_ buffer: UnsafeMutableRawPointer?, maxLength maxBufferCount: Int, usedLength usedBufferCount: UnsafeMutablePointer<Int>?, encoding: UInt, options: NSString.EncodingConversionOptions = [], range: NSRange, remainingRange leftover: NSRangePointer?) -> Bool
  func maximumLengthOfBytes(using enc: UInt) -> Int
  @available(swift, obsoleted: 3, renamed: "maximumLengthOfBytes(using:)")
  func maximumLengthOfBytesUsingEncoding(_ enc: UInt) -> Int
  func lengthOfBytes(using enc: UInt) -> Int
  @available(swift, obsoleted: 3, renamed: "lengthOfBytes(using:)")
  func lengthOfBytesUsingEncoding(_ enc: UInt) -> Int
  class var availableStringEncodings: UnsafePointer<UInt> { get }
  class func localizedName(of encoding: UInt) -> String
  @available(swift, obsoleted: 3, renamed: "localizedName(of:)")
  class func localizedNameOfStringEncoding(_ encoding: UInt) -> String
  class var defaultCStringEncoding: UInt { get }
  var decomposedStringWithCanonicalMapping: String { get }
  var precomposedStringWithCanonicalMapping: String { get }
  var decomposedStringWithCompatibilityMapping: String { get }
  var precomposedStringWithCompatibilityMapping: String { get }
  func components(separatedBy separator: String) -> [String]
  @available(swift, obsoleted: 3, renamed: "components(separatedBy:)")
  func componentsSeparatedByString(_ separator: String) -> [String]
  @available(iOS 2.0, *)
  func components(separatedBy separator: CharacterSet) -> [String]
  @available(iOS 2.0, *)
  @available(swift, obsoleted: 3, renamed: "components(separatedBy:)")
  func componentsSeparatedByCharactersInSet(_ separator: CharacterSet) -> [String]
  func trimmingCharacters(in set: CharacterSet) -> String
  @available(swift, obsoleted: 3, renamed: "trimmingCharacters(in:)")
  func stringByTrimmingCharactersInSet(_ set: CharacterSet) -> String
  func padding(toLength newLength: Int, withPad padString: String, startingAt padIndex: Int) -> String
  @available(swift, obsoleted: 3, renamed: "padding(toLength:withPad:startingAt:)")
  func stringByPaddingToLength(_ newLength: Int, withString padString: String, startingAtIndex padIndex: Int) -> String
  @available(iOS 2.0, *)
  func folding(options: NSString.CompareOptions = [], locale: Locale?) -> String
  @available(iOS 2.0, *)
  @available(swift, obsoleted: 3, renamed: "folding(options:locale:)")
  func stringByFoldingWithOptions(_ options: NSString.CompareOptions = [], locale: Locale?) -> String
  @available(iOS 2.0, *)
  func replacingOccurrences(of target: String, with replacement: String, options: NSString.CompareOptions = [], range searchRange: NSRange) -> String
  @available(iOS 2.0, *)
  @available(swift, obsoleted: 3, renamed: "replacingOccurrences(of:with:options:range:)")
  func stringByReplacingOccurrencesOfString(_ target: String, withString replacement: String, options: NSString.CompareOptions = [], range searchRange: NSRange) -> String
  @available(iOS 2.0, *)
  func replacingOccurrences(of target: String, with replacement: String) -> String
  @available(iOS 2.0, *)
  @available(swift, obsoleted: 3, renamed: "replacingOccurrences(of:with:)")
  func stringByReplacingOccurrencesOfString(_ target: String, withString replacement: String) -> String
  @available(iOS 2.0, *)
  func replacingCharacters(in range: NSRange, with replacement: String) -> String
  @available(iOS 2.0, *)
  @available(swift, obsoleted: 3, renamed: "replacingCharacters(in:with:)")
  func stringByReplacingCharactersInRange(_ range: NSRange, withString replacement: String) -> String
  @available(iOS 9.0, *)
  func applyingTransform(_ transform: StringTransform, reverse: Bool) -> String?
  @available(iOS 9.0, *)
  @available(swift, obsoleted: 3, renamed: "applyingTransform(_:reverse:)")
  func stringByApplyingTransform(_ transform: StringTransform, reverse: Bool) -> String?
  func write(to url: URL, atomically useAuxiliaryFile: Bool, encoding enc: UInt) throws
  @available(swift, obsoleted: 3, renamed: "write(to:atomically:encoding:)")
  func writeToURL(_ url: URL, atomically useAuxiliaryFile: Bool, encoding enc: UInt) throws
  func write(toFile path: String, atomically useAuxiliaryFile: Bool, encoding enc: UInt) throws
  @available(swift, obsoleted: 3, renamed: "write(toFile:atomically:encoding:)")
  func writeToFile(_ path: String, atomically useAuxiliaryFile: Bool, encoding enc: UInt) throws
  var description: String { get }
  var hash: Int { get }
  convenience init(charactersNoCopy characters: UnsafeMutablePointer<unichar>, length: Int, freeWhenDone freeBuffer: Bool)
  convenience init(charactersNoCopy chars: UnsafeMutablePointer<unichar>, length len: Int, deallocator: ((UnsafeMutablePointer<unichar>, Int) -> Void)? = nil)
  convenience init(characters: UnsafePointer<unichar>, length: Int)
  convenience init?(utf8String nullTerminatedCString: UnsafePointer<CChar>)
  @available(swift, obsoleted: 3, renamed: "init(utf8String:)")
  convenience init?(UTF8String nullTerminatedCString: UnsafePointer<CChar>)
  convenience init(string aString: String)
  convenience init(format: String, arguments argList: CVaListPointer)
  convenience init(format: String, locale: Any?, arguments argList: CVaListPointer)
  convenience init?(data: Data, encoding: UInt)
  convenience init?(bytes: UnsafeRawPointer, length len: Int, encoding: UInt)
  convenience init?(bytesNoCopy bytes: UnsafeMutableRawPointer, length len: Int, encoding: UInt, freeWhenDone freeBuffer: Bool)
  convenience init?(bytesNoCopy bytes: UnsafeMutableRawPointer, length len: Int, encoding: UInt, deallocator: ((UnsafeMutableRawPointer, Int) -> Void)? = nil)
  @available(*, unavailable, renamed: "init()", message: "Not available in Swift")
  class func string() -> Self
  @available(*, unavailable, renamed: "init(string:)", message: "Not available in Swift")
  class func stringWithString(_ string: String) -> Self
  @available(*, unavailable, renamed: "init(characters:length:)", message: "Not available in Swift")
  class func stringWithCharacters(_ characters: UnsafePointer<unichar>, length: Int) -> Self
  @available(swift, obsoleted: 3, renamed: "init(utf8String:)")
  convenience init?(UTF8String nullTerminatedCString: UnsafePointer<CChar>)
  @available(*, unavailable, renamed: "init(utf8String:)", message: "Not available in Swift")
  class func stringWithUTF8String(_ nullTerminatedCString: UnsafePointer<CChar>) -> Self?
  convenience init?(cString nullTerminatedCString: UnsafePointer<CChar>, encoding: UInt)
  @available(swift, obsoleted: 3, renamed: "init(cString:encoding:)")
  convenience init?(CString nullTerminatedCString: UnsafePointer<CChar>, encoding: UInt)
  @available(swift, obsoleted: 3, renamed: "init(cString:encoding:)")
  convenience init?(CString cString: UnsafePointer<CChar>, encoding enc: UInt)
  @available(*, unavailable, renamed: "init(cString:encoding:)", message: "Not available in Swift")
  class func stringWithCString(_ cString: UnsafePointer<CChar>, encoding enc: UInt) -> Self?
  convenience init(contentsOf url: URL, encoding enc: UInt) throws
  @available(swift, obsoleted: 3, renamed: "init(contentsOf:encoding:)")
  convenience init(contentsOfURL url: URL, encoding enc: UInt) throws
  convenience init(contentsOfFile path: String, encoding enc: UInt) throws
  @available(swift, obsoleted: 3, renamed: "init(contentsOf:encoding:)")
  convenience init(contentsOfURL url: URL, encoding enc: UInt) throws
  @available(*, unavailable, renamed: "init(contentsOf:encoding:)", message: "Not available in Swift")
  class func stringWithContentsOfURL(_ url: URL, encoding enc: UInt) throws -> Self
  @available(*, unavailable, renamed: "init(contentsOfFile:encoding:)", message: "Not available in Swift")
  class func stringWithContentsOfFile(_ path: String, encoding enc: UInt) throws -> Self
  convenience init(contentsOf url: URL, usedEncoding enc: UnsafeMutablePointer<UInt>?) throws
  @available(swift, obsoleted: 3, renamed: "init(contentsOf:usedEncoding:)")
  convenience init(contentsOfURL url: URL, usedEncoding enc: UnsafeMutablePointer<UInt>?) throws
  convenience init(contentsOfFile path: String, usedEncoding enc: UnsafeMutablePointer<UInt>?) throws
  @available(swift, obsoleted: 3, renamed: "init(contentsOf:usedEncoding:)")
  convenience init(contentsOfURL url: URL, usedEncoding enc: UnsafeMutablePointer<UInt>?) throws
  @available(*, unavailable, renamed: "init(contentsOf:usedEncoding:)", message: "Not available in Swift")
  class func stringWithContentsOfURL(_ url: URL, usedEncoding enc: UnsafeMutablePointer<UInt>?) throws -> Self
  @available(*, unavailable, renamed: "init(contentsOfFile:usedEncoding:)", message: "Not available in Swift")
  class func stringWithContentsOfFile(_ path: String, usedEncoding enc: UnsafeMutablePointer<UInt>?) throws -> Self
}
@available(*, unavailable, message: "Not available in Swift")
typealias NSStringEnumerationOptions = Int
@available(swift, obsoleted: 3, renamed: "NSString.EnumerationOptions")
typealias NSStringEnumerationOptions = NSString.EnumerationOptions
@available(swift, obsoleted: 3, renamed: "StringTransform")
typealias NSStringTransform = StringTransform
struct StringTransform : _ObjectiveCBridgeable, Hashable, Equatable, _SwiftNewtypeWrapper, RawRepresentable, @unchecked Sendable {
  init(_ rawValue: String)
  init(rawValue: String)
  var _rawValue: NSString
  var rawValue: String { get }
  typealias RawValue = String
  typealias _ObjectiveCType = NSString
}
@available(iOS 9.0, *)
@available(swift, obsoleted: 3, renamed: "StringTransform.latinToKatakana")
let NSStringTransformLatinToKatakana: StringTransform
extension StringTransform {
  @available(iOS 9.0, *)
  static let latinToKatakana: StringTransform
  @available(iOS 9.0, *)
  static let latinToHiragana: StringTransform
  @available(iOS 9.0, *)
  static let latinToHangul: StringTransform
  @available(iOS 9.0, *)
  static let latinToArabic: StringTransform
  @available(iOS 9.0, *)
  static let latinToHebrew: StringTransform
  @available(iOS 9.0, *)
  static let latinToThai: StringTransform
  @available(iOS 9.0, *)
  static let latinToCyrillic: StringTransform
  @available(iOS 9.0, *)
  static let latinToGreek: StringTransform
  @available(iOS 9.0, *)
  static let toLatin: StringTransform
  @available(iOS 9.0, *)
  static let mandarinToLatin: StringTransform
  @available(iOS 9.0, *)
  static let hiraganaToKatakana: StringTransform
  @available(iOS 9.0, *)
  static let fullwidthToHalfwidth: StringTransform
  @available(iOS 9.0, *)
  static let toXMLHex: StringTransform
  @available(iOS 9.0, *)
  static let toUnicodeName: StringTransform
  @available(iOS 9.0, *)
  static let stripCombiningMarks: StringTransform
  @available(iOS 9.0, *)
  static let stripDiacritics: StringTransform
}
@available(iOS 9.0, *)
@available(swift, obsoleted: 3, renamed: "StringTransform.latinToHiragana")
let NSStringTransformLatinToHiragana: StringTransform
@available(iOS 9.0, *)
@available(swift, obsoleted: 3, renamed: "StringTransform.latinToHangul")
let NSStringTransformLatinToHangul: StringTransform
@available(iOS 9.0, *)
@available(swift, obsoleted: 3, renamed: "StringTransform.latinToArabic")
let NSStringTransformLatinToArabic: StringTransform
@available(iOS 9.0, *)
@available(swift, obsoleted: 3, renamed: "StringTransform.latinToHebrew")
let NSStringTransformLatinToHebrew: StringTransform
@available(iOS 9.0, *)
@available(swift, obsoleted: 3, renamed: "StringTransform.latinToThai")
let NSStringTransformLatinToThai: StringTransform
@available(iOS 9.0, *)
@available(swift, obsoleted: 3, renamed: "StringTransform.latinToCyrillic")
let NSStringTransformLatinToCyrillic: StringTransform
@available(iOS 9.0, *)
@available(swift, obsoleted: 3, renamed: "StringTransform.latinToGreek")
let NSStringTransformLatinToGreek: StringTransform
@available(iOS 9.0, *)
@available(swift, obsoleted: 3, renamed: "StringTransform.toLatin")
let NSStringTransformToLatin: StringTransform
@available(iOS 9.0, *)
@available(swift, obsoleted: 3, renamed: "StringTransform.mandarinToLatin")
let NSStringTransformMandarinToLatin: StringTransform
@available(iOS 9.0, *)
@available(swift, obsoleted: 3, renamed: "StringTransform.hiraganaToKatakana")
let NSStringTransformHiraganaToKatakana: StringTransform
@available(iOS 9.0, *)
@available(swift, obsoleted: 3, renamed: "StringTransform.fullwidthToHalfwidth")
let NSStringTransformFullwidthToHalfwidth: StringTransform
@available(iOS 9.0, *)
@available(swift, obsoleted: 3, renamed: "StringTransform.toXMLHex")
let NSStringTransformToXMLHex: StringTransform
@available(iOS 9.0, *)
@available(swift, obsoleted: 3, renamed: "StringTransform.toUnicodeName")
let NSStringTransformToUnicodeName: StringTransform
@available(iOS 9.0, *)
@available(swift, obsoleted: 3, renamed: "StringTransform.stripCombiningMarks")
let NSStringTransformStripCombiningMarks: StringTransform
@available(iOS 9.0, *)
@available(swift, obsoleted: 3, renamed: "StringTransform.stripDiacritics")
let NSStringTransformStripDiacritics: StringTransform
@available(swift, obsoleted: 3, renamed: "StringEncodingDetectionOptionsKey")
typealias NSStringEncodingDetectionOptionsKey = StringEncodingDetectionOptionsKey
struct StringEncodingDetectionOptionsKey : _ObjectiveCBridgeable, Hashable, Equatable, _SwiftNewtypeWrapper, RawRepresentable, @unchecked Sendable {
  init(rawValue: String)
  var _rawValue: NSString
  var rawValue: String { get }
  typealias RawValue = String
  typealias _ObjectiveCType = NSString
}
extension NSString {
  @available(iOS 8.0, *)
  class func stringEncoding(for data: Data, encodingOptions opts: [StringEncodingDetectionOptionsKey : Any]? = nil, convertedString string: AutoreleasingUnsafeMutablePointer<NSString?>?, usedLossyConversion: UnsafeMutablePointer<ObjCBool>?) -> UInt
  @available(iOS 8.0, *)
  @available(swift, obsoleted: 3, renamed: "stringEncoding(for:encodingOptions:convertedString:usedLossyConversion:)")
  class func stringEncodingForData(_ data: Data, encodingOptions opts: [StringEncodingDetectionOptionsKey : Any]? = nil, convertedString string: AutoreleasingUnsafeMutablePointer<NSString?>?, usedLossyConversion: UnsafeMutablePointer<ObjCBool>?) -> UInt
}
@available(iOS 8.0, *)
@available(swift, obsoleted: 3, renamed: "StringEncodingDetectionOptionsKey.suggestedEncodingsKey")
let NSStringEncodingDetectionSuggestedEncodingsKey: StringEncodingDetectionOptionsKey
extension StringEncodingDetectionOptionsKey {
  @available(iOS 8.0, *)
  static let suggestedEncodingsKey: StringEncodingDetectionOptionsKey
  @available(iOS 8.0, *)
  static let disallowedEncodingsKey: StringEncodingDetectionOptionsKey
  @available(iOS 8.0, *)
  static let useOnlySuggestedEncodingsKey: StringEncodingDetectionOptionsKey
  @available(iOS 8.0, *)
  static let allowLossyKey: StringEncodingDetectionOptionsKey
  @available(iOS 8.0, *)
  static let fromWindowsKey: StringEncodingDetectionOptionsKey
  @available(iOS 8.0, *)
  static let lossySubstitutionKey: StringEncodingDetectionOptionsKey
  @available(iOS 8.0, *)
  static let likelyLanguageKey: StringEncodingDetectionOptionsKey
}
@available(iOS 8.0, *)
@available(swift, obsoleted: 3, renamed: "StringEncodingDetectionOptionsKey.disallowedEncodingsKey")
let NSStringEncodingDetectionDisallowedEncodingsKey: StringEncodingDetectionOptionsKey
@available(iOS 8.0, *)
@available(swift, obsoleted: 3, renamed: "StringEncodingDetectionOptionsKey.useOnlySuggestedEncodingsKey")
let NSStringEncodingDetectionUseOnlySuggestedEncodingsKey: StringEncodingDetectionOptionsKey
@available(iOS 8.0, *)
@available(swift, obsoleted: 3, renamed: "StringEncodingDetectionOptionsKey.allowLossyKey")
let NSStringEncodingDetectionAllowLossyKey: StringEncodingDetectionOptionsKey
@available(iOS 8.0, *)
@available(swift, obsoleted: 3, renamed: "StringEncodingDetectionOptionsKey.fromWindowsKey")
let NSStringEncodingDetectionFromWindowsKey: StringEncodingDetectionOptionsKey
@available(iOS 8.0, *)
@available(swift, obsoleted: 3, renamed: "StringEncodingDetectionOptionsKey.lossySubstitutionKey")
let NSStringEncodingDetectionLossySubstitutionKey: StringEncodingDetectionOptionsKey
@available(iOS 8.0, *)
@available(swift, obsoleted: 3, renamed: "StringEncodingDetectionOptionsKey.likelyLanguageKey")
let NSStringEncodingDetectionLikelyLanguageKey: StringEncodingDetectionOptionsKey
extension NSString : NSItemProviderReading, NSItemProviderWriting {
  @available(iOS 11.0, *)
  class var readableTypeIdentifiersForItemProvider: [String] { get }
  @available(iOS 11.0, *)
  class var writableTypeIdentifiersForItemProvider: [String] { get }
  @available(iOS 11.0, *)
  var writableTypeIdentifiersForItemProvider: [String] { get }
  @available(iOS 11.0, *)
  class func object(withItemProviderData data: Data, typeIdentifier: String) throws -> Self
  @available(iOS 11.0, *)
  class func itemProviderVisibilityForRepresentation(withTypeIdentifier typeIdentifier: String) -> NSItemProviderRepresentationVisibility
  @available(iOS 11.0, *)
  func itemProviderVisibilityForRepresentation(withTypeIdentifier typeIdentifier: String) -> NSItemProviderRepresentationVisibility
  @available(iOS 11.0, *)
  func loadData(withTypeIdentifier typeIdentifier: String, forItemProviderCompletionHandler completionHandler: @escaping (Data?, Error?) -> Void) -> Progress?
}
class NSMutableString : NSString {
  func replaceCharacters(in range: NSRange, with aString: String)
  @available(swift, obsoleted: 3, renamed: "replaceCharacters(in:with:)")
  func replaceCharactersInRange(_ range: NSRange, withString aString: String)
  init()
  init?(coder: NSCoder)
  convenience init(charactersNoCopy characters: UnsafeMutablePointer<unichar>, length: Int, freeWhenDone freeBuffer: Bool)
  convenience init(charactersNoCopy chars: UnsafeMutablePointer<unichar>, length len: Int, deallocator: ((UnsafeMutablePointer<unichar>, Int) -> Void)? = nil)
  convenience init(characters: UnsafePointer<unichar>, length: Int)
  convenience init?(utf8String nullTerminatedCString: UnsafePointer<CChar>)
  convenience init(string aString: String)
  convenience init(format: String, arguments argList: CVaListPointer)
  convenience init(format: String, locale: Any?, arguments argList: CVaListPointer)
  convenience init?(data: Data, encoding: UInt)
  convenience init?(bytes: UnsafeRawPointer, length len: Int, encoding: UInt)
  convenience init?(bytesNoCopy bytes: UnsafeMutableRawPointer, length len: Int, encoding: UInt, freeWhenDone freeBuffer: Bool)
  convenience init?(bytesNoCopy bytes: UnsafeMutableRawPointer, length len: Int, encoding: UInt, deallocator: ((UnsafeMutableRawPointer, Int) -> Void)? = nil)
  convenience init?(cString nullTerminatedCString: UnsafePointer<CChar>, encoding: UInt)
  convenience init(contentsOf url: URL, encoding enc: UInt) throws
  convenience init(contentsOfFile path: String, encoding enc: UInt) throws
  convenience init(contentsOf url: URL, usedEncoding enc: UnsafeMutablePointer<UInt>?) throws
  convenience init(contentsOfFile path: String, usedEncoding enc: UnsafeMutablePointer<UInt>?) throws
  @available(iOS, unavailable, introduced: 2.0, deprecated: 2.0, message: "Use -initWithContentsOfFile:encoding:error: instead")
  convenience init?(contentsOfFile path: String)
  @available(iOS, unavailable, introduced: 2.0, deprecated: 2.0, message: "Use -initWithContentsOfURL:encoding:error: instead")
  convenience init?(contentsOf url: URL)
  @available(iOS, unavailable, introduced: 2.0, deprecated: 2.0, message: "Use -initWithCString:encoding: instead")
  convenience init?(cStringNoCopy bytes: UnsafeMutablePointer<CChar>, length: Int, freeWhenDone freeBuffer: Bool)
  @available(iOS, unavailable, introduced: 2.0, deprecated: 2.0, message: "Use -initWithCString:encoding: instead")
  convenience init?(cString bytes: UnsafePointer<CChar>, length: Int)
  @available(iOS, unavailable, introduced: 2.0, deprecated: 2.0, message: "Use -initWithCString:encoding: instead")
  convenience init?(cString bytes: UnsafePointer<CChar>)
}

extension NSMutableString {
  func appendFormat(_ format: NSString, _ args: CVarArg...)
}
extension NSMutableString {
  func insert(_ aString: String, at loc: Int)
  @available(swift, obsoleted: 3, renamed: "insert(_:at:)")
  func insertString(_ aString: String, atIndex loc: Int)
  func deleteCharacters(in range: NSRange)
  @available(swift, obsoleted: 3, renamed: "deleteCharacters(in:)")
  func deleteCharactersInRange(_ range: NSRange)
  func append(_ aString: String)
  @available(swift, obsoleted: 3, renamed: "append(_:)")
  func appendString(_ aString: String)
  func setString(_ aString: String)
  func replaceOccurrences(of target: String, with replacement: String, options: NSString.CompareOptions = [], range searchRange: NSRange) -> Int
  @available(swift, obsoleted: 3, renamed: "replaceOccurrences(of:with:options:range:)")
  func replaceOccurrencesOfString(_ target: String, withString replacement: String, options: NSString.CompareOptions = [], range searchRange: NSRange) -> Int
  @available(iOS 9.0, *)
  func applyTransform(_ transform: StringTransform, reverse: Bool, range: NSRange, updatedRange resultingRange: NSRangePointer?) -> Bool
  init(capacity: Int)
  @available(*, unavailable, renamed: "init(capacity:)", message: "Not available in Swift")
  class func stringWithCapacity(_ capacity: Int) -> NSMutableString
}
@available(swift, obsoleted: 3, renamed: "NSExceptionName.characterConversionException")
let NSCharacterConversionException: NSExceptionName
extension NSExceptionName {
  static let characterConversionException: NSExceptionName
  static let parseErrorException: NSExceptionName
}
@available(swift, obsoleted: 3, renamed: "NSExceptionName.parseErrorException")
let NSParseErrorException: NSExceptionName
extension NSString {
  func propertyList() -> Any
  func propertyListFromStringsFileFormat() -> [AnyHashable : Any]?
}
extension NSString {
  @available(iOS, unavailable, introduced: 2.0, deprecated: 2.0, message: "Use -cStringUsingEncoding: instead")
  func cString() -> UnsafePointer<CChar>?
  @available(iOS, unavailable, introduced: 2.0, deprecated: 2.0, message: "Use -cStringUsingEncoding: instead")
  func lossyCString() -> UnsafePointer<CChar>?
  @available(iOS, unavailable, introduced: 2.0, deprecated: 2.0, message: "Use -lengthOfBytesUsingEncoding: instead")
  func cStringLength() -> Int
  @available(iOS, unavailable, introduced: 2.0, deprecated: 2.0, message: "Use -getCString:maxLength:encoding: instead")
  func getCString(_ bytes: UnsafeMutablePointer<CChar>)
  @available(iOS, unavailable, introduced: 2.0, deprecated: 2.0, message: "Use -getCString:maxLength:encoding: instead")
  func getCString(_ bytes: UnsafeMutablePointer<CChar>, maxLength: Int)
  @available(iOS, unavailable, introduced: 2.0, deprecated: 2.0, message: "Use -getCString:maxLength:encoding: instead")
  func getCString(_ bytes: UnsafeMutablePointer<CChar>, maxLength: Int, range aRange: NSRange, remaining leftoverRange: NSRangePointer?)
  @available(swift, obsoleted: 3, renamed: "getCString(_:maxLength:range:remaining:)")
  @available(iOS, unavailable, introduced: 2.0, deprecated: 2.0, message: "Use -getCString:maxLength:encoding: instead")
  func getCString(_ bytes: UnsafeMutablePointer<CChar>, maxLength: Int, range aRange: NSRange, remainingRange leftoverRange: NSRangePointer?)
  @available(iOS, unavailable, introduced: 2.0, deprecated: 2.0, message: "Use -writeToFile:atomically:error: instead")
  func write(toFile path: String, atomically useAuxiliaryFile: Bool) -> Bool
  @available(swift, obsoleted: 3, renamed: "write(toFile:atomically:)")
  @available(iOS, unavailable, introduced: 2.0, deprecated: 2.0, message: "Use -writeToFile:atomically:error: instead")
  func writeToFile(_ path: String, atomically useAuxiliaryFile: Bool) -> Bool
  @available(iOS, unavailable, introduced: 2.0, deprecated: 2.0, message: "Use -writeToURL:atomically:error: instead")
  func write(to url: URL, atomically: Bool) -> Bool
  @available(swift, obsoleted: 3, renamed: "write(to:atomically:)")
  @available(iOS, unavailable, introduced: 2.0, deprecated: 2.0, message: "Use -writeToURL:atomically:error: instead")
  func writeToURL(_ url: URL, atomically: Bool) -> Bool
  @available(iOS, unavailable, introduced: 2.0, deprecated: 2.0, message: "Use -initWithContentsOfFile:encoding:error: instead")
  convenience init?(contentsOfFile path: String)
  @available(iOS, unavailable, introduced: 2.0, deprecated: 2.0, message: "Use -initWithContentsOfURL:encoding:error: instead")
  convenience init?(contentsOf url: URL)
  @available(swift, obsoleted: 3, renamed: "init(contentsOf:)")
  @available(iOS, unavailable, introduced: 2.0, deprecated: 2.0, message: "Use -initWithContentsOfURL:encoding:error: instead")
  convenience init?(contentsOfURL url: URL)
  @available(iOS, unavailable, introduced: 2.0, deprecated: 2.0, message: "Use +stringWithContentsOfFile:encoding:error: instead")
  class func string(withContentsOfFile path: String) -> Any?
  @available(swift, obsoleted: 3, renamed: "string(withContentsOfFile:)")
  @available(iOS, unavailable, introduced: 2.0, deprecated: 2.0, message: "Use +stringWithContentsOfFile:encoding:error: instead")
  class func stringWithContentsOfFile(_ path: String) -> Any?
  @available(iOS, unavailable, introduced: 2.0, deprecated: 2.0, message: "Use +stringWithContentsOfURL:encoding:error: instead")
  class func string(withContentsOf url: URL) -> Any?
  @available(swift, obsoleted: 3, renamed: "string(withContentsOf:)")
  @available(iOS, unavailable, introduced: 2.0, deprecated: 2.0, message: "Use +stringWithContentsOfURL:encoding:error: instead")
  class func stringWithContentsOfURL(_ url: URL) -> Any?
  @available(iOS, unavailable, introduced: 2.0, deprecated: 2.0, message: "Use -initWithCString:encoding: instead")
  convenience init?(cStringNoCopy bytes: UnsafeMutablePointer<CChar>, length: Int, freeWhenDone freeBuffer: Bool)
  @available(swift, obsoleted: 3, renamed: "init(cStringNoCopy:length:freeWhenDone:)")
  @available(iOS, unavailable, introduced: 2.0, deprecated: 2.0, message: "Use -initWithCString:encoding: instead")
  convenience init?(CStringNoCopy bytes: UnsafeMutablePointer<CChar>, length: Int, freeWhenDone freeBuffer: Bool)
  @available(iOS, unavailable, introduced: 2.0, deprecated: 2.0, message: "Use -initWithCString:encoding: instead")
  convenience init?(cString bytes: UnsafePointer<CChar>, length: Int)
  @available(swift, obsoleted: 3, renamed: "init(cString:length:)")
  @available(iOS, unavailable, introduced: 2.0, deprecated: 2.0, message: "Use -initWithCString:encoding: instead")
  convenience init?(CString bytes: UnsafePointer<CChar>, length: Int)
  @available(iOS, unavailable, introduced: 2.0, deprecated: 2.0, message: "Use -initWithCString:encoding: instead")
  convenience init?(cString bytes: UnsafePointer<CChar>)
  @available(swift, obsoleted: 3, renamed: "init(cString:)")
  @available(iOS, unavailable, introduced: 2.0, deprecated: 2.0, message: "Use -initWithCString:encoding: instead")
  convenience init?(CString bytes: UnsafePointer<CChar>)
  @available(iOS, unavailable, introduced: 2.0, deprecated: 2.0, message: "Use +stringWithCString:encoding:")
  class func string(withCString bytes: UnsafePointer<CChar>, length: Int) -> Any?
  @available(swift, obsoleted: 3, renamed: "string(withCString:length:)")
  @available(iOS, unavailable, introduced: 2.0, deprecated: 2.0, message: "Use +stringWithCString:encoding:")
  class func stringWithCString(_ bytes: UnsafePointer<CChar>, length: Int) -> Any?
  @available(iOS, unavailable, introduced: 2.0, deprecated: 2.0, message: "Use +stringWithCString:encoding: instead")
  class func string(withCString bytes: UnsafePointer<CChar>) -> Any?
  @available(swift, obsoleted: 3, renamed: "string(withCString:)")
  @available(iOS, unavailable, introduced: 2.0, deprecated: 2.0, message: "Use +stringWithCString:encoding: instead")
  class func stringWithCString(_ bytes: UnsafePointer<CChar>) -> Any?
  func getCharacters(_ buffer: UnsafeMutablePointer<unichar>)
}
var NSProprietaryStringEncoding: UInt { get }
@available(*, unavailable, message: "Use String or NSString instead.")
class NSSimpleCString : NSString {
  init()
  init?(coder: NSCoder)
  convenience init(charactersNoCopy characters: UnsafeMutablePointer<unichar>, length: Int, freeWhenDone freeBuffer: Bool)
  convenience init(charactersNoCopy chars: UnsafeMutablePointer<unichar>, length len: Int, deallocator: ((UnsafeMutablePointer<unichar>, Int) -> Void)? = nil)
  convenience init(characters: UnsafePointer<unichar>, length: Int)
  convenience init?(utf8String nullTerminatedCString: UnsafePointer<CChar>)
  convenience init(string aString: String)
  convenience init(format: String, arguments argList: CVaListPointer)
  convenience init(format: String, locale: Any?, arguments argList: CVaListPointer)
  convenience init?(data: Data, encoding: UInt)
  convenience init?(bytes: UnsafeRawPointer, length len: Int, encoding: UInt)
  convenience init?(bytesNoCopy bytes: UnsafeMutableRawPointer, length len: Int, encoding: UInt, freeWhenDone freeBuffer: Bool)
  convenience init?(bytesNoCopy bytes: UnsafeMutableRawPointer, length len: Int, encoding: UInt, deallocator: ((UnsafeMutableRawPointer, Int) -> Void)? = nil)
  convenience init?(cString nullTerminatedCString: UnsafePointer<CChar>, encoding: UInt)
  convenience init(contentsOf url: URL, encoding enc: UInt) throws
  convenience init(contentsOfFile path: String, encoding enc: UInt) throws
  convenience init(contentsOf url: URL, usedEncoding enc: UnsafeMutablePointer<UInt>?) throws
  convenience init(contentsOfFile path: String, usedEncoding enc: UnsafeMutablePointer<UInt>?) throws
  @available(iOS, unavailable, introduced: 2.0, deprecated: 2.0, message: "Use -initWithContentsOfFile:encoding:error: instead")
  convenience init?(contentsOfFile path: String)
  @available(iOS, unavailable, introduced: 2.0, deprecated: 2.0, message: "Use -initWithContentsOfURL:encoding:error: instead")
  convenience init?(contentsOf url: URL)
  @available(iOS, unavailable, introduced: 2.0, deprecated: 2.0, message: "Use -initWithCString:encoding: instead")
  convenience init?(cStringNoCopy bytes: UnsafeMutablePointer<CChar>, length: Int, freeWhenDone freeBuffer: Bool)
  @available(iOS, unavailable, introduced: 2.0, deprecated: 2.0, message: "Use -initWithCString:encoding: instead")
  convenience init?(cString bytes: UnsafePointer<CChar>, length: Int)
  @available(iOS, unavailable, introduced: 2.0, deprecated: 2.0, message: "Use -initWithCString:encoding: instead")
  convenience init?(cString bytes: UnsafePointer<CChar>)
}
@available(*, unavailable, message: "Use String or NSString instead.")
class NSConstantString : NSSimpleCString {
  init()
  init?(coder: NSCoder)
  convenience init(charactersNoCopy characters: UnsafeMutablePointer<unichar>, length: Int, freeWhenDone freeBuffer: Bool)
  convenience init(charactersNoCopy chars: UnsafeMutablePointer<unichar>, length len: Int, deallocator: ((UnsafeMutablePointer<unichar>, Int) -> Void)? = nil)
  convenience init(characters: UnsafePointer<unichar>, length: Int)
  convenience init?(utf8String nullTerminatedCString: UnsafePointer<CChar>)
  convenience init(string aString: String)
  convenience init(format: String, arguments argList: CVaListPointer)
  convenience init(format: String, locale: Any?, arguments argList: CVaListPointer)
  convenience init?(data: Data, encoding: UInt)
  convenience init?(bytes: UnsafeRawPointer, length len: Int, encoding: UInt)
  convenience init?(bytesNoCopy bytes: UnsafeMutableRawPointer, length len: Int, encoding: UInt, freeWhenDone freeBuffer: Bool)
  convenience init?(bytesNoCopy bytes: UnsafeMutableRawPointer, length len: Int, encoding: UInt, deallocator: ((UnsafeMutableRawPointer, Int) -> Void)? = nil)
  convenience init?(cString nullTerminatedCString: UnsafePointer<CChar>, encoding: UInt)
  convenience init(contentsOf url: URL, encoding enc: UInt) throws
  convenience init(contentsOfFile path: String, encoding enc: UInt) throws
  convenience init(contentsOf url: URL, usedEncoding enc: UnsafeMutablePointer<UInt>?) throws
  convenience init(contentsOfFile path: String, usedEncoding enc: UnsafeMutablePointer<UInt>?) throws
  @available(iOS, unavailable, introduced: 2.0, deprecated: 2.0, message: "Use -initWithContentsOfFile:encoding:error: instead")
  convenience init?(contentsOfFile path: String)
  @available(iOS, unavailable, introduced: 2.0, deprecated: 2.0, message: "Use -initWithContentsOfURL:encoding:error: instead")
  convenience init?(contentsOf url: URL)
  @available(iOS, unavailable, introduced: 2.0, deprecated: 2.0, message: "Use -initWithCString:encoding: instead")
  convenience init?(cStringNoCopy bytes: UnsafeMutablePointer<CChar>, length: Int, freeWhenDone freeBuffer: Bool)
  @available(iOS, unavailable, introduced: 2.0, deprecated: 2.0, message: "Use -initWithCString:encoding: instead")
  convenience init?(cString bytes: UnsafePointer<CChar>, length: Int)
  @available(iOS, unavailable, introduced: 2.0, deprecated: 2.0, message: "Use -initWithCString:encoding: instead")
  convenience init?(cString bytes: UnsafePointer<CChar>)
}
