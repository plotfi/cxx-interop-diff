@_exported import CoreFoundation

@available(swift, obsoleted: 3, renamed: "SocketNativeHandle")
typealias NSSocketNativeHandle = SocketNativeHandle
typealias SocketNativeHandle = Int32
@available(swift, obsoleted: 3, renamed: "Port.didBecomeInvalidNotification")
let NSPortDidBecomeInvalidNotification: NSNotification.Name
extension Port {
  class let didBecomeInvalidNotification: NSNotification.Name
}
@available(swift, obsoleted: 3, renamed: "Port")
typealias NSPort = Port
class Port : NSObject, NSCopying, NSCoding {
  @available(*, unavailable, message: "superseded by import of -[NSObject init]")
  /*not inherited*/ init()
  @available(*, unavailable, renamed: "init()", message: "Not available in Swift")
  class func port() -> Port
  func invalidate()
  var isValid: Bool { get }
  @available(swift, obsoleted: 3, renamed: "isValid")
  var valid: Bool { get }
  func setDelegate(_ anObject: PortDelegate?)
  func delegate() -> PortDelegate?
  func schedule(in runLoop: RunLoop, forMode mode: RunLoop.Mode)
  @available(swift, obsoleted: 3, renamed: "schedule(in:forMode:)")
  func scheduleInRunLoop(_ runLoop: RunLoop, forMode mode: RunLoop.Mode)
  func remove(from runLoop: RunLoop, forMode mode: RunLoop.Mode)
  @available(swift, obsoleted: 3, renamed: "remove(from:forMode:)")
  func removeFromRunLoop(_ runLoop: RunLoop, forMode mode: RunLoop.Mode)
  var reservedSpaceLength: Int { get }
  func send(before limitDate: Date, components: NSMutableArray?, from receivePort: Port?, reserved headerSpaceReserved: Int) -> Bool
  @available(swift, obsoleted: 3, renamed: "send(before:components:from:reserved:)")
  func sendBeforeDate(_ limitDate: Date, components: NSMutableArray?, from receivePort: Port?, reserved headerSpaceReserved: Int) -> Bool
  func send(before limitDate: Date, msgid msgID: Int, components: NSMutableArray?, from receivePort: Port?, reserved headerSpaceReserved: Int) -> Bool
  @available(swift, obsoleted: 3, renamed: "send(before:msgid:components:from:reserved:)")
  func sendBeforeDate(_ limitDate: Date, msgid msgID: Int, components: NSMutableArray?, from receivePort: Port?, reserved headerSpaceReserved: Int) -> Bool
  init()
  func copy(with zone: NSZone? = nil) -> Any
  func encode(with coder: NSCoder)
  init?(coder: NSCoder)
}
@available(swift, obsoleted: 3, renamed: "PortDelegate")
typealias NSPortDelegate = PortDelegate
protocol PortDelegate : NSObjectProtocol {
}
class NSMachPort : Port {
  class func port(withMachPort machPort: UInt32) -> Port
  @available(swift, obsoleted: 3, renamed: "port(withMachPort:)")
  class func portWithMachPort(_ machPort: UInt32) -> Port
  init(machPort: UInt32)
  func setDelegate(_ anObject: NSMachPortDelegate?)
  func delegate() -> NSMachPortDelegate?
  @available(iOS 2.0, *)
  class func port(withMachPort machPort: UInt32, options f: NSMachPort.Options = []) -> Port
  @available(iOS 2.0, *)
  @available(swift, obsoleted: 3, renamed: "port(withMachPort:options:)")
  class func portWithMachPort(_ machPort: UInt32, options f: NSMachPort.Options = []) -> Port
  @available(iOS 2.0, *)
  init(machPort: UInt32, options f: NSMachPort.Options = [])
  var machPort: UInt32 { get }
  func schedule(in runLoop: RunLoop, forMode mode: RunLoop.Mode)
  @available(swift, obsoleted: 3, renamed: "schedule(in:forMode:)")
  func scheduleInRunLoop(_ runLoop: RunLoop, forMode mode: RunLoop.Mode)
  func remove(from runLoop: RunLoop, forMode mode: RunLoop.Mode)
  @available(swift, obsoleted: 3, renamed: "remove(from:forMode:)")
  func removeFromRunLoop(_ runLoop: RunLoop, forMode mode: RunLoop.Mode)
  convenience init()
  init?(coder: NSCoder)
}
@available(*, unavailable, message: "Not available in Swift")
typealias NSMachPortOptions = Int
@available(iOS 2.0, *)
@available(swift, obsoleted: 3, renamed: "NSMachPort.Options")
typealias NSMachPortOptions = NSMachPort.Options
extension NSMachPort {
  @available(iOS 2.0, *)
  struct Options : OptionSet, @unchecked Sendable {
    init(rawValue: UInt)
    let rawValue: UInt
    typealias RawValue = UInt
    typealias Element = NSMachPort.Options
    typealias ArrayLiteralElement = NSMachPort.Options
    @available(*, unavailable, message: "use [] to construct an empty option set")
    static var deallocateNone: NSMachPort.Options { get }
    @available(*, unavailable, message: "use [] to construct an empty option set")
    @available(swift, obsoleted: 3, renamed: "deallocateNone")
    static var DeallocateNone: NSMachPort.Options { get }
    static var deallocateSendRight: NSMachPort.Options { get }
    @available(swift, obsoleted: 3, renamed: "deallocateSendRight")
    static var DeallocateSendRight: NSMachPort.Options { get }
    static var deallocateReceiveRight: NSMachPort.Options { get }
    @available(swift, obsoleted: 3, renamed: "deallocateReceiveRight")
    static var DeallocateReceiveRight: NSMachPort.Options { get }
  }
}
protocol NSMachPortDelegate : PortDelegate {
  optional func handleMachMessage(_ msg: UnsafeMutableRawPointer)
}
class MessagePort : Port {
  init()
  init?(coder: NSCoder)
}
@available(swift, obsoleted: 3, renamed: "MessagePort")
typealias NSMessagePort = MessagePort
