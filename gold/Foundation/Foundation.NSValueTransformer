@_exported import CoreFoundation

struct NSValueTransformerName : _ObjectiveCBridgeable, Hashable, Equatable, _SwiftNewtypeWrapper, RawRepresentable, @unchecked Sendable {
  init(_ rawValue: String)
  init(rawValue: String)
  var _rawValue: NSString
  var rawValue: String { get }
  typealias RawValue = String
  typealias _ObjectiveCType = NSString
}
@available(iOS 3.0, *)
@available(swift, obsoleted: 3, renamed: "NSValueTransformerName.negateBooleanTransformerName")
let NSNegateBooleanTransformerName: NSValueTransformerName
extension NSValueTransformerName {
  @available(iOS 3.0, *)
  static let negateBooleanTransformerName: NSValueTransformerName
  @available(iOS 3.0, *)
  static let isNilTransformerName: NSValueTransformerName
  @available(iOS 3.0, *)
  static let isNotNilTransformerName: NSValueTransformerName
  @available(iOS, introduced: 3.0, deprecated: 12.0)
  static let unarchiveFromDataTransformerName: NSValueTransformerName
  @available(iOS, introduced: 3.0, deprecated: 12.0)
  static let keyedUnarchiveFromDataTransformerName: NSValueTransformerName
  @available(iOS 12.0, *)
  static let secureUnarchiveFromDataTransformerName: NSValueTransformerName
}
@available(iOS 3.0, *)
@available(swift, obsoleted: 3, renamed: "NSValueTransformerName.isNilTransformerName")
let NSIsNilTransformerName: NSValueTransformerName
@available(iOS 3.0, *)
@available(swift, obsoleted: 3, renamed: "NSValueTransformerName.isNotNilTransformerName")
let NSIsNotNilTransformerName: NSValueTransformerName
@available(swift, obsoleted: 3, renamed: "NSValueTransformerName.unarchiveFromDataTransformerName")
@available(iOS, introduced: 3.0, deprecated: 12.0)
let NSUnarchiveFromDataTransformerName: NSValueTransformerName
@available(swift, obsoleted: 3, renamed: "NSValueTransformerName.keyedUnarchiveFromDataTransformerName")
@available(iOS, introduced: 3.0, deprecated: 12.0)
let NSKeyedUnarchiveFromDataTransformerName: NSValueTransformerName
@available(iOS 12.0, *)
@available(swift, obsoleted: 3, renamed: "NSValueTransformerName.secureUnarchiveFromDataTransformerName")
let NSSecureUnarchiveFromDataTransformerName: NSValueTransformerName
@available(iOS 3.0, *)
@available(swift, obsoleted: 3, renamed: "ValueTransformer")
typealias NSValueTransformer = ValueTransformer
@available(iOS 3.0, *)
class ValueTransformer : NSObject {
  class func setValueTransformer(_ transformer: ValueTransformer?, forName name: NSValueTransformerName)
  /*not inherited*/ init?(forName name: NSValueTransformerName)
  @available(*, unavailable, renamed: "init(forName:)", message: "Not available in Swift")
  class func valueTransformerForName(_ name: NSValueTransformerName) -> ValueTransformer?
  class func valueTransformerNames() -> [NSValueTransformerName]
  class func transformedValueClass() -> AnyClass
  class func allowsReverseTransformation() -> Bool
  func transformedValue(_ value: Any?) -> Any?
  func reverseTransformedValue(_ value: Any?) -> Any?
  init()
}

/// A value transformer which transforms values to and from \c NSData by archiving and unarchiving using secure coding.
@available(iOS 12.0, *)
class NSSecureUnarchiveFromDataTransformer : ValueTransformer {

  /// The list of allowable classes which the top-level object in the archive must conform to on encoding and decoding.
  ///
  /// Returns the result of \c +transformedValueClass if not \c Nil; otherwise, currently returns \c NSArray, \c NSDictionary, \c NSSet, \c NSString, \c NSNumber, \c NSDate, \c NSData, \c NSURL, \c NSUUID, and \c NSNull.
  ///
  /// Can be overridden by subclasses to provide an expanded or different set of allowed transformation classes.
  class var allowedTopLevelClasses: [AnyClass] { get }
  init()
}
