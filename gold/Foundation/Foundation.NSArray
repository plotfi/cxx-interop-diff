@_exported import CoreFoundation


/****************	Immutable Array		****************/
class NSArray : NSObject, NSCopying, NSMutableCopying, NSSecureCoding, NSFastEnumeration {
  var count: Int { get }
  func object(at index: Int) -> Any
  @available(swift, obsoleted: 3, renamed: "object(at:)")
  func objectAtIndex(_ index: Int) -> Any
  init()
  init(objects: UnsafePointer<AnyObject>?, count cnt: Int)
  init?(coder: NSCoder)
  class var supportsSecureCoding: Bool { get }
  func copy(with zone: NSZone? = nil) -> Any
  func mutableCopy(with zone: NSZone? = nil) -> Any
  func encode(with coder: NSCoder)
  func countByEnumerating(with state: UnsafeMutablePointer<NSFastEnumerationState>, objects buffer: AutoreleasingUnsafeMutablePointer<AnyObject?>, count len: Int) -> Int
}

extension NSArray : ExpressibleByArrayLiteral {
  /// Create an instance initialized with `elements`.
  required convenience init(arrayLiteral elements: Any...)
  typealias ArrayLiteralElement = Any
}

extension NSArray : _HasCustomAnyHashableRepresentation {
  @nonobjc func _toCustomAnyHashable() -> AnyHashable?
}

extension NSArray : Sequence {
  /// Return an *iterator* over the elements of this *sequence*.
  ///
  /// - Complexity: O(1).
  final func makeIterator() -> NSFastEnumerationIterator
  /// A value less than or equal to the number of elements in the collection.
  ///
  /// - Complexity: O(1).
  @_alwaysEmitIntoClient @nonobjc var underestimatedCount: Int { get }
  typealias Element = Any
  typealias Iterator = NSFastEnumerationIterator
}

extension NSArray {
  convenience init(objects elements: Any...)
}

extension NSArray {
  /// Initializes a newly allocated array by placing in it the objects
  /// contained in a given array.
  ///
  /// - Returns: An array initialized to contain the objects in
  ///    `anArray``. The returned object might be different than the
  ///    original receiver.
  ///
  /// Discussion: After an immutable array has been initialized in
  /// this way, it cannot be modified.
  @nonobjc convenience init(array anArray: __shared NSArray)
}

extension NSArray : CustomReflectable {
  var customMirror: Mirror { get }
}
extension NSArray {
  func adding(_ anObject: Any) -> [Any]
  @available(swift, obsoleted: 3, renamed: "adding(_:)")
  func arrayByAddingObject(_ anObject: Any) -> [Any]
  func addingObjects(from otherArray: [Any]) -> [Any]
  @available(swift, obsoleted: 3, renamed: "addingObjects(from:)")
  func arrayByAddingObjectsFromArray(_ otherArray: [Any]) -> [Any]
  func componentsJoined(by separator: String) -> String
  @available(swift, obsoleted: 3, renamed: "componentsJoined(by:)")
  func componentsJoinedByString(_ separator: String) -> String
  func contains(_ anObject: Any) -> Bool
  @available(swift, obsoleted: 3, renamed: "contains(_:)")
  func containsObject(_ anObject: Any) -> Bool
  var description: String { get }
  func description(withLocale locale: Any?) -> String
  @available(swift, obsoleted: 3, renamed: "description(withLocale:)")
  func descriptionWithLocale(_ locale: Any?) -> String
  func description(withLocale locale: Any?, indent level: Int) -> String
  @available(swift, obsoleted: 3, renamed: "description(withLocale:indent:)")
  func descriptionWithLocale(_ locale: Any?, indent level: Int) -> String
  func firstObjectCommon(with otherArray: [Any]) -> Any?
  @available(swift, obsoleted: 3, renamed: "firstObjectCommon(with:)")
  func firstObjectCommonWithArray(_ otherArray: [Any]) -> Any?
  @available(*, unavailable, message: "Use 'subarrayWithRange()' instead")
  func getObjects(_ objects: AutoreleasingUnsafeMutablePointer<AnyObject>, range: NSRange)
  func index(of anObject: Any) -> Int
  @available(swift, obsoleted: 3, renamed: "index(of:)")
  func indexOfObject(_ anObject: Any) -> Int
  func index(of anObject: Any, in range: NSRange) -> Int
  @available(swift, obsoleted: 3, renamed: "index(of:in:)")
  func indexOfObject(_ anObject: Any, inRange range: NSRange) -> Int
  func indexOfObjectIdentical(to anObject: Any) -> Int
  @available(swift, obsoleted: 3, renamed: "indexOfObjectIdentical(to:)")
  func indexOfObjectIdenticalTo(_ anObject: Any) -> Int
  func indexOfObjectIdentical(to anObject: Any, in range: NSRange) -> Int
  @available(swift, obsoleted: 3, renamed: "indexOfObjectIdentical(to:in:)")
  func indexOfObjectIdenticalTo(_ anObject: Any, inRange range: NSRange) -> Int
  func isEqual(to otherArray: [Any]) -> Bool
  @available(swift, obsoleted: 3, renamed: "isEqual(to:)")
  func isEqualToArray(_ otherArray: [Any]) -> Bool
  @available(iOS 4.0, *)
  var firstObject: Any? { get }
  var lastObject: Any? { get }
  func objectEnumerator() -> NSEnumerator
  func reverseObjectEnumerator() -> NSEnumerator
  var sortedArrayHint: Data { get }
  func sortedArray(_ comparator: @convention(c) (Any, Any, UnsafeMutableRawPointer?) -> Int, context: UnsafeMutableRawPointer?) -> [Any]
  @available(swift, obsoleted: 3, renamed: "sortedArray(_:context:)")
  func sortedArrayUsingFunction(_ comparator: @convention(c) (Any, Any, UnsafeMutableRawPointer?) -> Int, context: UnsafeMutableRawPointer?) -> [Any]
  func sortedArray(_ comparator: @convention(c) (Any, Any, UnsafeMutableRawPointer?) -> Int, context: UnsafeMutableRawPointer?, hint: Data?) -> [Any]
  @available(swift, obsoleted: 3, renamed: "sortedArray(_:context:hint:)")
  func sortedArrayUsingFunction(_ comparator: @convention(c) (Any, Any, UnsafeMutableRawPointer?) -> Int, context: UnsafeMutableRawPointer?, hint: Data?) -> [Any]
  func sortedArray(using comparator: Selector) -> [Any]
  @available(swift, obsoleted: 3, renamed: "sortedArray(using:)")
  func sortedArrayUsingSelector(_ comparator: Selector) -> [Any]
  func subarray(with range: NSRange) -> [Any]
  @available(swift, obsoleted: 3, renamed: "subarray(with:)")
  func subarrayWithRange(_ range: NSRange) -> [Any]
  @available(iOS 11.0, *)
  func write(to url: URL) throws
  @available(iOS 11.0, *)
  @available(swift, obsoleted: 3, renamed: "write(to:)")
  func writeToURL(_ url: URL) throws
  @available(*, unavailable, message: "Use enumerateObjectsUsingBlock: or a for loop instead")
  func makeObjectsPerform(_ aSelector: Selector)
  @available(swift, obsoleted: 3, renamed: "makeObjectsPerform(_:)")
  @available(*, unavailable, message: "Use enumerateObjectsUsingBlock: or a for loop instead")
  func makeObjectsPerformSelector(_ aSelector: Selector)
  @available(*, unavailable, message: "Use enumerateObjectsUsingBlock: or a for loop instead")
  func makeObjectsPerform(_ aSelector: Selector, with argument: Any?)
  @available(swift, obsoleted: 3, renamed: "makeObjectsPerform(_:with:)")
  @available(*, unavailable, message: "Use enumerateObjectsUsingBlock: or a for loop instead")
  func makeObjectsPerformSelector(_ aSelector: Selector, withObject argument: Any?)
  func objects(at indexes: IndexSet) -> [Any]
  @available(swift, obsoleted: 3, renamed: "objects(at:)")
  func objectsAtIndexes(_ indexes: IndexSet) -> [Any]
  subscript(idx: Int) -> Any { get }
  @available(iOS 6.0, *)
  @available(*, unavailable, message: "use subscripting")
  func objectAtIndexedSubscript(_ idx: Int) -> Any
  @available(iOS 4.0, *)
  func enumerateObjects(_ block: (Any, Int, UnsafeMutablePointer<ObjCBool>) -> Void)
  @available(iOS 4.0, *)
  @available(swift, obsoleted: 3, renamed: "enumerateObjects(_:)")
  func enumerateObjectsUsingBlock(_ block: (Any, Int, UnsafeMutablePointer<ObjCBool>) -> Void)
  @available(iOS 4.0, *)
  func enumerateObjects(options opts: NSEnumerationOptions = [], using block: (Any, Int, UnsafeMutablePointer<ObjCBool>) -> Void)
  @available(iOS 4.0, *)
  @available(swift, obsoleted: 3, renamed: "enumerateObjects(options:using:)")
  func enumerateObjectsWithOptions(_ opts: NSEnumerationOptions = [], usingBlock block: (Any, Int, UnsafeMutablePointer<ObjCBool>) -> Void)
  @available(iOS 4.0, *)
  func enumerateObjects(at s: IndexSet, options opts: NSEnumerationOptions = [], using block: (Any, Int, UnsafeMutablePointer<ObjCBool>) -> Void)
  @available(iOS 4.0, *)
  @available(swift, obsoleted: 3, renamed: "enumerateObjects(at:options:using:)")
  func enumerateObjectsAtIndexes(_ s: IndexSet, options opts: NSEnumerationOptions = [], usingBlock block: (Any, Int, UnsafeMutablePointer<ObjCBool>) -> Void)
  @available(iOS 4.0, *)
  func indexOfObject(passingTest predicate: (Any, Int, UnsafeMutablePointer<ObjCBool>) -> Bool) -> Int
  @available(iOS 4.0, *)
  @available(swift, obsoleted: 3, renamed: "indexOfObject(passingTest:)")
  func indexOfObjectPassingTest(_ predicate: (Any, Int, UnsafeMutablePointer<ObjCBool>) -> Bool) -> Int
  @available(iOS 4.0, *)
  func indexOfObject(options opts: NSEnumerationOptions = [], passingTest predicate: (Any, Int, UnsafeMutablePointer<ObjCBool>) -> Bool) -> Int
  @available(iOS 4.0, *)
  @available(swift, obsoleted: 3, renamed: "indexOfObject(options:passingTest:)")
  func indexOfObjectWithOptions(_ opts: NSEnumerationOptions = [], passingTest predicate: (Any, Int, UnsafeMutablePointer<ObjCBool>) -> Bool) -> Int
  @available(iOS 4.0, *)
  func indexOfObject(at s: IndexSet, options opts: NSEnumerationOptions = [], passingTest predicate: (Any, Int, UnsafeMutablePointer<ObjCBool>) -> Bool) -> Int
  @available(iOS 4.0, *)
  @available(swift, obsoleted: 3, renamed: "indexOfObject(at:options:passingTest:)")
  func indexOfObjectAtIndexes(_ s: IndexSet, options opts: NSEnumerationOptions = [], passingTest predicate: (Any, Int, UnsafeMutablePointer<ObjCBool>) -> Bool) -> Int
  @available(iOS 4.0, *)
  func indexesOfObjects(passingTest predicate: (Any, Int, UnsafeMutablePointer<ObjCBool>) -> Bool) -> IndexSet
  @available(iOS 4.0, *)
  @available(swift, obsoleted: 3, renamed: "indexesOfObjects(passingTest:)")
  func indexesOfObjectsPassingTest(_ predicate: (Any, Int, UnsafeMutablePointer<ObjCBool>) -> Bool) -> IndexSet
  @available(iOS 4.0, *)
  func indexesOfObjects(options opts: NSEnumerationOptions = [], passingTest predicate: (Any, Int, UnsafeMutablePointer<ObjCBool>) -> Bool) -> IndexSet
  @available(iOS 4.0, *)
  @available(swift, obsoleted: 3, renamed: "indexesOfObjects(options:passingTest:)")
  func indexesOfObjectsWithOptions(_ opts: NSEnumerationOptions = [], passingTest predicate: (Any, Int, UnsafeMutablePointer<ObjCBool>) -> Bool) -> IndexSet
  @available(iOS 4.0, *)
  func indexesOfObjects(at s: IndexSet, options opts: NSEnumerationOptions = [], passingTest predicate: (Any, Int, UnsafeMutablePointer<ObjCBool>) -> Bool) -> IndexSet
  @available(iOS 4.0, *)
  @available(swift, obsoleted: 3, renamed: "indexesOfObjects(at:options:passingTest:)")
  func indexesOfObjectsAtIndexes(_ s: IndexSet, options opts: NSEnumerationOptions = [], passingTest predicate: (Any, Int, UnsafeMutablePointer<ObjCBool>) -> Bool) -> IndexSet
  @available(iOS 4.0, *)
  func sortedArray(comparator cmptr: (Any, Any) -> ComparisonResult) -> [Any]
  @available(iOS 4.0, *)
  @available(swift, obsoleted: 3, renamed: "sortedArray(comparator:)")
  func sortedArrayUsingComparator(_ cmptr: (Any, Any) -> ComparisonResult) -> [Any]
  @available(iOS 4.0, *)
  func sortedArray(options opts: NSSortOptions = [], usingComparator cmptr: (Any, Any) -> ComparisonResult) -> [Any]
  @available(iOS 4.0, *)
  @available(swift, obsoleted: 3, renamed: "sortedArray(options:usingComparator:)")
  func sortedArrayWithOptions(_ opts: NSSortOptions = [], usingComparator cmptr: (Any, Any) -> ComparisonResult) -> [Any]
  @available(iOS 4.0, *)
  func index(of obj: Any, inSortedRange r: NSRange, options opts: NSBinarySearchingOptions = [], usingComparator cmp: (Any, Any) -> ComparisonResult) -> Int
  @available(iOS 4.0, *)
  @available(swift, obsoleted: 3, renamed: "index(of:inSortedRange:options:usingComparator:)")
  func indexOfObject(_ obj: Any, inSortedRange r: NSRange, options opts: NSBinarySearchingOptions = [], usingComparator cmp: (Any, Any) -> ComparisonResult) -> Int
}
typealias NSBinarySearchingOptions = Int
var NSBinarySearchingFirstEqual: Int { get }
var NSBinarySearchingLastEqual: Int { get }
var NSBinarySearchingInsertionIndex: Int { get }
extension NSArray {
  @available(*, unavailable, renamed: "init()", message: "Not available in Swift")
  class func array() -> Self
  convenience init(object anObject: Any)
  @available(*, unavailable, renamed: "init(object:)", message: "Not available in Swift")
  class func arrayWithObject(_ anObject: Any) -> Self
  convenience init(objects: UnsafePointer<AnyObject>, count cnt: Int)
  @available(*, unavailable, renamed: "init(objects:count:)", message: "Not available in Swift")
  class func arrayWithObjects(_ objects: UnsafePointer<AnyObject>, count cnt: Int) -> Self
  @available(*, unavailable, message: "superseded by import of -[NSArray(NSArrayCreation) initWithArray:]")
  convenience init(array: [Any])
  @available(*, unavailable, renamed: "init(array:)", message: "Not available in Swift")
  class func arrayWithArray(_ array: [Any]) -> Self
  convenience init(array: [Any])
  convenience init(array: [Any], copyItems flag: Bool)
  @available(iOS 11.0, *)
  convenience init(contentsOf url: URL, error: ()) throws
  @available(iOS 11.0, *)
  @available(swift, obsoleted: 3, renamed: "init(contentsOf:error:)")
  convenience init(contentsOfURL url: URL, error: ()) throws
  @available(iOS 11.0, *)
  @available(swift, obsoleted: 3, renamed: "init(contentsOf:error:)")
  @available(*, unavailable, message: "Use initializer instead")
  /*not inherited*/ init(contentsOfURL url: URL, error: ()) throws
  @available(iOS 11.0, *)
  @available(*, unavailable, renamed: "init(contentsOf:error:)", message: "Not available in Swift")
  @available(*, unavailable, message: "Use initializer instead")
  class func arrayWithContentsOfURL(_ url: URL, error: ()) throws -> [Any]
}
@available(iOS 13.0, *)
@available(*, unavailable, message: "NSArray diffing methods are not available in Swift, use Collection.difference(from:) instead")
extension NSArray {
  func difference(from other: [Any], withOptions options: NSOrderedCollectionDifferenceCalculationOptions = [], usingEquivalenceTest block: (Any, Any) -> Bool) -> CollectionDifference<Any>
  @available(swift, obsoleted: 3, renamed: "difference(from:withOptions:usingEquivalenceTest:)")
  func differenceFromArray(_ other: [Any], withOptions options: NSOrderedCollectionDifferenceCalculationOptions = [], usingEquivalenceTest block: (Any, Any) -> Bool) -> CollectionDifference<Any>
  func difference(from other: [Any], withOptions options: NSOrderedCollectionDifferenceCalculationOptions = []) -> CollectionDifference<Any>
  @available(swift, obsoleted: 3, renamed: "difference(from:withOptions:)")
  func differenceFromArray(_ other: [Any], withOptions options: NSOrderedCollectionDifferenceCalculationOptions = []) -> CollectionDifference<Any>
  func difference(from other: [Any]) -> CollectionDifference<Any>
  @available(swift, obsoleted: 3, renamed: "difference(from:)")
  func differenceFromArray(_ other: [Any]) -> CollectionDifference<Any>
  func applying(_ difference: CollectionDifference<Any>) -> [Any]?
  @available(swift, obsoleted: 3, renamed: "applying(_:)")
  func arrayByApplyingDifference(_ difference: CollectionDifference<Any>) -> [Any]?
}
extension NSArray {
  @available(*, unavailable, message: "Use 'as [AnyObject]' instead")
  @available(iOS, introduced: 2.0, deprecated: 11.0, message: "Use -getObjects:range: instead")
  func getObjects(_ objects: AutoreleasingUnsafeMutablePointer<AnyObject>)
  @available(iOS, introduced: 2.0, deprecated: 100000)
  @available(*, unavailable, message: "superseded by import of -[NSArray(NSDeprecated) initWithContentsOfFile:]")
  /*not inherited*/ init?(contentsOfFile path: String)
  @available(*, unavailable, renamed: "init(contentsOfFile:)", message: "Not available in Swift")
  @available(iOS, introduced: 2.0, deprecated: 100000)
  class func arrayWithContentsOfFile(_ path: String) -> [Any]?
  @available(iOS, introduced: 2.0, deprecated: 100000)
  @available(*, unavailable, message: "superseded by import of -[NSArray(NSDeprecated) initWithContentsOfURL:]")
  /*not inherited*/ init?(contentsOf url: URL)
  @available(swift, obsoleted: 3, renamed: "init(contentsOf:)")
  @available(iOS, introduced: 2.0, deprecated: 100000)
  /*not inherited*/ init?(contentsOfURL url: URL)
  @available(*, unavailable, renamed: "init(contentsOf:)", message: "Not available in Swift")
  @available(iOS, introduced: 2.0, deprecated: 100000)
  class func arrayWithContentsOfURL(_ url: URL) -> [Any]?
  @available(iOS, introduced: 2.0, deprecated: 100000)
  convenience init?(contentsOfFile path: String)
  @available(iOS, introduced: 2.0, deprecated: 100000)
  convenience init?(contentsOf url: URL)
  @available(swift, obsoleted: 3, renamed: "init(contentsOf:)")
  @available(iOS, introduced: 2.0, deprecated: 100000)
  convenience init?(contentsOfURL url: URL)
  @available(iOS, introduced: 2.0, deprecated: 100000)
  func write(toFile path: String, atomically useAuxiliaryFile: Bool) -> Bool
  @available(swift, obsoleted: 3, renamed: "write(toFile:atomically:)")
  @available(iOS, introduced: 2.0, deprecated: 100000)
  func writeToFile(_ path: String, atomically useAuxiliaryFile: Bool) -> Bool
  @available(iOS, introduced: 2.0, deprecated: 100000)
  func write(to url: URL, atomically: Bool) -> Bool
  @available(swift, obsoleted: 3, renamed: "write(to:atomically:)")
  @available(iOS, introduced: 2.0, deprecated: 100000)
  func writeToURL(_ url: URL, atomically: Bool) -> Bool
}

/****************	Mutable Array		****************/
class NSMutableArray : NSArray {
  func add(_ anObject: Any)
  @available(swift, obsoleted: 3, renamed: "add(_:)")
  func addObject(_ anObject: Any)
  func insert(_ anObject: Any, at index: Int)
  @available(swift, obsoleted: 3, renamed: "insert(_:at:)")
  func insertObject(_ anObject: Any, atIndex index: Int)
  func removeLastObject()
  func removeObject(at index: Int)
  @available(swift, obsoleted: 3, renamed: "removeObject(at:)")
  func removeObjectAtIndex(_ index: Int)
  func replaceObject(at index: Int, with anObject: Any)
  @available(swift, obsoleted: 3, renamed: "replaceObject(at:with:)")
  func replaceObjectAtIndex(_ index: Int, withObject anObject: Any)
  init()
  init(capacity numItems: Int)
  init?(coder: NSCoder)
  convenience init(objects: UnsafePointer<AnyObject>?, count cnt: Int)
  convenience init(object anObject: Any)
  convenience init(objects: UnsafePointer<AnyObject>, count cnt: Int)
  @available(*, unavailable, message: "superseded by import of -[NSArray(NSArrayCreation) initWithArray:]")
  convenience init(array: [Any])
  convenience init(array: [Any])
  convenience init(array: [Any], copyItems flag: Bool)
  @available(iOS 11.0, *)
  convenience init(contentsOf url: URL, error: ()) throws
  @available(iOS, introduced: 2.0, deprecated: 100000)
  convenience init?(contentsOfFile path: String)
  @available(iOS, introduced: 2.0, deprecated: 100000)
  convenience init?(contentsOf url: URL)
}
extension NSMutableArray {
  func addObjects(from otherArray: [Any])
  @available(swift, obsoleted: 3, renamed: "addObjects(from:)")
  func addObjectsFromArray(_ otherArray: [Any])
  func exchangeObject(at idx1: Int, withObjectAt idx2: Int)
  @available(swift, obsoleted: 3, renamed: "exchangeObject(at:withObjectAt:)")
  func exchangeObjectAtIndex(_ idx1: Int, withObjectAtIndex idx2: Int)
  func removeAllObjects()
  func remove(_ anObject: Any, in range: NSRange)
  @available(swift, obsoleted: 3, renamed: "remove(_:in:)")
  func removeObject(_ anObject: Any, inRange range: NSRange)
  func remove(_ anObject: Any)
  @available(swift, obsoleted: 3, renamed: "remove(_:)")
  func removeObject(_ anObject: Any)
  func removeObject(identicalTo anObject: Any, in range: NSRange)
  @available(swift, obsoleted: 3, renamed: "removeObject(identicalTo:in:)")
  func removeObjectIdenticalTo(_ anObject: Any, inRange range: NSRange)
  func removeObject(identicalTo anObject: Any)
  @available(swift, obsoleted: 3, renamed: "removeObject(identicalTo:)")
  func removeObjectIdenticalTo(_ anObject: Any)
  @available(iOS, unavailable, introduced: 2.0, deprecated: 4.0, message: "Not supported")
  func removeObjects(fromIndices indices: UnsafeMutablePointer<Int>, numIndices cnt: Int)
  @available(swift, obsoleted: 3, renamed: "removeObjects(fromIndices:numIndices:)")
  @available(iOS, unavailable, introduced: 2.0, deprecated: 4.0, message: "Not supported")
  func removeObjectsFromIndices(_ indices: UnsafeMutablePointer<Int>, numIndices cnt: Int)
  func removeObjects(in otherArray: [Any])
  @available(swift, obsoleted: 3, renamed: "removeObjects(in:)")
  func removeObjectsInArray(_ otherArray: [Any])
  func removeObjects(in range: NSRange)
  @available(swift, obsoleted: 3, renamed: "removeObjects(in:)")
  func removeObjectsInRange(_ range: NSRange)
  func replaceObjects(in range: NSRange, withObjectsFrom otherArray: [Any], range otherRange: NSRange)
  @available(swift, obsoleted: 3, renamed: "replaceObjects(in:withObjectsFrom:range:)")
  func replaceObjectsInRange(_ range: NSRange, withObjectsFromArray otherArray: [Any], range otherRange: NSRange)
  func replaceObjects(in range: NSRange, withObjectsFrom otherArray: [Any])
  @available(swift, obsoleted: 3, renamed: "replaceObjects(in:withObjectsFrom:)")
  func replaceObjectsInRange(_ range: NSRange, withObjectsFromArray otherArray: [Any])
  func setArray(_ otherArray: [Any])
  func sort(_ compare: @convention(c) (Any, Any, UnsafeMutableRawPointer?) -> Int, context: UnsafeMutableRawPointer?)
  @available(swift, obsoleted: 3, renamed: "sort(_:context:)")
  func sortUsingFunction(_ compare: @convention(c) (Any, Any, UnsafeMutableRawPointer?) -> Int, context: UnsafeMutableRawPointer?)
  func sort(using comparator: Selector)
  @available(swift, obsoleted: 3, renamed: "sort(using:)")
  func sortUsingSelector(_ comparator: Selector)
  func insert(_ objects: [Any], at indexes: IndexSet)
  @available(swift, obsoleted: 3, renamed: "insert(_:at:)")
  func insertObjects(_ objects: [Any], atIndexes indexes: IndexSet)
  func removeObjects(at indexes: IndexSet)
  @available(swift, obsoleted: 3, renamed: "removeObjects(at:)")
  func removeObjectsAtIndexes(_ indexes: IndexSet)
  func replaceObjects(at indexes: IndexSet, with objects: [Any])
  @available(swift, obsoleted: 3, renamed: "replaceObjects(at:with:)")
  func replaceObjectsAtIndexes(_ indexes: IndexSet, withObjects objects: [Any])
  subscript(idx: Int) -> Any
  @available(iOS 6.0, *)
  @available(*, unavailable, message: "use subscripting")
  func setObject(_ obj: Any, atIndexedSubscript idx: Int)
  @available(iOS 4.0, *)
  func sort(comparator cmptr: (Any, Any) -> ComparisonResult)
  @available(iOS 4.0, *)
  @available(swift, obsoleted: 3, renamed: "sort(comparator:)")
  func sortUsingComparator(_ cmptr: (Any, Any) -> ComparisonResult)
  @available(iOS 4.0, *)
  func sort(options opts: NSSortOptions = [], usingComparator cmptr: (Any, Any) -> ComparisonResult)
  @available(iOS 4.0, *)
  @available(swift, obsoleted: 3, renamed: "sort(options:usingComparator:)")
  func sortWithOptions(_ opts: NSSortOptions = [], usingComparator cmptr: (Any, Any) -> ComparisonResult)
}
extension NSMutableArray {
  @available(*, unavailable, renamed: "init(capacity:)", message: "Not available in Swift")
  class func arrayWithCapacity(_ numItems: Int) -> Self
  @available(*, unavailable, renamed: "init(contentsOfFile:)", message: "Not available in Swift")
  class func arrayWithContentsOfFile(_ path: String) -> NSMutableArray?
  @available(swift, obsoleted: 3, renamed: "init(contentsOf:)")
  /*not inherited*/ init?(contentsOfURL url: URL)
  @available(*, unavailable, renamed: "init(contentsOf:)", message: "Not available in Swift")
  class func arrayWithContentsOfURL(_ url: URL) -> NSMutableArray?
  @available(swift, obsoleted: 3, renamed: "init(contentsOf:)")
  convenience init?(contentsOfURL url: URL)
}
@available(iOS 13.0, *)
@available(*, unavailable, message: "NSMutableArray diffing methods are not available in Swift")
extension NSMutableArray {
  func apply(_ difference: CollectionDifference<Any>)
  @available(swift, obsoleted: 3, renamed: "apply(_:)")
  func applyDifference(_ difference: CollectionDifference<Any>)
}
