@_exported import CoreFoundation

@available(swift, obsoleted: 3, renamed: "NotificationQueue.PostingStyle")
typealias NSPostingStyle = NotificationQueue.PostingStyle
extension NotificationQueue {
  enum PostingStyle : UInt, @unchecked Sendable {
    init?(rawValue: UInt)
    var rawValue: UInt { get }
    typealias RawValue = UInt
    case whenIdle
    @available(swift, obsoleted: 3, renamed: "whenIdle")
    static var NSPostWhenIdle: NotificationQueue.PostingStyle { get }
    case asap
    @available(swift, obsoleted: 3, renamed: "asap")
    static var NSPostASAP: NotificationQueue.PostingStyle { get }
    case now
    @available(swift, obsoleted: 3, renamed: "now")
    static var NSPostNow: NotificationQueue.PostingStyle { get }
  }
}
typealias NSNotificationCoalescing = Int
@available(swift, obsoleted: 3, renamed: "none")
var NSNotificationNoCoalescing: Int { get }
var none: Int { get }
@available(swift, obsoleted: 3, renamed: "onName")
var NSNotificationCoalescingOnName: Int { get }
var onName: Int { get }
@available(swift, obsoleted: 3, renamed: "onSender")
var NSNotificationCoalescingOnSender: Int { get }
var onSender: Int { get }
@available(swift, obsoleted: 3, renamed: "NotificationQueue")
typealias NSNotificationQueue = NotificationQueue
class NotificationQueue : NSObject {
  class var `default`: NotificationQueue { get }
  @available(swift, obsoleted: 3, renamed: "default")
  class var defaultQueue: NotificationQueue { get }
  init(notificationCenter: NotificationCenter)
  func enqueue(_ notification: Notification, postingStyle: NotificationQueue.PostingStyle)
  @available(swift, obsoleted: 3, renamed: "enqueue(_:postingStyle:)")
  func enqueueNotification(_ notification: Notification, postingStyle: NotificationQueue.PostingStyle)
  func enqueue(_ notification: Notification, postingStyle: NotificationQueue.PostingStyle, coalesceMask: NSNotificationCoalescing, forModes modes: [RunLoop.Mode]?)
  @available(swift, obsoleted: 3, renamed: "enqueue(_:postingStyle:coalesceMask:forModes:)")
  func enqueueNotification(_ notification: Notification, postingStyle: NotificationQueue.PostingStyle, coalesceMask: NSNotificationCoalescing, forModes modes: [RunLoop.Mode]?)
  func dequeueNotifications(matching notification: Notification, coalesceMask: Int)
  @available(swift, obsoleted: 3, renamed: "dequeueNotifications(matching:coalesceMask:)")
  func dequeueNotificationsMatching(_ notification: Notification, coalesceMask: Int)
  convenience init()
}
