@_exported import CoreFoundation

@available(iOS 6.0, *)
class NSPointerArray : NSObject, NSFastEnumeration, NSCopying, NSSecureCoding {
  init(options: NSPointerFunctionsOptions = [])
  init(pointerFunctions functions: NSPointerFunctions)
  @available(*, unavailable, renamed: "init(options:)", message: "Not available in Swift")
  class func pointerArrayWithOptions(_ options: NSPointerFunctionsOptions = []) -> NSPointerArray
  @available(*, unavailable, renamed: "init(pointerFunctions:)", message: "Not available in Swift")
  class func pointerArrayWithPointerFunctions(_ functions: NSPointerFunctions) -> NSPointerArray
  @NSCopying var pointerFunctions: NSPointerFunctions { get }
  func pointer(at index: Int) -> UnsafeMutableRawPointer?
  @available(swift, obsoleted: 3, renamed: "pointer(at:)")
  func pointerAtIndex(_ index: Int) -> UnsafeMutableRawPointer?
  func addPointer(_ pointer: UnsafeMutableRawPointer?)
  func removePointer(at index: Int)
  @available(swift, obsoleted: 3, renamed: "removePointer(at:)")
  func removePointerAtIndex(_ index: Int)
  func insertPointer(_ item: UnsafeMutableRawPointer?, at index: Int)
  @available(swift, obsoleted: 3, renamed: "insertPointer(_:at:)")
  func insertPointer(_ item: UnsafeMutableRawPointer?, atIndex index: Int)
  func replacePointer(at index: Int, withPointer item: UnsafeMutableRawPointer?)
  @available(swift, obsoleted: 3, renamed: "replacePointer(at:withPointer:)")
  func replacePointerAtIndex(_ index: Int, withPointer item: UnsafeMutableRawPointer?)
  func compact()
  var count: Int
  convenience init()
  @available(iOS 6.0, *)
  class var supportsSecureCoding: Bool { get }
  @available(iOS 6.0, *)
  func countByEnumerating(with state: UnsafeMutablePointer<NSFastEnumerationState>, objects buffer: AutoreleasingUnsafeMutablePointer<AnyObject?>, count len: Int) -> Int
  @available(iOS 6.0, *)
  func copy(with zone: NSZone? = nil) -> Any
  @available(iOS 6.0, *)
  func encode(with coder: NSCoder)
  init?(coder: NSCoder)
}
extension NSPointerArray {
  @available(iOS 6.0, *)
  class func strongObjects() -> NSPointerArray
  @available(iOS 6.0, *)
  @available(swift, obsoleted: 3, renamed: "strongObjects()")
  class func strongObjectsPointerArray() -> NSPointerArray
  @available(iOS 6.0, *)
  class func weakObjects() -> NSPointerArray
  @available(iOS 6.0, *)
  @available(swift, obsoleted: 3, renamed: "weakObjects()")
  class func weakObjectsPointerArray() -> NSPointerArray
  var allObjects: [Any] { get }
}
