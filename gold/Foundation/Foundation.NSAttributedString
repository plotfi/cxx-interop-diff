@_exported import CoreFoundation

@available(swift, obsoleted: 4.2, renamed: "NSAttributedString.Key")
typealias NSAttributedStringKey = NSAttributedString.Key
extension NSAttributedString {
  struct Key : _ObjectiveCBridgeable, Hashable, Equatable, _SwiftNewtypeWrapper, RawRepresentable, @unchecked Sendable {
    init(_ rawValue: String)
    init(rawValue: String)
    var _rawValue: NSString
    var rawValue: String { get }
    typealias RawValue = String
    typealias _ObjectiveCType = NSString
  }
}
@available(iOS 3.2, *)
class NSAttributedString : NSObject, NSCopying, NSMutableCopying, NSSecureCoding {
  var string: String { get }
  func attributes(at location: Int, effectiveRange range: NSRangePointer?) -> [NSAttributedString.Key : Any]
  @available(swift, obsoleted: 3, renamed: "attributes(at:effectiveRange:)")
  func attributesAtIndex(_ location: Int, effectiveRange range: NSRangePointer?) -> [NSAttributedString.Key : Any]
  init()
  @available(iOS 3.2, *)
  class var supportsSecureCoding: Bool { get }
  @available(iOS 3.2, *)
  func copy(with zone: NSZone? = nil) -> Any
  @available(iOS 3.2, *)
  func mutableCopy(with zone: NSZone? = nil) -> Any
  @available(iOS 3.2, *)
  func encode(with coder: NSCoder)
  init?(coder: NSCoder)
}

@available(macOS 12, iOS 15, tvOS 15, watchOS 8, *)
extension NSAttributedString {
  convenience init(contentsOf url: URL, options: AttributedString.MarkdownParsingOptions = .init(), baseURL: URL? = nil) throws
  convenience init(markdown: Data, options: AttributedString.MarkdownParsingOptions = .init(), baseURL: URL? = nil) throws
  convenience init(markdown: String, options: AttributedString.MarkdownParsingOptions = .init(), baseURL: URL? = nil) throws
}

@available(macOS 12, iOS 15, tvOS 15, watchOS 8, *)
extension NSAttributedString {
  convenience init(_ attrStr: AttributedString)
  convenience init<S>(_ attrStr: AttributedString, including scope: KeyPath<AttributeScopes, S.Type>) throws where S : AttributeScope
  convenience init<S>(_ attrStr: AttributedString, including scope: S.Type) throws where S : AttributeScope
}
extension NSAttributedString {
  var length: Int { get }
  func attribute(_ attrName: NSAttributedString.Key, at location: Int, effectiveRange range: NSRangePointer?) -> Any?
  @available(swift, obsoleted: 3, renamed: "attribute(_:at:effectiveRange:)")
  func attribute(_ attrName: NSAttributedString.Key, atIndex location: Int, effectiveRange range: NSRangePointer?) -> Any?
  func attributedSubstring(from range: NSRange) -> NSAttributedString
  @available(swift, obsoleted: 3, renamed: "attributedSubstring(from:)")
  func attributedSubstringFromRange(_ range: NSRange) -> NSAttributedString
  func attributes(at location: Int, longestEffectiveRange range: NSRangePointer?, in rangeLimit: NSRange) -> [NSAttributedString.Key : Any]
  @available(swift, obsoleted: 3, renamed: "attributes(at:longestEffectiveRange:in:)")
  func attributesAtIndex(_ location: Int, longestEffectiveRange range: NSRangePointer?, inRange rangeLimit: NSRange) -> [NSAttributedString.Key : Any]
  func attribute(_ attrName: NSAttributedString.Key, at location: Int, longestEffectiveRange range: NSRangePointer?, in rangeLimit: NSRange) -> Any?
  @available(swift, obsoleted: 3, renamed: "attribute(_:at:longestEffectiveRange:in:)")
  func attribute(_ attrName: NSAttributedString.Key, atIndex location: Int, longestEffectiveRange range: NSRangePointer?, inRange rangeLimit: NSRange) -> Any?
  func isEqual(to other: NSAttributedString) -> Bool
  @available(swift, obsoleted: 3, renamed: "isEqual(to:)")
  func isEqualToAttributedString(_ other: NSAttributedString) -> Bool
  init(string str: String)
  init(string str: String, attributes attrs: [NSAttributedString.Key : Any]? = nil)
  init(attributedString attrStr: NSAttributedString)
  @available(iOS 4.0, *)
  func enumerateAttributes(in enumerationRange: NSRange, options opts: NSAttributedStringEnumerationOptions = [], using block: ([NSAttributedString.Key : Any], NSRange, UnsafeMutablePointer<ObjCBool>) -> Void)
  @available(iOS 4.0, *)
  @available(swift, obsoleted: 3, renamed: "enumerateAttributes(in:options:using:)")
  func enumerateAttributesInRange(_ enumerationRange: NSRange, options opts: NSAttributedStringEnumerationOptions = [], usingBlock block: ([NSAttributedString.Key : Any], NSRange, UnsafeMutablePointer<ObjCBool>) -> Void)
  @available(iOS 4.0, *)
  func enumerateAttribute(_ attrName: NSAttributedString.Key, in enumerationRange: NSRange, options opts: NSAttributedStringEnumerationOptions = [], using block: (Any?, NSRange, UnsafeMutablePointer<ObjCBool>) -> Void)
  @available(iOS 4.0, *)
  @available(swift, obsoleted: 3, renamed: "enumerateAttribute(_:in:options:using:)")
  func enumerateAttribute(_ attrName: NSAttributedString.Key, inRange enumerationRange: NSRange, options opts: NSAttributedStringEnumerationOptions = [], usingBlock block: (Any?, NSRange, UnsafeMutablePointer<ObjCBool>) -> Void)
}
typealias NSAttributedStringEnumerationOptions = Int
var NSAttributedStringEnumerationReverse: Int { get }
var NSAttributedStringEnumerationLongestEffectiveRangeNotRequired: Int { get }
@available(iOS 3.2, *)
class NSMutableAttributedString : NSAttributedString {
  func replaceCharacters(in range: NSRange, with str: String)
  @available(swift, obsoleted: 3, renamed: "replaceCharacters(in:with:)")
  func replaceCharactersInRange(_ range: NSRange, withString str: String)
  func setAttributes(_ attrs: [NSAttributedString.Key : Any]?, range: NSRange)
  init()
  init?(coder: NSCoder)
  init(string str: String)
  init(string str: String, attributes attrs: [NSAttributedString.Key : Any]? = nil)
  init(attributedString attrStr: NSAttributedString)
  @available(iOS 15.0, *)
  init(__contentsOfMarkdownFileAt markdownFile: URL, options: __NSAttributedStringMarkdownParsingOptions?, baseURL: URL?) throws
  @available(iOS 15.0, *)
  init(__markdown markdown: Data, options: __NSAttributedStringMarkdownParsingOptions?, baseURL: URL?) throws
  @available(iOS 15.0, *)
  init(__markdownString markdownString: String, options: __NSAttributedStringMarkdownParsingOptions?, baseURL: URL?) throws

  /// Formats the string using the arguments list and the specified locale (or the canonical one, if nil).
  @available(iOS 15.0, *)
  init(__format format: NSAttributedString, options: NSAttributedStringFormattingOptions = [], locale: Locale?, arguments: CVaListPointer)
}
extension NSMutableAttributedString {
  var mutableString: NSMutableString { get }
  func addAttribute(_ name: NSAttributedString.Key, value: Any, range: NSRange)
  func addAttributes(_ attrs: [NSAttributedString.Key : Any] = [:], range: NSRange)
  func removeAttribute(_ name: NSAttributedString.Key, range: NSRange)
  func replaceCharacters(in range: NSRange, with attrString: NSAttributedString)
  @available(swift, obsoleted: 3, renamed: "replaceCharacters(in:with:)")
  func replaceCharactersInRange(_ range: NSRange, withAttributedString attrString: NSAttributedString)
  func insert(_ attrString: NSAttributedString, at loc: Int)
  @available(swift, obsoleted: 3, renamed: "insert(_:at:)")
  func insertAttributedString(_ attrString: NSAttributedString, atIndex loc: Int)
  func append(_ attrString: NSAttributedString)
  @available(swift, obsoleted: 3, renamed: "append(_:)")
  func appendAttributedString(_ attrString: NSAttributedString)
  func deleteCharacters(in range: NSRange)
  @available(swift, obsoleted: 3, renamed: "deleteCharacters(in:)")
  func deleteCharactersInRange(_ range: NSRange)
  func setAttributedString(_ attrString: NSAttributedString)
  func beginEditing()
  func endEditing()
}
typealias NSInlinePresentationIntent = Int
var NSInlinePresentationIntentEmphasized: Int { get }
var NSInlinePresentationIntentStronglyEmphasized: Int { get }
var NSInlinePresentationIntentCode: Int { get }
var NSInlinePresentationIntentStrikethrough: Int { get }
var NSInlinePresentationIntentSoftBreak: Int { get }
var NSInlinePresentationIntentLineBreak: Int { get }
var NSInlinePresentationIntentInlineHTML: Int { get }
var NSInlinePresentationIntentBlockHTML: Int { get }
@available(iOS 15.0, *)
@available(swift, obsoleted: 3, renamed: "NSAttributedString.Key.inlinePresentationIntent")
let NSInlinePresentationIntentAttributeName: NSAttributedString.Key
extension NSAttributedString.Key {
  @available(iOS 15.0, *)
  static let inlinePresentationIntent: NSAttributedString.Key
  @available(iOS 15.0, *)
  static let alternateDescription: NSAttributedString.Key
  @available(iOS 15.0, *)
  static let imageURL: NSAttributedString.Key
  @available(iOS 15.0, *)
  static let languageIdentifier: NSAttributedString.Key
  @available(iOS 15.0, *)
  static let replacementIndex: NSAttributedString.Key
  @available(iOS 15.0, *)
  static let morphology: NSAttributedString.Key
  @available(iOS 15.0, *)
  static let inflectionRule: NSAttributedString.Key
  @available(iOS 15.0, *)
  static let inflectionAlternative: NSAttributedString.Key
  @available(iOS 15.0, *)
  static let presentationIntentAttributeName: NSAttributedString.Key
}
@available(iOS 15.0, *)
@available(swift, obsoleted: 3, renamed: "NSAttributedString.Key.alternateDescription")
let NSAlternateDescriptionAttributeName: NSAttributedString.Key
@available(iOS 15.0, *)
@available(swift, obsoleted: 3, renamed: "NSAttributedString.Key.imageURL")
let NSImageURLAttributeName: NSAttributedString.Key
@available(iOS 15.0, *)
@available(swift, obsoleted: 3, renamed: "NSAttributedString.Key.languageIdentifier")
let NSLanguageIdentifierAttributeName: NSAttributedString.Key
@available(iOS 15.0, *)
enum __NSAttributedStringMarkdownParsingFailurePolicy : Int, @unchecked Sendable {
  init?(rawValue: Int)
  var rawValue: Int { get }
  typealias RawValue = Int
  case returnError
  @available(swift, obsoleted: 3, renamed: "returnError")
  static var ReturnError: __NSAttributedStringMarkdownParsingFailurePolicy { get }
  case returnPartiallyParsedIfPossible
  @available(swift, obsoleted: 3, renamed: "returnPartiallyParsedIfPossible")
  static var ReturnPartiallyParsedIfPossible: __NSAttributedStringMarkdownParsingFailurePolicy { get }
}
@available(iOS 15.0, *)
enum __NSAttributedStringMarkdownInterpretedSyntax : Int, @unchecked Sendable {
  init?(rawValue: Int)
  var rawValue: Int { get }
  typealias RawValue = Int
  case full
  @available(swift, obsoleted: 3, renamed: "full")
  static var Full: __NSAttributedStringMarkdownInterpretedSyntax { get }
  case inlineOnly
  @available(swift, obsoleted: 3, renamed: "inlineOnly")
  static var InlineOnly: __NSAttributedStringMarkdownInterpretedSyntax { get }
  case inlineOnlyPreservingWhitespace
  @available(swift, obsoleted: 3, renamed: "inlineOnlyPreservingWhitespace")
  static var InlineOnlyPreservingWhitespace: __NSAttributedStringMarkdownInterpretedSyntax { get }
}
@available(iOS 15.0, *)
class __NSAttributedStringMarkdownParsingOptions : NSObject, NSCopying {
  init()
  var allowsExtendedAttributes: Bool
  var interpretedSyntax: __NSAttributedStringMarkdownInterpretedSyntax
  var failurePolicy: __NSAttributedStringMarkdownParsingFailurePolicy
  var languageCode: String?
  @available(iOS 15.0, *)
  func copy(with zone: NSZone? = nil) -> Any
}
extension NSAttributedString {
  @available(iOS 15.0, *)
  init(__contentsOfMarkdownFileAt markdownFile: URL, options: __NSAttributedStringMarkdownParsingOptions?, baseURL: URL?) throws
  @available(iOS 15.0, *)
  @available(swift, obsoleted: 3, renamed: "init(__contentsOfMarkdownFileAt:options:baseURL:)")
  init(__contentsOfMarkdownFileAtURL markdownFile: URL, options: __NSAttributedStringMarkdownParsingOptions?, baseURL: URL?) throws
  @available(iOS 15.0, *)
  init(__markdown markdown: Data, options: __NSAttributedStringMarkdownParsingOptions?, baseURL: URL?) throws
  @available(iOS 15.0, *)
  init(__markdownString markdownString: String, options: __NSAttributedStringMarkdownParsingOptions?, baseURL: URL?) throws
}
typealias NSAttributedStringFormattingOptions = Int
@available(iOS 15.0, *)
var __NSAttributedStringFormattingInsertArgumentAttributesWithoutMerging: Int { get }
@available(iOS 15.0, *)
var __NSAttributedStringFormattingApplyReplacementIndexAttribute: Int { get }
extension NSAttributedString {

  /// Formats the string using the arguments list and the specified locale (or the canonical one, if nil).
  @available(iOS 15.0, *)
  init(__format format: NSAttributedString, options: NSAttributedStringFormattingOptions = [], locale: Locale?, arguments: CVaListPointer)
}
extension NSMutableAttributedString {
}
@available(iOS 15.0, *)
@available(swift, obsoleted: 3, renamed: "NSAttributedString.Key.replacementIndex")
let NSReplacementIndexAttributeName: NSAttributedString.Key
extension NSAttributedString {

  /// If the string has portions tagged with NSInflectionRuleAttributeName
  /// that have no format specifiers, create a new string with those portions inflected
  /// by following the rule in the attribute.
  @available(iOS 15.0, *)
  func inflecting() -> NSAttributedString

  /// If the string has portions tagged with NSInflectionRuleAttributeName
  /// that have no format specifiers, create a new string with those portions inflected
  /// by following the rule in the attribute.
  @available(iOS 15.0, *)
  @available(swift, obsoleted: 3, renamed: "inflecting()")
  func attributedStringByInflectingString() -> NSAttributedString
}
@available(iOS 15.0, *)
@available(swift, obsoleted: 3, renamed: "NSAttributedString.Key.morphology")
let NSMorphologyAttributeName: NSAttributedString.Key
@available(iOS 15.0, *)
@available(swift, obsoleted: 3, renamed: "NSAttributedString.Key.inflectionRule")
let NSInflectionRuleAttributeName: NSAttributedString.Key
@available(iOS 15.0, *)
@available(swift, obsoleted: 3, renamed: "NSAttributedString.Key.inflectionAlternative")
let NSInflectionAlternativeAttributeName: NSAttributedString.Key
@available(iOS 15.0, *)
@available(swift, obsoleted: 3, renamed: "NSAttributedString.Key.presentationIntentAttributeName")
let NSPresentationIntentAttributeName: NSAttributedString.Key
@available(iOS 15.0, *)
enum __NSPresentationIntentKind : Int, @unchecked Sendable {
  init?(rawValue: Int)
  var rawValue: Int { get }
  typealias RawValue = Int
  case paragraph
  @available(swift, obsoleted: 3, renamed: "paragraph")
  static var Paragraph: __NSPresentationIntentKind { get }
  case header
  @available(swift, obsoleted: 3, renamed: "header")
  static var Header: __NSPresentationIntentKind { get }
  case orderedList
  @available(swift, obsoleted: 3, renamed: "orderedList")
  static var OrderedList: __NSPresentationIntentKind { get }
  case unorderedList
  @available(swift, obsoleted: 3, renamed: "unorderedList")
  static var UnorderedList: __NSPresentationIntentKind { get }
  case listItem
  @available(swift, obsoleted: 3, renamed: "listItem")
  static var ListItem: __NSPresentationIntentKind { get }
  case codeBlock
  @available(swift, obsoleted: 3, renamed: "codeBlock")
  static var CodeBlock: __NSPresentationIntentKind { get }
  case blockQuote
  @available(swift, obsoleted: 3, renamed: "blockQuote")
  static var BlockQuote: __NSPresentationIntentKind { get }
  case thematicBreak
  @available(swift, obsoleted: 3, renamed: "thematicBreak")
  static var ThematicBreak: __NSPresentationIntentKind { get }
  case table
  @available(swift, obsoleted: 3, renamed: "table")
  static var Table: __NSPresentationIntentKind { get }
  case tableHeaderRow
  @available(swift, obsoleted: 3, renamed: "tableHeaderRow")
  static var TableHeaderRow: __NSPresentationIntentKind { get }
  case tableRow
  @available(swift, obsoleted: 3, renamed: "tableRow")
  static var TableRow: __NSPresentationIntentKind { get }
  case tableCell
  @available(swift, obsoleted: 3, renamed: "tableCell")
  static var TableCell: __NSPresentationIntentKind { get }
}
@available(iOS 15.0, *)
enum __NSPresentationIntentTableColumnAlignment : Int, @unchecked Sendable {
  init?(rawValue: Int)
  var rawValue: Int { get }
  typealias RawValue = Int
  case left
  @available(swift, obsoleted: 3, renamed: "left")
  static var Left: __NSPresentationIntentTableColumnAlignment { get }
  case center
  @available(swift, obsoleted: 3, renamed: "center")
  static var Center: __NSPresentationIntentTableColumnAlignment { get }
  case right
  @available(swift, obsoleted: 3, renamed: "right")
  static var Right: __NSPresentationIntentTableColumnAlignment { get }
}
@available(iOS 15.0, *)
class __NSPresentationIntent : NSObject, NSCopying, NSSecureCoding {
  var intentKind: __NSPresentationIntentKind { get }
  @available(*, unavailable)
  init()
  var parent: __NSPresentationIntent? { get }
  @available(swift, obsoleted: 3, renamed: "parent")
  var parentIntent: __NSPresentationIntent? { get }
  class func paragraphIntent(withIdentity identity: Int, nestedInside parent: __NSPresentationIntent?) -> __NSPresentationIntent
  @available(swift, obsoleted: 3, renamed: "paragraphIntent(withIdentity:nestedInside:)")
  class func paragraphIntentWithIdentity(_ identity: Int, nestedInsideIntent parent: __NSPresentationIntent?) -> __NSPresentationIntent
  class func headerIntent(withIdentity identity: Int, level: Int, nestedInside parent: __NSPresentationIntent?) -> __NSPresentationIntent
  @available(swift, obsoleted: 3, renamed: "headerIntent(withIdentity:level:nestedInside:)")
  class func headerIntentWithIdentity(_ identity: Int, level: Int, nestedInsideIntent parent: __NSPresentationIntent?) -> __NSPresentationIntent
  class func codeBlockIntent(withIdentity identity: Int, languageHint: String?, nestedInside parent: __NSPresentationIntent?) -> __NSPresentationIntent
  @available(swift, obsoleted: 3, renamed: "codeBlockIntent(withIdentity:languageHint:nestedInside:)")
  class func codeBlockIntentWithIdentity(_ identity: Int, languageHint: String?, nestedInsideIntent parent: __NSPresentationIntent?) -> __NSPresentationIntent
  class func thematicBreak(withIdentity identity: Int, nestedInside parent: __NSPresentationIntent?) -> __NSPresentationIntent
  @available(swift, obsoleted: 3, renamed: "thematicBreak(withIdentity:nestedInside:)")
  class func thematicBreakIntentWithIdentity(_ identity: Int, nestedInsideIntent parent: __NSPresentationIntent?) -> __NSPresentationIntent
  class func orderedListIntent(withIdentity identity: Int, nestedInside parent: __NSPresentationIntent?) -> __NSPresentationIntent
  @available(swift, obsoleted: 3, renamed: "orderedListIntent(withIdentity:nestedInside:)")
  class func orderedListIntentWithIdentity(_ identity: Int, nestedInsideIntent parent: __NSPresentationIntent?) -> __NSPresentationIntent
  class func unorderedListIntent(withIdentity identity: Int, nestedInside parent: __NSPresentationIntent?) -> __NSPresentationIntent
  @available(swift, obsoleted: 3, renamed: "unorderedListIntent(withIdentity:nestedInside:)")
  class func unorderedListIntentWithIdentity(_ identity: Int, nestedInsideIntent parent: __NSPresentationIntent?) -> __NSPresentationIntent
  class func listItemIntent(withIdentity identity: Int, ordinal: Int, nestedInside parent: __NSPresentationIntent?) -> __NSPresentationIntent
  @available(swift, obsoleted: 3, renamed: "listItemIntent(withIdentity:ordinal:nestedInside:)")
  class func listItemIntentWithIdentity(_ identity: Int, ordinal: Int, nestedInsideIntent parent: __NSPresentationIntent?) -> __NSPresentationIntent
  class func blockQuoteIntent(withIdentity identity: Int, nestedInside parent: __NSPresentationIntent?) -> __NSPresentationIntent
  @available(swift, obsoleted: 3, renamed: "blockQuoteIntent(withIdentity:nestedInside:)")
  class func blockQuoteIntentWithIdentity(_ identity: Int, nestedInsideIntent parent: __NSPresentationIntent?) -> __NSPresentationIntent
  class func tableIntent(withIdentity identity: Int, columnCount: Int, alignments: [NSNumber], nestedInside parent: __NSPresentationIntent?) -> __NSPresentationIntent
  @available(swift, obsoleted: 3, renamed: "tableIntent(withIdentity:columnCount:alignments:nestedInside:)")
  class func tableIntentWithIdentity(_ identity: Int, columnCount: Int, alignments: [NSNumber], nestedInsideIntent parent: __NSPresentationIntent?) -> __NSPresentationIntent
  class func tableHeaderRowIntent(withIdentity identity: Int, nestedInside parent: __NSPresentationIntent?) -> __NSPresentationIntent
  @available(swift, obsoleted: 3, renamed: "tableHeaderRowIntent(withIdentity:nestedInside:)")
  class func tableHeaderRowIntentWithIdentity(_ identity: Int, nestedInsideIntent parent: __NSPresentationIntent?) -> __NSPresentationIntent
  class func tableRowIntent(withIdentity identity: Int, row: Int, nestedInside parent: __NSPresentationIntent?) -> __NSPresentationIntent
  @available(swift, obsoleted: 3, renamed: "tableRowIntent(withIdentity:row:nestedInside:)")
  class func tableRowIntentWithIdentity(_ identity: Int, row: Int, nestedInsideIntent parent: __NSPresentationIntent?) -> __NSPresentationIntent
  class func tableCellIntent(withIdentity identity: Int, column: Int, nestedInside parent: __NSPresentationIntent?) -> __NSPresentationIntent
  @available(swift, obsoleted: 3, renamed: "tableCellIntent(withIdentity:column:nestedInside:)")
  class func tableCellIntentWithIdentity(_ identity: Int, column: Int, nestedInsideIntent parent: __NSPresentationIntent?) -> __NSPresentationIntent

  /// An integer value which uniquely identifies this intent in the document. Identity disambiguates attributes which apply to contiguous text -- for example, two headers in a row with the same level. It can also be used to track the location in an attributed string of a particular part of a document, even after mutation.
  var identity: Int { get }

  /// If the intent is not a list, this value is 0.
  var ordinal: Int { get }

  /// If the intent is not a table, this value is `nil`.
  var columnAlignments: [NSNumber]? { get }

  /// If the intent is not a table, this value is 0.
  var columnCount: Int { get }

  /// If the intent is not a header, this value is 0.
  var headerLevel: Int { get }

  /// If the intent is not a code block, this value is `nil`.
  var languageHint: String? { get }

  /// The column to which this cell belongs (0-based). If the intent is not a cell, this value is 0.
  var column: Int { get }

  /// The row to which this cell belongs (0-based). If the intent is not a row, this value is 0. Header rows are always row 0. If the table has more rows, those start at row 1.
  var row: Int { get }

  /// The indentation level of this intent. Each nested list increases the indentation level by one; all elements within the same list (and not then nested into a child list intent) have the same indentation level.
  /// Text outside list intents has an indentation level of 0.
  var indentationLevel: Int { get }

  /// Returns `YES` if this intent is equivalent to the other presentation intent. Equivalence is the same as equality except that identity is not taken into account.
  func isEquivalent(to other: __NSPresentationIntent) -> Bool

  /// Returns `YES` if this intent is equivalent to the other presentation intent. Equivalence is the same as equality except that identity is not taken into account.
  @available(swift, obsoleted: 3, renamed: "isEquivalent(to:)")
  func isEquivalentToPresentationIntent(_ other: __NSPresentationIntent) -> Bool
  @available(iOS 15.0, *)
  class var supportsSecureCoding: Bool { get }
  @available(iOS 15.0, *)
  func copy(with zone: NSZone? = nil) -> Any
  @available(iOS 15.0, *)
  func encode(with coder: NSCoder)
  init?(coder: NSCoder)
}
