@_exported import CoreFoundation

@available(swift, obsoleted: 3, renamed: "NSLocale.Key")
typealias NSLocaleKey = NSLocale.Key
extension NSLocale {
  struct Key : _ObjectiveCBridgeable, Hashable, Equatable, _SwiftNewtypeWrapper, RawRepresentable, @unchecked Sendable {
    init(rawValue: String)
    var _rawValue: NSString
    var rawValue: String { get }
    typealias RawValue = String
    typealias _ObjectiveCType = NSString
  }
  enum LanguageDirection : UInt, @unchecked Sendable {
    init?(rawValue: UInt)
    var rawValue: UInt { get }
    typealias RawValue = UInt
    case unknown
    @available(swift, obsoleted: 3, renamed: "unknown")
    static var Unknown: NSLocale.LanguageDirection { get }
    case leftToRight
    @available(swift, obsoleted: 3, renamed: "leftToRight")
    static var LeftToRight: NSLocale.LanguageDirection { get }
    case rightToLeft
    @available(swift, obsoleted: 3, renamed: "rightToLeft")
    static var RightToLeft: NSLocale.LanguageDirection { get }
    case topToBottom
    @available(swift, obsoleted: 3, renamed: "topToBottom")
    static var TopToBottom: NSLocale.LanguageDirection { get }
    case bottomToTop
    @available(swift, obsoleted: 3, renamed: "bottomToTop")
    static var BottomToTop: NSLocale.LanguageDirection { get }
  }
  @available(iOS 2.0, *)
  class let currentLocaleDidChangeNotification: NSNotification.Name
}
class NSLocale : NSObject, NSCopying, NSSecureCoding {
  func object(forKey key: NSLocale.Key) -> Any?
  @available(swift, obsoleted: 3, renamed: "object(forKey:)")
  func objectForKey(_ key: NSLocale.Key) -> Any?
  func displayName(forKey key: NSLocale.Key, value: Any) -> String?
  @available(swift, obsoleted: 3, renamed: "displayName(forKey:value:)")
  func displayNameForKey(_ key: NSLocale.Key, value: Any) -> String?
  init(localeIdentifier string: String)
  init?(coder: NSCoder)
  convenience init()
  class var supportsSecureCoding: Bool { get }
  func copy(with zone: NSZone? = nil) -> Any
  func encode(with coder: NSCoder)
}

extension NSLocale : _HasCustomAnyHashableRepresentation {
  @nonobjc func _toCustomAnyHashable() -> AnyHashable?
}
extension NSLocale {
  var localeIdentifier: String { get }
  @available(iOS 10.0, *)
  func localizedString(forLocaleIdentifier localeIdentifier: String) -> String
  @available(iOS 10.0, *)
  @available(swift, obsoleted: 3, renamed: "localizedString(forLocaleIdentifier:)")
  func localizedStringForLocaleIdentifier(_ localeIdentifier: String) -> String
  @available(iOS 10.0, *)
  var languageCode: String { get }
  @available(iOS 10.0, *)
  func localizedString(forLanguageCode languageCode: String) -> String?
  @available(iOS 10.0, *)
  @available(swift, obsoleted: 3, renamed: "localizedString(forLanguageCode:)")
  func localizedStringForLanguageCode(_ languageCode: String) -> String?
  @available(iOS 10.0, *)
  var countryCode: String? { get }
  @available(iOS 10.0, *)
  func localizedString(forCountryCode countryCode: String) -> String?
  @available(iOS 10.0, *)
  @available(swift, obsoleted: 3, renamed: "localizedString(forCountryCode:)")
  func localizedStringForCountryCode(_ countryCode: String) -> String?
  @available(iOS 10.0, *)
  var scriptCode: String? { get }
  @available(iOS 10.0, *)
  func localizedString(forScriptCode scriptCode: String) -> String?
  @available(iOS 10.0, *)
  @available(swift, obsoleted: 3, renamed: "localizedString(forScriptCode:)")
  func localizedStringForScriptCode(_ scriptCode: String) -> String?
  @available(iOS 10.0, *)
  var variantCode: String? { get }
  @available(iOS 10.0, *)
  func localizedString(forVariantCode variantCode: String) -> String?
  @available(iOS 10.0, *)
  @available(swift, obsoleted: 3, renamed: "localizedString(forVariantCode:)")
  func localizedStringForVariantCode(_ variantCode: String) -> String?
  @available(iOS 10.0, *)
  var exemplarCharacterSet: CharacterSet { get }
  @available(iOS 10.0, *)
  var calendarIdentifier: String { get }
  @available(iOS 10.0, *)
  func localizedString(forCalendarIdentifier calendarIdentifier: String) -> String?
  @available(iOS 10.0, *)
  @available(swift, obsoleted: 3, renamed: "localizedString(forCalendarIdentifier:)")
  func localizedStringForCalendarIdentifier(_ calendarIdentifier: String) -> String?
  @available(iOS 10.0, *)
  var collationIdentifier: String? { get }
  @available(iOS 10.0, *)
  func localizedString(forCollationIdentifier collationIdentifier: String) -> String?
  @available(iOS 10.0, *)
  @available(swift, obsoleted: 3, renamed: "localizedString(forCollationIdentifier:)")
  func localizedStringForCollationIdentifier(_ collationIdentifier: String) -> String?
  @available(iOS 10.0, *)
  var usesMetricSystem: Bool { get }
  @available(iOS 10.0, *)
  var decimalSeparator: String { get }
  @available(iOS 10.0, *)
  var groupingSeparator: String { get }
  @available(iOS 10.0, *)
  var currencySymbol: String { get }
  @available(iOS 10.0, *)
  var currencyCode: String? { get }
  @available(iOS 10.0, *)
  func localizedString(forCurrencyCode currencyCode: String) -> String?
  @available(iOS 10.0, *)
  @available(swift, obsoleted: 3, renamed: "localizedString(forCurrencyCode:)")
  func localizedStringForCurrencyCode(_ currencyCode: String) -> String?
  @available(iOS 10.0, *)
  var collatorIdentifier: String { get }
  @available(iOS 10.0, *)
  func localizedString(forCollatorIdentifier collatorIdentifier: String) -> String?
  @available(iOS 10.0, *)
  @available(swift, obsoleted: 3, renamed: "localizedString(forCollatorIdentifier:)")
  func localizedStringForCollatorIdentifier(_ collatorIdentifier: String) -> String?
  @available(iOS 10.0, *)
  var quotationBeginDelimiter: String { get }
  @available(iOS 10.0, *)
  var quotationEndDelimiter: String { get }
  @available(iOS 10.0, *)
  var alternateQuotationBeginDelimiter: String { get }
  @available(iOS 10.0, *)
  var alternateQuotationEndDelimiter: String { get }
}
extension NSLocale {
  @available(iOS 2.0, *)
  class var autoupdatingCurrent: Locale { get }
  @available(iOS 2.0, *)
  @available(swift, obsoleted: 3, renamed: "autoupdatingCurrent")
  class var autoupdatingCurrentLocale: Locale { get }
  class var current: Locale { get }
  @available(swift, obsoleted: 3, renamed: "current")
  class var currentLocale: Locale { get }
  class var system: Locale { get }
  @available(swift, obsoleted: 3, renamed: "system")
  class var systemLocale: Locale { get }
  @available(iOS 4.0, *)
  @available(*, unavailable, renamed: "init(localeIdentifier:)", message: "Not available in Swift")
  class func localeWithLocaleIdentifier(_ ident: String) -> Self
}
extension NSLocale {
  class var availableLocaleIdentifiers: [String] { get }
  class var isoLanguageCodes: [String] { get }
  @available(swift, obsoleted: 3, renamed: "isoLanguageCodes")
  class var ISOLanguageCodes: [String] { get }
  class var isoCountryCodes: [String] { get }
  @available(swift, obsoleted: 3, renamed: "isoCountryCodes")
  class var ISOCountryCodes: [String] { get }
  class var isoCurrencyCodes: [String] { get }
  @available(swift, obsoleted: 3, renamed: "isoCurrencyCodes")
  class var ISOCurrencyCodes: [String] { get }
  @available(iOS 2.0, *)
  class var commonISOCurrencyCodes: [String] { get }
  @available(iOS 2.0, *)
  class var preferredLanguages: [String] { get }
  class func components(fromLocaleIdentifier string: String) -> [String : String]
  @available(swift, obsoleted: 3, renamed: "components(fromLocaleIdentifier:)")
  class func componentsFromLocaleIdentifier(_ string: String) -> [String : String]
  class func localeIdentifier(fromComponents dict: [String : String]) -> String
  @available(swift, obsoleted: 3, renamed: "localeIdentifier(fromComponents:)")
  class func localeIdentifierFromComponents(_ dict: [String : String]) -> String
  class func canonicalLocaleIdentifier(from string: String) -> String
  @available(swift, obsoleted: 3, renamed: "canonicalLocaleIdentifier(from:)")
  class func canonicalLocaleIdentifierFromString(_ string: String) -> String
  class func canonicalLanguageIdentifier(from string: String) -> String
  @available(swift, obsoleted: 3, renamed: "canonicalLanguageIdentifier(from:)")
  class func canonicalLanguageIdentifierFromString(_ string: String) -> String
  @available(iOS 4.0, *)
  class func localeIdentifier(fromWindowsLocaleCode lcid: UInt32) -> String?
  @available(iOS 4.0, *)
  @available(swift, obsoleted: 3, renamed: "localeIdentifier(fromWindowsLocaleCode:)")
  class func localeIdentifierFromWindowsLocaleCode(_ lcid: UInt32) -> String?
  @available(iOS 4.0, *)
  class func windowsLocaleCode(fromLocaleIdentifier localeIdentifier: String) -> UInt32
  @available(iOS 4.0, *)
  @available(swift, obsoleted: 3, renamed: "windowsLocaleCode(fromLocaleIdentifier:)")
  class func windowsLocaleCodeFromLocaleIdentifier(_ localeIdentifier: String) -> UInt32
  @available(iOS 4.0, *)
  class func characterDirection(forLanguage isoLangCode: String) -> NSLocale.LanguageDirection
  @available(iOS 4.0, *)
  @available(swift, obsoleted: 3, renamed: "characterDirection(forLanguage:)")
  class func characterDirectionForLanguage(_ isoLangCode: String) -> NSLocale.LanguageDirection
  @available(iOS 4.0, *)
  class func lineDirection(forLanguage isoLangCode: String) -> NSLocale.LanguageDirection
  @available(iOS 4.0, *)
  @available(swift, obsoleted: 3, renamed: "lineDirection(forLanguage:)")
  class func lineDirectionForLanguage(_ isoLangCode: String) -> NSLocale.LanguageDirection
}
@available(swift, obsoleted: 3, renamed: "NSLocale.LanguageDirection")
typealias NSLocaleLanguageDirection = NSLocale.LanguageDirection
@available(iOS 2.0, *)
@available(swift, obsoleted: 3, renamed: "NSLocale.currentLocaleDidChangeNotification")
let NSCurrentLocaleDidChangeNotification: NSNotification.Name
@available(swift, obsoleted: 3, renamed: "NSLocale.Key.identifier")
let NSLocaleIdentifier: NSLocale.Key
extension NSLocale.Key {
  static let identifier: NSLocale.Key
  static let languageCode: NSLocale.Key
  static let countryCode: NSLocale.Key
  static let scriptCode: NSLocale.Key
  static let variantCode: NSLocale.Key
  static let exemplarCharacterSet: NSLocale.Key
  static let calendar: NSLocale.Key
  static let collationIdentifier: NSLocale.Key
  static let usesMetricSystem: NSLocale.Key
  static let measurementSystem: NSLocale.Key
  static let decimalSeparator: NSLocale.Key
  static let groupingSeparator: NSLocale.Key
  static let currencySymbol: NSLocale.Key
  static let currencyCode: NSLocale.Key
  @available(iOS 4.0, *)
  static let collatorIdentifier: NSLocale.Key
  @available(iOS 4.0, *)
  static let quotationBeginDelimiterKey: NSLocale.Key
  @available(iOS 4.0, *)
  static let quotationEndDelimiterKey: NSLocale.Key
  @available(iOS 4.0, *)
  static let alternateQuotationBeginDelimiterKey: NSLocale.Key
  @available(iOS 4.0, *)
  static let alternateQuotationEndDelimiterKey: NSLocale.Key
}
@available(swift, obsoleted: 3, renamed: "NSLocale.Key.languageCode")
let NSLocaleLanguageCode: NSLocale.Key
@available(swift, obsoleted: 3, renamed: "NSLocale.Key.countryCode")
let NSLocaleCountryCode: NSLocale.Key
@available(swift, obsoleted: 3, renamed: "NSLocale.Key.scriptCode")
let NSLocaleScriptCode: NSLocale.Key
@available(swift, obsoleted: 3, renamed: "NSLocale.Key.variantCode")
let NSLocaleVariantCode: NSLocale.Key
@available(swift, obsoleted: 3, renamed: "NSLocale.Key.exemplarCharacterSet")
let NSLocaleExemplarCharacterSet: NSLocale.Key
@available(swift, obsoleted: 3, renamed: "NSLocale.Key.calendar")
let NSLocaleCalendar: NSLocale.Key
@available(swift, obsoleted: 3, renamed: "NSLocale.Key.collationIdentifier")
let NSLocaleCollationIdentifier: NSLocale.Key
@available(swift, obsoleted: 3, renamed: "NSLocale.Key.usesMetricSystem")
let NSLocaleUsesMetricSystem: NSLocale.Key
@available(swift, obsoleted: 3, renamed: "NSLocale.Key.measurementSystem")
let NSLocaleMeasurementSystem: NSLocale.Key
@available(swift, obsoleted: 3, renamed: "NSLocale.Key.decimalSeparator")
let NSLocaleDecimalSeparator: NSLocale.Key
@available(swift, obsoleted: 3, renamed: "NSLocale.Key.groupingSeparator")
let NSLocaleGroupingSeparator: NSLocale.Key
@available(swift, obsoleted: 3, renamed: "NSLocale.Key.currencySymbol")
let NSLocaleCurrencySymbol: NSLocale.Key
@available(swift, obsoleted: 3, renamed: "NSLocale.Key.currencyCode")
let NSLocaleCurrencyCode: NSLocale.Key
@available(iOS 4.0, *)
@available(swift, obsoleted: 3, renamed: "NSLocale.Key.collatorIdentifier")
let NSLocaleCollatorIdentifier: NSLocale.Key
@available(iOS 4.0, *)
@available(swift, obsoleted: 3, renamed: "NSLocale.Key.quotationBeginDelimiterKey")
let NSLocaleQuotationBeginDelimiterKey: NSLocale.Key
@available(iOS 4.0, *)
@available(swift, obsoleted: 3, renamed: "NSLocale.Key.quotationEndDelimiterKey")
let NSLocaleQuotationEndDelimiterKey: NSLocale.Key
@available(iOS 4.0, *)
@available(swift, obsoleted: 3, renamed: "NSLocale.Key.alternateQuotationBeginDelimiterKey")
let NSLocaleAlternateQuotationBeginDelimiterKey: NSLocale.Key
@available(iOS 4.0, *)
@available(swift, obsoleted: 3, renamed: "NSLocale.Key.alternateQuotationEndDelimiterKey")
let NSLocaleAlternateQuotationEndDelimiterKey: NSLocale.Key
@available(iOS, introduced: 2.0, deprecated: 8.0)
let NSGregorianCalendar: String
@available(iOS, introduced: 2.0, deprecated: 8.0)
let NSBuddhistCalendar: String
@available(iOS, introduced: 2.0, deprecated: 8.0)
let NSChineseCalendar: String
@available(iOS, introduced: 2.0, deprecated: 8.0)
let NSHebrewCalendar: String
@available(iOS, introduced: 2.0, deprecated: 8.0)
let NSIslamicCalendar: String
@available(iOS, introduced: 2.0, deprecated: 8.0)
let NSIslamicCivilCalendar: String
@available(iOS, introduced: 2.0, deprecated: 8.0)
let NSJapaneseCalendar: String
@available(iOS, introduced: 4.0, deprecated: 8.0)
let NSRepublicOfChinaCalendar: String
@available(iOS, introduced: 4.0, deprecated: 8.0)
let NSPersianCalendar: String
@available(iOS, introduced: 4.0, deprecated: 8.0)
let NSIndianCalendar: String
@available(iOS, introduced: 4.0, deprecated: 8.0)
let NSISO8601Calendar: String
