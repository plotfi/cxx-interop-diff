@_exported import CoreFoundation

@available(*, unavailable, message: "Not available in Swift")
typealias NSFileVersionAddingOptions = Int
struct NSFileVersionAddingOptions : OptionSet, @unchecked Sendable {
  init(rawValue: UInt)
  let rawValue: UInt
  typealias RawValue = UInt
  typealias Element = NSFileVersionAddingOptions
  typealias ArrayLiteralElement = NSFileVersionAddingOptions
  static var byMoving: NSFileVersionAddingOptions { get }
  @available(swift, obsoleted: 3, renamed: "byMoving")
  static var ByMoving: NSFileVersionAddingOptions { get }
}
@available(*, unavailable, message: "Not available in Swift")
typealias NSFileVersionReplacingOptions = Int
struct NSFileVersionReplacingOptions : OptionSet, @unchecked Sendable {
  init(rawValue: UInt)
  let rawValue: UInt
  typealias RawValue = UInt
  typealias Element = NSFileVersionReplacingOptions
  typealias ArrayLiteralElement = NSFileVersionReplacingOptions
  static var byMoving: NSFileVersionReplacingOptions { get }
  @available(swift, obsoleted: 3, renamed: "byMoving")
  static var ByMoving: NSFileVersionReplacingOptions { get }
}
@available(iOS 5.0, *)
class NSFileVersion : NSObject {
  class func currentVersionOfItem(at url: URL) -> NSFileVersion?
  @available(swift, obsoleted: 3, renamed: "currentVersionOfItem(at:)")
  class func currentVersionOfItemAtURL(_ url: URL) -> NSFileVersion?
  class func otherVersionsOfItem(at url: URL) -> [NSFileVersion]?
  @available(swift, obsoleted: 3, renamed: "otherVersionsOfItem(at:)")
  class func otherVersionsOfItemAtURL(_ url: URL) -> [NSFileVersion]?
  class func unresolvedConflictVersionsOfItem(at url: URL) -> [NSFileVersion]?
  @available(swift, obsoleted: 3, renamed: "unresolvedConflictVersionsOfItem(at:)")
  class func unresolvedConflictVersionsOfItemAtURL(_ url: URL) -> [NSFileVersion]?
  @available(iOS 8.0, *)
  class func getNonlocalVersionsOfItem(at url: URL, completionHandler: @escaping @Sendable ([NSFileVersion]?, Error?) -> Void)
  @available(iOS 8.0, *)
  class func nonlocalVersionsOfItem(at url: URL) async throws -> [NSFileVersion]
  @available(iOS 8.0, *)
  @available(swift, obsoleted: 3, renamed: "getNonlocalVersionsOfItem(at:completionHandler:)")
  class func getNonlocalVersionsOfItemAtURL(_ url: URL, completionHandler: @escaping @Sendable ([NSFileVersion]?, Error?) -> Void)
  class func version(itemAt url: URL, forPersistentIdentifier persistentIdentifier: Any) -> NSFileVersion?
  @available(swift, obsoleted: 3, renamed: "version(itemAt:forPersistentIdentifier:)")
  /*not inherited*/ init?(ofItemAtURL url: URL, forPersistentIdentifier persistentIdentifier: Any)
  @available(*, unavailable, renamed: "version(itemAt:forPersistentIdentifier:)", message: "Not available in Swift")
  class func versionOfItemAtURL(_ url: URL, forPersistentIdentifier persistentIdentifier: Any) -> NSFileVersion?
  @available(iOS, unavailable)
  class func addOfItem(at url: URL, withContentsOf contentsURL: URL, options: NSFileVersionAddingOptions = []) throws -> NSFileVersion
  @available(swift, obsoleted: 3, renamed: "addOfItem(at:withContentsOf:options:)")
  @available(iOS, unavailable)
  class func addVersionOfItemAtURL(_ url: URL, withContentsOfURL contentsURL: URL, options: NSFileVersionAddingOptions = []) throws -> NSFileVersion
  @available(iOS, unavailable)
  class func temporaryDirectoryURLForNewVersionOfItem(at url: URL) -> URL
  @available(swift, obsoleted: 3, renamed: "temporaryDirectoryURLForNewVersionOfItem(at:)")
  @available(iOS, unavailable)
  class func temporaryDirectoryURLForNewVersionOfItemAtURL(_ url: URL) -> URL
  var url: URL { get }
  @available(swift, obsoleted: 3, renamed: "url")
  var URL: URL { get }
  var localizedName: String? { get }
  var localizedNameOfSavingComputer: String? { get }
  @available(iOS 10.0, *)
  var originatorNameComponents: PersonNameComponents? { get }
  var modificationDate: Date? { get }
  var persistentIdentifier: NSCoding { get }
  var isConflict: Bool { get }
  @available(swift, obsoleted: 3, renamed: "isConflict")
  var conflict: Bool { get }
  var isResolved: Bool
  @available(swift, obsoleted: 3, renamed: "isResolved")
  var resolved: Bool
  @available(iOS, unavailable)
  var isDiscardable: Bool
  @available(swift, obsoleted: 3, renamed: "isDiscardable")
  @available(iOS, unavailable)
  var discardable: Bool
  @available(iOS 8.0, *)
  var hasLocalContents: Bool { get }
  @available(iOS 8.0, *)
  var hasThumbnail: Bool { get }
  func replaceItem(at url: URL, options: NSFileVersionReplacingOptions = []) throws -> URL
  @available(swift, obsoleted: 3, renamed: "replaceItem(at:options:)")
  func replaceItemAtURL(_ url: URL, options: NSFileVersionReplacingOptions = []) throws -> URL
  func remove() throws
  class func removeOtherVersionsOfItem(at url: URL) throws
  @available(swift, obsoleted: 3, renamed: "removeOtherVersionsOfItem(at:)")
  class func removeOtherVersionsOfItemAtURL(_ url: URL) throws
  init()
}
