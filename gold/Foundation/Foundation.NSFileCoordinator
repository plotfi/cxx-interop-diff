@_exported import CoreFoundation

@available(*, unavailable, message: "Not available in Swift")
typealias NSFileCoordinatorReadingOptions = Int
struct NSFileCoordinatorReadingOptions : OptionSet, @unchecked Sendable {
  init(rawValue: UInt)
  let rawValue: UInt
  typealias RawValue = UInt
  typealias Element = NSFileCoordinatorReadingOptions
  typealias ArrayLiteralElement = NSFileCoordinatorReadingOptions
  static var withoutChanges: NSFileCoordinatorReadingOptions { get }
  @available(swift, obsoleted: 3, renamed: "withoutChanges")
  static var WithoutChanges: NSFileCoordinatorReadingOptions { get }
  static var resolvesSymbolicLink: NSFileCoordinatorReadingOptions { get }
  @available(swift, obsoleted: 3, renamed: "resolvesSymbolicLink")
  static var ResolvesSymbolicLink: NSFileCoordinatorReadingOptions { get }
  @available(iOS 8.0, *)
  static var immediatelyAvailableMetadataOnly: NSFileCoordinatorReadingOptions { get }
  @available(iOS 8.0, *)
  @available(swift, obsoleted: 3, renamed: "immediatelyAvailableMetadataOnly")
  static var ImmediatelyAvailableMetadataOnly: NSFileCoordinatorReadingOptions { get }
  @available(iOS 8.0, *)
  static var forUploading: NSFileCoordinatorReadingOptions { get }
  @available(iOS 8.0, *)
  @available(swift, obsoleted: 3, renamed: "forUploading")
  static var ForUploading: NSFileCoordinatorReadingOptions { get }
}
@available(*, unavailable, message: "Not available in Swift")
typealias NSFileCoordinatorWritingOptions = Int
struct NSFileCoordinatorWritingOptions : OptionSet, @unchecked Sendable {
  init(rawValue: UInt)
  let rawValue: UInt
  typealias RawValue = UInt
  typealias Element = NSFileCoordinatorWritingOptions
  typealias ArrayLiteralElement = NSFileCoordinatorWritingOptions
  static var forDeleting: NSFileCoordinatorWritingOptions { get }
  @available(swift, obsoleted: 3, renamed: "forDeleting")
  static var ForDeleting: NSFileCoordinatorWritingOptions { get }
  static var forMoving: NSFileCoordinatorWritingOptions { get }
  @available(swift, obsoleted: 3, renamed: "forMoving")
  static var ForMoving: NSFileCoordinatorWritingOptions { get }
  static var forMerging: NSFileCoordinatorWritingOptions { get }
  @available(swift, obsoleted: 3, renamed: "forMerging")
  static var ForMerging: NSFileCoordinatorWritingOptions { get }
  static var forReplacing: NSFileCoordinatorWritingOptions { get }
  @available(swift, obsoleted: 3, renamed: "forReplacing")
  static var ForReplacing: NSFileCoordinatorWritingOptions { get }
  @available(iOS 8.0, *)
  static var contentIndependentMetadataOnly: NSFileCoordinatorWritingOptions { get }
  @available(iOS 8.0, *)
  @available(swift, obsoleted: 3, renamed: "contentIndependentMetadataOnly")
  static var ContentIndependentMetadataOnly: NSFileCoordinatorWritingOptions { get }
}
@available(iOS 8.0, *)
class NSFileAccessIntent : NSObject {
  class func readingIntent(with url: URL, options: NSFileCoordinatorReadingOptions = []) -> Self
  @available(swift, obsoleted: 3, renamed: "readingIntent(with:options:)")
  class func readingIntentWithURL(_ url: URL, options: NSFileCoordinatorReadingOptions = []) -> Self
  class func writingIntent(with url: URL, options: NSFileCoordinatorWritingOptions = []) -> Self
  @available(swift, obsoleted: 3, renamed: "writingIntent(with:options:)")
  class func writingIntentWithURL(_ url: URL, options: NSFileCoordinatorWritingOptions = []) -> Self
  var url: URL { get }
  @available(swift, obsoleted: 3, renamed: "url")
  var URL: URL { get }
  init()
}
@available(iOS 5.0, *)
class NSFileCoordinator : NSObject {
  class func addFilePresenter(_ filePresenter: NSFilePresenter)
  class func removeFilePresenter(_ filePresenter: NSFilePresenter)
  class var filePresenters: [NSFilePresenter] { get }
  init(filePresenter filePresenterOrNil: NSFilePresenter?)
  @available(iOS 5.0, *)
  var purposeIdentifier: String
  @available(iOS 8.0, *)
  func coordinate(with intents: [NSFileAccessIntent], queue: OperationQueue, byAccessor accessor: @escaping (Error?) -> Void)
  @available(iOS 8.0, *)
  @available(swift, obsoleted: 3, renamed: "coordinate(with:queue:byAccessor:)")
  func coordinateAccessWithIntents(_ intents: [NSFileAccessIntent], queue: OperationQueue, byAccessor accessor: @escaping (Error?) -> Void)
  func coordinate(readingItemAt url: URL, options: NSFileCoordinatorReadingOptions = [], error outError: NSErrorPointer, byAccessor reader: (URL) -> Void)
  @available(swift, obsoleted: 3, renamed: "coordinate(readingItemAt:options:error:byAccessor:)")
  func coordinateReadingItemAtURL(_ url: URL, options: NSFileCoordinatorReadingOptions = [], error outError: NSErrorPointer, byAccessor reader: (URL) -> Void)
  func coordinate(writingItemAt url: URL, options: NSFileCoordinatorWritingOptions = [], error outError: NSErrorPointer, byAccessor writer: (URL) -> Void)
  @available(swift, obsoleted: 3, renamed: "coordinate(writingItemAt:options:error:byAccessor:)")
  func coordinateWritingItemAtURL(_ url: URL, options: NSFileCoordinatorWritingOptions = [], error outError: NSErrorPointer, byAccessor writer: (URL) -> Void)
  func coordinate(readingItemAt readingURL: URL, options readingOptions: NSFileCoordinatorReadingOptions = [], writingItemAt writingURL: URL, options writingOptions: NSFileCoordinatorWritingOptions = [], error outError: NSErrorPointer, byAccessor readerWriter: (URL, URL) -> Void)
  @available(swift, obsoleted: 3, renamed: "coordinate(readingItemAt:options:writingItemAt:options:error:byAccessor:)")
  func coordinateReadingItemAtURL(_ readingURL: URL, options readingOptions: NSFileCoordinatorReadingOptions = [], writingItemAtURL writingURL: URL, options writingOptions: NSFileCoordinatorWritingOptions = [], error outError: NSErrorPointer, byAccessor readerWriter: (URL, URL) -> Void)
  func coordinate(writingItemAt url1: URL, options options1: NSFileCoordinatorWritingOptions = [], writingItemAt url2: URL, options options2: NSFileCoordinatorWritingOptions = [], error outError: NSErrorPointer, byAccessor writer: (URL, URL) -> Void)
  @available(swift, obsoleted: 3, renamed: "coordinate(writingItemAt:options:writingItemAt:options:error:byAccessor:)")
  func coordinateWritingItemAtURL(_ url1: URL, options options1: NSFileCoordinatorWritingOptions = [], writingItemAtURL url2: URL, options options2: NSFileCoordinatorWritingOptions = [], error outError: NSErrorPointer, byAccessor writer: (URL, URL) -> Void)
  func prepare(forReadingItemsAt readingURLs: [URL], options readingOptions: NSFileCoordinatorReadingOptions = [], writingItemsAt writingURLs: [URL], options writingOptions: NSFileCoordinatorWritingOptions = [], error outError: NSErrorPointer, byAccessor batchAccessor: (@escaping () -> Void) -> Void)
  @available(swift, obsoleted: 3, renamed: "prepare(forReadingItemsAt:options:writingItemsAt:options:error:byAccessor:)")
  func prepareForReadingItemsAtURLs(_ readingURLs: [URL], options readingOptions: NSFileCoordinatorReadingOptions = [], writingItemsAtURLs writingURLs: [URL], options writingOptions: NSFileCoordinatorWritingOptions = [], error outError: NSErrorPointer, byAccessor batchAccessor: (@escaping () -> Void) -> Void)
  @available(iOS 6.0, *)
  func item(at oldURL: URL, willMoveTo newURL: URL)
  @available(iOS 6.0, *)
  @available(swift, obsoleted: 3, renamed: "item(at:willMoveTo:)")
  func itemAtURL(_ oldURL: URL, willMoveToURL newURL: URL)
  func item(at oldURL: URL, didMoveTo newURL: URL)
  @available(swift, obsoleted: 3, renamed: "item(at:didMoveTo:)")
  func itemAtURL(_ oldURL: URL, didMoveToURL newURL: URL)
  @available(iOS 11.0, *)
  func item(at url: URL, didChangeUbiquityAttributes attributes: Set<URLResourceKey>)
  @available(iOS 11.0, *)
  @available(swift, obsoleted: 3, renamed: "item(at:didChangeUbiquityAttributes:)")
  func itemAtURL(_ url: URL, didChangeUbiquityAttributes attributes: Set<URLResourceKey>)
  func cancel()
  convenience init()
}
