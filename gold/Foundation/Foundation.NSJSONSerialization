@_exported import CoreFoundation

@available(*, unavailable, message: "Not available in Swift")
typealias NSJSONReadingOptions = Int
@available(iOS 5.0, *)
struct NSJSONReadingOptions : OptionSet, @unchecked Sendable {
  init(rawValue: UInt)
  let rawValue: UInt
  typealias RawValue = UInt
  typealias Element = NSJSONReadingOptions
  typealias ArrayLiteralElement = NSJSONReadingOptions
  static var mutableContainers: NSJSONReadingOptions { get }
  @available(swift, obsoleted: 3, renamed: "mutableContainers")
  static var MutableContainers: NSJSONReadingOptions { get }
  static var mutableLeaves: NSJSONReadingOptions { get }
  @available(swift, obsoleted: 3, renamed: "mutableLeaves")
  static var MutableLeaves: NSJSONReadingOptions { get }
  static var fragmentsAllowed: NSJSONReadingOptions { get }
  @available(swift, obsoleted: 3, renamed: "fragmentsAllowed")
  static var FragmentsAllowed: NSJSONReadingOptions { get }
  @available(iOS 15.0, *)
  static var json5Allowed: NSJSONReadingOptions { get }
  @available(iOS 15.0, *)
  @available(swift, obsoleted: 3, renamed: "json5Allowed")
  static var JSON5Allowed: NSJSONReadingOptions { get }
  @available(iOS 15.0, *)
  static var topLevelDictionaryAssumed: NSJSONReadingOptions { get }
  @available(iOS 15.0, *)
  @available(swift, obsoleted: 3, renamed: "topLevelDictionaryAssumed")
  static var TopLevelDictionaryAssumed: NSJSONReadingOptions { get }
  @available(iOS, introduced: 5.0, deprecated: 100000, renamed: "NSJSONReadingOptions.fragmentsAllowed")
  static var allowFragments: NSJSONReadingOptions { get }
  @available(iOS, introduced: 5.0, deprecated: 100000, renamed: "NSJSONReadingOptions.fragmentsAllowed")
  @available(swift, obsoleted: 3, renamed: "allowFragments")
  static var AllowFragments: NSJSONReadingOptions { get }
}
@available(*, unavailable, message: "Not available in Swift")
typealias NSJSONWritingOptions = Int
@available(iOS 5.0, *)
struct NSJSONWritingOptions : OptionSet, @unchecked Sendable {
  init(rawValue: UInt)
  let rawValue: UInt
  typealias RawValue = UInt
  typealias Element = NSJSONWritingOptions
  typealias ArrayLiteralElement = NSJSONWritingOptions
  static var prettyPrinted: NSJSONWritingOptions { get }
  @available(swift, obsoleted: 3, renamed: "prettyPrinted")
  static var PrettyPrinted: NSJSONWritingOptions { get }
  @available(iOS 11.0, *)
  static var sortedKeys: NSJSONWritingOptions { get }
  @available(iOS 11.0, *)
  @available(swift, obsoleted: 3, renamed: "sortedKeys")
  static var SortedKeys: NSJSONWritingOptions { get }
  static var fragmentsAllowed: NSJSONWritingOptions { get }
  @available(swift, obsoleted: 3, renamed: "fragmentsAllowed")
  static var FragmentsAllowed: NSJSONWritingOptions { get }
  @available(iOS 13.0, *)
  static var withoutEscapingSlashes: NSJSONWritingOptions { get }
  @available(iOS 13.0, *)
  @available(swift, obsoleted: 3, renamed: "withoutEscapingSlashes")
  static var WithoutEscapingSlashes: NSJSONWritingOptions { get }
}
@available(iOS 5.0, *)
class JSONSerialization : NSObject {
  class func isValidJSONObject(_ obj: Any) -> Bool
  class func data(withJSONObject obj: Any, options opt: NSJSONWritingOptions = []) throws -> Data
  @available(swift, obsoleted: 3, renamed: "data(withJSONObject:options:)")
  class func dataWithJSONObject(_ obj: Any, options opt: NSJSONWritingOptions = []) throws -> Data
  class func jsonObject(with data: Data, options opt: NSJSONReadingOptions = []) throws -> Any
  @available(swift, obsoleted: 3, renamed: "jsonObject(with:options:)")
  class func JSONObjectWithData(_ data: Data, options opt: NSJSONReadingOptions = []) throws -> Any
  class func writeJSONObject(_ obj: Any, to stream: OutputStream, options opt: NSJSONWritingOptions = [], error: NSErrorPointer) -> Int
  @available(swift, obsoleted: 3, renamed: "writeJSONObject(_:to:options:error:)")
  class func writeJSONObject(_ obj: Any, toStream stream: OutputStream, options opt: NSJSONWritingOptions = [], error: NSErrorPointer) -> Int
  class func jsonObject(with stream: InputStream, options opt: NSJSONReadingOptions = []) throws -> Any
  @available(swift, obsoleted: 3, renamed: "jsonObject(with:options:)")
  class func JSONObjectWithStream(_ stream: InputStream, options opt: NSJSONReadingOptions = []) throws -> Any
  init()
}
@available(iOS 5.0, *)
@available(swift, obsoleted: 3, renamed: "JSONSerialization")
typealias NSJSONSerialization = JSONSerialization
