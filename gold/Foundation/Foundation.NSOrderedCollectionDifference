@_exported import CoreFoundation


/// Options supported by methods that produce difference objects.
typealias NSOrderedCollectionDifferenceCalculationOptions = Int

/// Insertion changes do not store a reference to the inserted object.
var NSOrderedCollectionDifferenceCalculationOmitInsertedObjects: Int { get }

/// Insertion changes do not store a reference to the removed object.
var NSOrderedCollectionDifferenceCalculationOmitRemovedObjects: Int { get }

/// Assume objects that were uniquely removed and inserted were moved.
/// This is useful when diffing based on identity instead of equality.
var NSOrderedCollectionDifferenceCalculationInferMoves: Int { get }
@available(iOS 13.0, *)
class NSOrderedCollectionDifference : NSObject, NSFastEnumeration {

  /// Creates a new difference representing the changes in the parameter.
  ///
  /// For clients interested in the difference between two collections, the
  /// collection's differenceFrom method should be used instead.
  ///
  /// To guarantee that instances are unambiguous and safe for compatible base
  /// states, this method requires that its parameter conform to the following
  /// requirements:
  ///
  /// 1) All insertion offsets are unique
  /// 2) All removal offsets are unique
  /// 3) All associated indexes match a change with the opposite parity.
  convenience init(changes: [NSOrderedCollectionChange])
  init(insert inserts: IndexSet, insertedObjects: [Any]?, remove removes: IndexSet, removedObjects: [Any]?, additionalChanges changes: [NSOrderedCollectionChange])
  @available(swift, obsoleted: 3, renamed: "init(insert:insertedObjects:remove:removedObjects:additionalChanges:)")
  init(insertIndexes inserts: IndexSet, insertedObjects: [Any]?, removeIndexes removes: IndexSet, removedObjects: [Any]?, additionalChanges changes: [NSOrderedCollectionChange])
  convenience init(insert inserts: IndexSet, insertedObjects: [Any]?, remove removes: IndexSet, removedObjects: [Any]?)
  @available(swift, obsoleted: 3, renamed: "init(insert:insertedObjects:remove:removedObjects:)")
  convenience init(insertIndexes inserts: IndexSet, insertedObjects: [Any]?, removeIndexes removes: IndexSet, removedObjects: [Any]?)
  @available(iOS 13.0, *)
  var insertions: [NSOrderedCollectionChange] { get }
  @available(iOS 13.0, *)
  var removals: [NSOrderedCollectionChange] { get }
  var hasChanges: Bool { get }
  func transformingChanges(_ block: (NSOrderedCollectionChange) -> NSOrderedCollectionChange) -> CollectionDifference<Any>
  @available(swift, obsoleted: 3, renamed: "transformingChanges(_:)")
  func differenceByTransformingChangesWithBlock(_ block: (NSOrderedCollectionChange) -> NSOrderedCollectionChange) -> CollectionDifference<Any>
  @available(iOS 13.0, *)
  func inverse() -> Self
  @available(iOS 13.0, *)
  @available(swift, obsoleted: 3, renamed: "inverse()")
  func inverseDifference() -> Self
  convenience init()
  @available(iOS 13.0, *)
  func countByEnumerating(with state: UnsafeMutablePointer<NSFastEnumerationState>, objects buffer: AutoreleasingUnsafeMutablePointer<AnyObject?>, count len: Int) -> Int
}
