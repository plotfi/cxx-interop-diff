@_exported import CoreFoundation

var __FOUNDATION_NSMAPTABLE__: Int32 { get }

/****************	Class	****************/
@available(iOS 6.0, *)
let NSMapTableStrongMemory: Int
@available(iOS, unavailable)
let NSMapTableZeroingWeakMemory: Int
@available(iOS 6.0, *)
let NSMapTableCopyIn: Int
@available(iOS 6.0, *)
let NSMapTableObjectPointerPersonality: Int
@available(iOS 6.0, *)
let NSMapTableWeakMemory: Int
typealias NSMapTableOptions = Int
@available(iOS 6.0, *)
class NSMapTable<KeyType, ObjectType> : NSObject, NSCopying, NSSecureCoding, NSFastEnumeration where KeyType : AnyObject, ObjectType : AnyObject {
  init(keyOptions: NSPointerFunctions.Options = [], valueOptions: NSPointerFunctions.Options = [], capacity initialCapacity: Int)
  init(keyPointerFunctions keyFunctions: NSPointerFunctions, valuePointerFunctions valueFunctions: NSPointerFunctions, capacity initialCapacity: Int)
  /*not inherited*/ init(keyOptions: NSPointerFunctions.Options = [], valueOptions: NSPointerFunctions.Options = [])
  @available(*, unavailable, renamed: "init(keyOptions:valueOptions:)", message: "Not available in Swift")
  class func mapTableWithKeyOptions(_ keyOptions: NSPointerFunctions.Options = [], valueOptions: NSPointerFunctions.Options = []) -> NSMapTable<KeyType, ObjectType>
  @available(iOS, unavailable)
  class func mapTableWithStrongToStrongObjects() -> Any
  @available(iOS, unavailable)
  class func mapTableWithWeakToStrongObjects() -> Any
  @available(iOS, unavailable)
  class func mapTableWithStrongToWeakObjects() -> Any
  @available(iOS, unavailable)
  class func mapTableWithWeakToWeakObjects() -> Any
  @available(iOS 6.0, *)
  class func strongToStrongObjects() -> NSMapTable<KeyType, ObjectType>
  @available(iOS 6.0, *)
  @available(swift, obsoleted: 3, renamed: "strongToStrongObjects()")
  class func strongToStrongObjectsMapTable() -> NSMapTable<KeyType, ObjectType>
  @available(iOS 6.0, *)
  class func weakToStrongObjects() -> NSMapTable<KeyType, ObjectType>
  @available(iOS 6.0, *)
  @available(swift, obsoleted: 3, renamed: "weakToStrongObjects()")
  class func weakToStrongObjectsMapTable() -> NSMapTable<KeyType, ObjectType>
  @available(iOS 6.0, *)
  class func strongToWeakObjects() -> NSMapTable<KeyType, ObjectType>
  @available(iOS 6.0, *)
  @available(swift, obsoleted: 3, renamed: "strongToWeakObjects()")
  class func strongToWeakObjectsMapTable() -> NSMapTable<KeyType, ObjectType>
  @available(iOS 6.0, *)
  class func weakToWeakObjects() -> NSMapTable<KeyType, ObjectType>
  @available(iOS 6.0, *)
  @available(swift, obsoleted: 3, renamed: "weakToWeakObjects()")
  class func weakToWeakObjectsMapTable() -> NSMapTable<KeyType, ObjectType>
  @NSCopying var keyPointerFunctions: NSPointerFunctions { get }
  @NSCopying var valuePointerFunctions: NSPointerFunctions { get }
  func object(forKey aKey: KeyType?) -> ObjectType?
  @available(swift, obsoleted: 3, renamed: "object(forKey:)")
  func objectForKey(_ aKey: KeyType?) -> ObjectType?
  func removeObject(forKey aKey: KeyType?)
  @available(swift, obsoleted: 3, renamed: "removeObject(forKey:)")
  func removeObjectForKey(_ aKey: KeyType?)
  func setObject(_ anObject: ObjectType?, forKey aKey: KeyType?)
  var count: Int { get }
  func keyEnumerator() -> NSEnumerator
  func objectEnumerator() -> NSEnumerator?
  func removeAllObjects()
  func dictionaryRepresentation() -> [AnyHashable : ObjectType]
  convenience init()
  @available(iOS 6.0, *)
  class var supportsSecureCoding: Bool { get }
  @available(iOS 6.0, *)
  func copy(with zone: NSZone? = nil) -> Any
  @available(iOS 6.0, *)
  func encode(with coder: NSCoder)
  init?(coder: NSCoder)
  @available(iOS 6.0, *)
  func countByEnumerating(with state: UnsafeMutablePointer<NSFastEnumerationState>, objects buffer: AutoreleasingUnsafeMutablePointer<AnyObject?>, count len: Int) -> Int
}

/****************	void * Map table operations	****************/
struct NSMapEnumerator {
  init()
  init(_pi: Int, _si: Int, _bs: UnsafeMutableRawPointer?)
  var _pi: Int
  var _si: Int
  var _bs: UnsafeMutableRawPointer?
}
func NSFreeMapTable(_ table: NSMapTable<AnyObject, AnyObject>)
func NSResetMapTable(_ table: NSMapTable<AnyObject, AnyObject>)
func NSCompareMapTables(_ table1: NSMapTable<AnyObject, AnyObject>, _ table2: NSMapTable<AnyObject, AnyObject>) -> Bool
func NSCopyMapTableWithZone(_ table: NSMapTable<AnyObject, AnyObject>, _ zone: NSZone?) -> NSMapTable<AnyObject, AnyObject>
func NSMapMember(_ table: NSMapTable<AnyObject, AnyObject>, _ key: UnsafeRawPointer, _ originalKey: UnsafeMutablePointer<UnsafeMutableRawPointer?>?, _ value: UnsafeMutablePointer<UnsafeMutableRawPointer?>?) -> Bool
func NSMapGet(_ table: NSMapTable<AnyObject, AnyObject>, _ key: UnsafeRawPointer?) -> UnsafeMutableRawPointer?
func NSMapInsert(_ table: NSMapTable<AnyObject, AnyObject>, _ key: UnsafeRawPointer?, _ value: UnsafeRawPointer?)
func NSMapInsertKnownAbsent(_ table: NSMapTable<AnyObject, AnyObject>, _ key: UnsafeRawPointer?, _ value: UnsafeRawPointer?)
func NSMapInsertIfAbsent(_ table: NSMapTable<AnyObject, AnyObject>, _ key: UnsafeRawPointer?, _ value: UnsafeRawPointer?) -> UnsafeMutableRawPointer?
func NSMapRemove(_ table: NSMapTable<AnyObject, AnyObject>, _ key: UnsafeRawPointer?)
func NSEnumerateMapTable(_ table: NSMapTable<AnyObject, AnyObject>) -> NSMapEnumerator
func NSNextMapEnumeratorPair(_ enumerator: UnsafeMutablePointer<NSMapEnumerator>, _ key: UnsafeMutablePointer<UnsafeMutableRawPointer?>?, _ value: UnsafeMutablePointer<UnsafeMutableRawPointer?>?) -> Bool
func NSEndMapTableEnumeration(_ enumerator: UnsafeMutablePointer<NSMapEnumerator>)
func NSCountMapTable(_ table: NSMapTable<AnyObject, AnyObject>) -> Int
func NSStringFromMapTable(_ table: NSMapTable<AnyObject, AnyObject>) -> String
func NSAllMapTableKeys(_ table: NSMapTable<AnyObject, AnyObject>) -> [Any]
func NSAllMapTableValues(_ table: NSMapTable<AnyObject, AnyObject>) -> [Any]

/****************     Legacy     ***************************************/
struct NSMapTableKeyCallBacks {
  init()
  init(hash: (@convention(c) (NSMapTable<AnyObject, AnyObject>, UnsafeRawPointer) -> Int)?, isEqual: (@convention(c) (NSMapTable<AnyObject, AnyObject>, UnsafeRawPointer, UnsafeRawPointer) -> ObjCBool)?, retain: (@convention(c) (NSMapTable<AnyObject, AnyObject>, UnsafeRawPointer) -> Void)?, release: (@convention(c) (NSMapTable<AnyObject, AnyObject>, UnsafeMutableRawPointer) -> Void)?, describe: (@convention(c) (NSMapTable<AnyObject, AnyObject>, UnsafeRawPointer) -> String?)?, notAKeyMarker: UnsafeRawPointer?)
  var hash: (@convention(c) (NSMapTable<AnyObject, AnyObject>, UnsafeRawPointer) -> Int)?
  var isEqual: (@convention(c) (NSMapTable<AnyObject, AnyObject>, UnsafeRawPointer, UnsafeRawPointer) -> ObjCBool)?
  var retain: (@convention(c) (NSMapTable<AnyObject, AnyObject>, UnsafeRawPointer) -> Void)?
  var release: (@convention(c) (NSMapTable<AnyObject, AnyObject>, UnsafeMutableRawPointer) -> Void)?
  var describe: (@convention(c) (NSMapTable<AnyObject, AnyObject>, UnsafeRawPointer) -> String?)?
  var notAKeyMarker: UnsafeRawPointer?
}
struct NSMapTableValueCallBacks {
  init()
  init(retain: (@convention(c) (NSMapTable<AnyObject, AnyObject>, UnsafeRawPointer) -> Void)?, release: (@convention(c) (NSMapTable<AnyObject, AnyObject>, UnsafeMutableRawPointer) -> Void)?, describe: (@convention(c) (NSMapTable<AnyObject, AnyObject>, UnsafeRawPointer) -> String?)?)
  var retain: (@convention(c) (NSMapTable<AnyObject, AnyObject>, UnsafeRawPointer) -> Void)?
  var release: (@convention(c) (NSMapTable<AnyObject, AnyObject>, UnsafeMutableRawPointer) -> Void)?
  var describe: (@convention(c) (NSMapTable<AnyObject, AnyObject>, UnsafeRawPointer) -> String?)?
}
func NSCreateMapTableWithZone(_ keyCallBacks: NSMapTableKeyCallBacks, _ valueCallBacks: NSMapTableValueCallBacks, _ capacity: Int, _ zone: NSZone?) -> NSMapTable<AnyObject, AnyObject>
func NSCreateMapTable(_ keyCallBacks: NSMapTableKeyCallBacks, _ valueCallBacks: NSMapTableValueCallBacks, _ capacity: Int) -> NSMapTable<AnyObject, AnyObject>

/****************	Common map table key callbacks	****************/
@available(iOS, unavailable)
let NSIntegerMapKeyCallBacks: NSMapTableKeyCallBacks
let NSNonOwnedPointerMapKeyCallBacks: NSMapTableKeyCallBacks
let NSNonOwnedPointerOrNullMapKeyCallBacks: NSMapTableKeyCallBacks
let NSNonRetainedObjectMapKeyCallBacks: NSMapTableKeyCallBacks
let NSObjectMapKeyCallBacks: NSMapTableKeyCallBacks
let NSOwnedPointerMapKeyCallBacks: NSMapTableKeyCallBacks
@available(iOS, unavailable, introduced: 2.0, deprecated: 2.0, message: "Not supported")
let NSIntMapKeyCallBacks: NSMapTableKeyCallBacks

/****************	Common map table value callbacks	****************/
@available(iOS, unavailable)
let NSIntegerMapValueCallBacks: NSMapTableValueCallBacks
let NSNonOwnedPointerMapValueCallBacks: NSMapTableValueCallBacks
let NSObjectMapValueCallBacks: NSMapTableValueCallBacks
let NSNonRetainedObjectMapValueCallBacks: NSMapTableValueCallBacks
let NSOwnedPointerMapValueCallBacks: NSMapTableValueCallBacks
@available(iOS, unavailable, introduced: 2.0, deprecated: 2.0, message: "Not supported")
let NSIntMapValueCallBacks: NSMapTableValueCallBacks
