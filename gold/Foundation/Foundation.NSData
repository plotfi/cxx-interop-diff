@_exported import CoreFoundation


/****************	Read/Write Options	****************/
@available(*, unavailable, message: "Not available in Swift")
typealias NSDataReadingOptions = Int
struct NSDataReadingOptions : OptionSet, @unchecked Sendable {
  init(rawValue: UInt)
  let rawValue: UInt
  typealias RawValue = UInt
  typealias Element = NSDataReadingOptions
  typealias ArrayLiteralElement = NSDataReadingOptions
  static var mappedIfSafe: NSDataReadingOptions { get }
  @available(swift, obsoleted: 3, renamed: "mappedIfSafe")
  static var DataReadingMappedIfSafe: NSDataReadingOptions { get }
  static var uncached: NSDataReadingOptions { get }
  @available(swift, obsoleted: 3, renamed: "uncached")
  static var DataReadingUncached: NSDataReadingOptions { get }
  @available(iOS 5.0, *)
  static var alwaysMapped: NSDataReadingOptions { get }
  @available(iOS 5.0, *)
  @available(swift, obsoleted: 3, renamed: "alwaysMapped")
  static var DataReadingMappedAlways: NSDataReadingOptions { get }
  @available(iOS, introduced: 2.0, deprecated: 100000, renamed: "NSDataReadingOptions.mappedIfSafe")
  static var dataReadingMapped: NSDataReadingOptions { get }
  @available(iOS, introduced: 2.0, deprecated: 100000, renamed: "NSDataReadingOptions.mappedIfSafe")
  @available(swift, obsoleted: 3, renamed: "dataReadingMapped")
  static var DataReadingMapped: NSDataReadingOptions { get }
  @available(iOS, introduced: 2.0, deprecated: 100000, renamed: "NSDataReadingOptions.dataReadingMapped")
  static var mappedRead: NSDataReadingOptions { get }
  @available(iOS, introduced: 2.0, deprecated: 100000, renamed: "NSDataReadingOptions.dataReadingMapped")
  @available(swift, obsoleted: 3, renamed: "mappedRead")
  static var MappedRead: NSDataReadingOptions { get }
  @available(iOS, introduced: 2.0, deprecated: 100000, renamed: "NSDataReadingOptions.uncached")
  static var uncachedRead: NSDataReadingOptions { get }
  @available(iOS, introduced: 2.0, deprecated: 100000, renamed: "NSDataReadingOptions.uncached")
  @available(swift, obsoleted: 3, renamed: "uncachedRead")
  static var UncachedRead: NSDataReadingOptions { get }
}
@available(*, unavailable, message: "Not available in Swift")
typealias NSDataWritingOptions = Int
struct NSDataWritingOptions : OptionSet, @unchecked Sendable {
  init(rawValue: UInt)
  let rawValue: UInt
  typealias RawValue = UInt
  typealias Element = NSDataWritingOptions
  typealias ArrayLiteralElement = NSDataWritingOptions
  static var atomic: NSDataWritingOptions { get }
  @available(swift, obsoleted: 3, renamed: "atomic")
  static var DataWritingAtomic: NSDataWritingOptions { get }
  @available(iOS 6.0, *)
  static var withoutOverwriting: NSDataWritingOptions { get }
  @available(iOS 6.0, *)
  @available(swift, obsoleted: 3, renamed: "withoutOverwriting")
  static var DataWritingWithoutOverwriting: NSDataWritingOptions { get }
  @available(iOS 4.0, *)
  static var noFileProtection: NSDataWritingOptions { get }
  @available(iOS 4.0, *)
  @available(swift, obsoleted: 3, renamed: "noFileProtection")
  static var DataWritingFileProtectionNone: NSDataWritingOptions { get }
  @available(iOS 4.0, *)
  static var completeFileProtection: NSDataWritingOptions { get }
  @available(iOS 4.0, *)
  @available(swift, obsoleted: 3, renamed: "completeFileProtection")
  static var DataWritingFileProtectionComplete: NSDataWritingOptions { get }
  @available(iOS 5.0, *)
  static var completeFileProtectionUnlessOpen: NSDataWritingOptions { get }
  @available(iOS 5.0, *)
  @available(swift, obsoleted: 3, renamed: "completeFileProtectionUnlessOpen")
  static var DataWritingFileProtectionCompleteUnlessOpen: NSDataWritingOptions { get }
  @available(iOS 5.0, *)
  static var completeFileProtectionUntilFirstUserAuthentication: NSDataWritingOptions { get }
  @available(iOS 5.0, *)
  @available(swift, obsoleted: 3, renamed: "completeFileProtectionUntilFirstUserAuthentication")
  static var DataWritingFileProtectionCompleteUntilFirstUserAuthentication: NSDataWritingOptions { get }
  @available(iOS 4.0, *)
  static var fileProtectionMask: NSDataWritingOptions { get }
  @available(iOS 4.0, *)
  @available(swift, obsoleted: 3, renamed: "fileProtectionMask")
  static var DataWritingFileProtectionMask: NSDataWritingOptions { get }
  @available(iOS, introduced: 2.0, deprecated: 100000, renamed: "NSDataWritingOptions.atomic")
  static var atomicWrite: NSDataWritingOptions { get }
  @available(iOS, introduced: 2.0, deprecated: 100000, renamed: "NSDataWritingOptions.atomic")
  @available(swift, obsoleted: 3, renamed: "atomicWrite")
  static var AtomicWrite: NSDataWritingOptions { get }
}

/****************	Data Search Options	****************/
@available(*, unavailable, message: "Not available in Swift")
typealias NSDataSearchOptions = Int
@available(iOS 4.0, *)
struct NSDataSearchOptions : OptionSet, @unchecked Sendable {
  init(rawValue: UInt)
  let rawValue: UInt
  typealias RawValue = UInt
  typealias Element = NSDataSearchOptions
  typealias ArrayLiteralElement = NSDataSearchOptions
  static var backwards: NSDataSearchOptions { get }
  @available(swift, obsoleted: 3, renamed: "backwards")
  static var Backwards: NSDataSearchOptions { get }
  static var anchored: NSDataSearchOptions { get }
  @available(swift, obsoleted: 3, renamed: "anchored")
  static var Anchored: NSDataSearchOptions { get }
}

/****************        Base 64 Options	****************/
@available(*, unavailable, message: "Not available in Swift")
typealias NSDataBase64EncodingOptions = Int
@available(iOS 7.0, *)
struct NSDataBase64EncodingOptions : OptionSet, @unchecked Sendable {
  init(rawValue: UInt)
  let rawValue: UInt
  typealias RawValue = UInt
  typealias Element = NSDataBase64EncodingOptions
  typealias ArrayLiteralElement = NSDataBase64EncodingOptions
  static var lineLength64Characters: NSDataBase64EncodingOptions { get }
  @available(swift, obsoleted: 3, renamed: "lineLength64Characters")
  static var NSDataBase64Encoding64CharacterLineLength: NSDataBase64EncodingOptions { get }
  static var lineLength76Characters: NSDataBase64EncodingOptions { get }
  @available(swift, obsoleted: 3, renamed: "lineLength76Characters")
  static var NSDataBase64Encoding76CharacterLineLength: NSDataBase64EncodingOptions { get }
  static var endLineWithCarriageReturn: NSDataBase64EncodingOptions { get }
  @available(swift, obsoleted: 3, renamed: "endLineWithCarriageReturn")
  static var NSDataBase64EncodingEndLineWithCarriageReturn: NSDataBase64EncodingOptions { get }
  static var endLineWithLineFeed: NSDataBase64EncodingOptions { get }
  @available(swift, obsoleted: 3, renamed: "endLineWithLineFeed")
  static var NSDataBase64EncodingEndLineWithLineFeed: NSDataBase64EncodingOptions { get }
}
@available(*, unavailable, message: "Not available in Swift")
typealias NSDataBase64DecodingOptions = Int
@available(iOS 7.0, *)
struct NSDataBase64DecodingOptions : OptionSet, @unchecked Sendable {
  init(rawValue: UInt)
  let rawValue: UInt
  typealias RawValue = UInt
  typealias Element = NSDataBase64DecodingOptions
  typealias ArrayLiteralElement = NSDataBase64DecodingOptions
  static var ignoreUnknownCharacters: NSDataBase64DecodingOptions { get }
  @available(swift, obsoleted: 3, renamed: "ignoreUnknownCharacters")
  static var IgnoreUnknownCharacters: NSDataBase64DecodingOptions { get }
}

/****************	Immutable Data		****************/
class NSData : NSObject, NSCopying, NSMutableCopying, NSSecureCoding {
  var length: Int { get }
  var bytes: UnsafeRawPointer { get }
  init()
  class var supportsSecureCoding: Bool { get }
  func copy(with zone: NSZone? = nil) -> Any
  func mutableCopy(with zone: NSZone? = nil) -> Any
  func encode(with coder: NSCoder)
  init?(coder: NSCoder)
}

extension NSData : _HasCustomAnyHashableRepresentation {
  @nonobjc func _toCustomAnyHashable() -> AnyHashable?
}

extension NSData : DataProtocol {
  @nonobjc var startIndex: Int { get }
  @nonobjc var endIndex: Int { get }
  @nonobjc func lastRange<D, R>(of data: D, in r: R) -> Range<Int>? where D : DataProtocol, R : RangeExpression, R.Bound == Int
  @nonobjc func firstRange<D, R>(of data: D, in r: R) -> Range<Int>? where D : DataProtocol, R : RangeExpression, R.Bound == Int
  @nonobjc var regions: [Data] { get }
  @nonobjc subscript(position: Int) -> UInt8 { get }
  typealias Element = UInt8
  typealias Index = Int
  typealias Indices = Range<Int>
  typealias Iterator = IndexingIterator<NSData>
  typealias Regions = [Data]
  typealias SubSequence = Slice<NSData>
}
extension NSData {
  var description: String { get }
  func getBytes(_ buffer: UnsafeMutableRawPointer, length: Int)
  func getBytes(_ buffer: UnsafeMutableRawPointer, range: NSRange)
  func isEqual(to other: Data) -> Bool
  @available(swift, obsoleted: 3, renamed: "isEqual(to:)")
  func isEqualToData(_ other: Data) -> Bool
  func subdata(with range: NSRange) -> Data
  @available(swift, obsoleted: 3, renamed: "subdata(with:)")
  func subdataWithRange(_ range: NSRange) -> Data
  func write(toFile path: String, atomically useAuxiliaryFile: Bool) -> Bool
  @available(swift, obsoleted: 3, renamed: "write(toFile:atomically:)")
  func writeToFile(_ path: String, atomically useAuxiliaryFile: Bool) -> Bool
  func write(to url: URL, atomically: Bool) -> Bool
  @available(swift, obsoleted: 3, renamed: "write(to:atomically:)")
  func writeToURL(_ url: URL, atomically: Bool) -> Bool
  func write(toFile path: String, options writeOptionsMask: NSDataWritingOptions = []) throws
  @available(swift, obsoleted: 3, renamed: "write(toFile:options:)")
  func writeToFile(_ path: String, options writeOptionsMask: NSDataWritingOptions = []) throws
  func write(to url: URL, options writeOptionsMask: NSDataWritingOptions = []) throws
  @available(swift, obsoleted: 3, renamed: "write(to:options:)")
  func writeToURL(_ url: URL, options writeOptionsMask: NSDataWritingOptions = []) throws
  @available(iOS 4.0, *)
  func range(of dataToFind: Data, options mask: NSDataSearchOptions = [], in searchRange: NSRange) -> NSRange
  @available(iOS 4.0, *)
  @available(swift, obsoleted: 3, renamed: "range(of:options:in:)")
  func rangeOfData(_ dataToFind: Data, options mask: NSDataSearchOptions = [], range searchRange: NSRange) -> NSRange
  @available(iOS 7.0, *)
  func enumerateBytes(_ block: (UnsafeRawPointer, NSRange, UnsafeMutablePointer<ObjCBool>) -> Void)
  @available(iOS 7.0, *)
  @available(swift, obsoleted: 3, renamed: "enumerateBytes(_:)")
  func enumerateByteRangesUsingBlock(_ block: (UnsafeRawPointer, NSRange, UnsafeMutablePointer<ObjCBool>) -> Void)
}
extension NSData {
  @available(*, unavailable, renamed: "init()", message: "Not available in Swift")
  class func data() -> Self
  @available(*, unavailable, message: "superseded by import of -[NSData(NSDataCreation) initWithBytes:length:]")
  convenience init(bytes: UnsafeRawPointer?, length: Int)
  @available(*, unavailable, renamed: "init(bytes:length:)", message: "Not available in Swift")
  class func dataWithBytes(_ bytes: UnsafeRawPointer?, length: Int) -> Self
  @available(*, unavailable, message: "superseded by import of -[NSData(NSDataCreation) initWithBytesNoCopy:length:]")
  convenience init(bytesNoCopy bytes: UnsafeMutableRawPointer, length: Int)
  @available(*, unavailable, renamed: "init(bytesNoCopy:length:)", message: "Not available in Swift")
  class func dataWithBytesNoCopy(_ bytes: UnsafeMutableRawPointer, length: Int) -> Self
  @available(*, unavailable, message: "superseded by import of -[NSData(NSDataCreation) initWithBytesNoCopy:length:freeWhenDone:]")
  convenience init(bytesNoCopy bytes: UnsafeMutableRawPointer, length: Int, freeWhenDone b: Bool)
  @available(*, unavailable, renamed: "init(bytesNoCopy:length:freeWhenDone:)", message: "Not available in Swift")
  class func dataWithBytesNoCopy(_ bytes: UnsafeMutableRawPointer, length: Int, freeWhenDone b: Bool) -> Self
  @available(*, unavailable, message: "superseded by import of -[NSData(NSDataCreation) initWithContentsOfFile:options:error:]")
  convenience init(contentsOfFile path: String, options readOptionsMask: NSDataReadingOptions = []) throws
  @available(*, unavailable, renamed: "init(contentsOfFile:options:)", message: "Not available in Swift")
  class func dataWithContentsOfFile(_ path: String, options readOptionsMask: NSDataReadingOptions = []) throws -> Self
  @available(*, unavailable, message: "superseded by import of -[NSData(NSDataCreation) initWithContentsOfURL:options:error:]")
  convenience init(contentsOf url: URL, options readOptionsMask: NSDataReadingOptions = []) throws
  @available(swift, obsoleted: 3, renamed: "init(contentsOf:options:)")
  convenience init(contentsOfURL url: URL, options readOptionsMask: NSDataReadingOptions = []) throws
  @available(*, unavailable, renamed: "init(contentsOf:options:)", message: "Not available in Swift")
  class func dataWithContentsOfURL(_ url: URL, options readOptionsMask: NSDataReadingOptions = []) throws -> Self
  @available(*, unavailable, message: "superseded by import of -[NSData(NSDataCreation) initWithContentsOfFile:]")
  convenience init?(contentsOfFile path: String)
  @available(*, unavailable, renamed: "init(contentsOfFile:)", message: "Not available in Swift")
  class func dataWithContentsOfFile(_ path: String) -> Self?
  @available(*, unavailable, message: "superseded by import of -[NSData(NSDataCreation) initWithContentsOfURL:]")
  convenience init?(contentsOf url: URL)
  @available(swift, obsoleted: 3, renamed: "init(contentsOf:)")
  convenience init?(contentsOfURL url: URL)
  @available(*, unavailable, renamed: "init(contentsOf:)", message: "Not available in Swift")
  class func dataWithContentsOfURL(_ url: URL) -> Self?
  init(bytes: UnsafeRawPointer?, length: Int)
  init(bytesNoCopy bytes: UnsafeMutableRawPointer, length: Int)
  init(bytesNoCopy bytes: UnsafeMutableRawPointer, length: Int, freeWhenDone b: Bool)
  @available(iOS 7.0, *)
  init(bytesNoCopy bytes: UnsafeMutableRawPointer, length: Int, deallocator: ((UnsafeMutableRawPointer, Int) -> Void)? = nil)
  init(contentsOfFile path: String, options readOptionsMask: NSDataReadingOptions = []) throws
  init(contentsOf url: URL, options readOptionsMask: NSDataReadingOptions = []) throws
  @available(swift, obsoleted: 3, renamed: "init(contentsOf:options:)")
  init(contentsOfURL url: URL, options readOptionsMask: NSDataReadingOptions = []) throws
  init?(contentsOfFile path: String)
  init?(contentsOf url: URL)
  @available(swift, obsoleted: 3, renamed: "init(contentsOf:)")
  init?(contentsOfURL url: URL)
  init(data: Data)
  @available(*, unavailable, renamed: "init(data:)", message: "Not available in Swift")
  class func dataWithData(_ data: Data) -> Self
}
extension NSData {
  @available(iOS 7.0, *)
  init?(base64Encoded base64String: String, options: NSDataBase64DecodingOptions = [])
  @available(iOS 7.0, *)
  @available(swift, obsoleted: 3, renamed: "init(base64Encoded:options:)")
  init?(base64EncodedString base64String: String, options: NSDataBase64DecodingOptions = [])
  @available(iOS 7.0, *)
  func base64EncodedString(options: NSDataBase64EncodingOptions = []) -> String
  @available(iOS 7.0, *)
  @available(swift, obsoleted: 3, renamed: "base64EncodedString(options:)")
  func base64EncodedStringWithOptions(_ options: NSDataBase64EncodingOptions = []) -> String
  @available(iOS 7.0, *)
  init?(base64Encoded base64Data: Data, options: NSDataBase64DecodingOptions = [])
  @available(iOS 7.0, *)
  @available(swift, obsoleted: 3, renamed: "init(base64Encoded:options:)")
  init?(base64EncodedData base64Data: Data, options: NSDataBase64DecodingOptions = [])
  @available(iOS 7.0, *)
  func base64EncodedData(options: NSDataBase64EncodingOptions = []) -> Data
  @available(iOS 7.0, *)
  @available(swift, obsoleted: 3, renamed: "base64EncodedData(options:)")
  func base64EncodedDataWithOptions(_ options: NSDataBase64EncodingOptions = []) -> Data
}
@available(iOS 13.0, *)
@available(swift, obsoleted: 3, renamed: "NSData.CompressionAlgorithm")
typealias NSDataCompressionAlgorithm = NSData.CompressionAlgorithm
extension NSData {
  @available(iOS 13.0, *)
  enum CompressionAlgorithm : Int, @unchecked Sendable {
    init?(rawValue: Int)
    var rawValue: Int { get }
    typealias RawValue = Int
    case lzfse
    @available(swift, obsoleted: 3, renamed: "lzfse")
    static var NSDataCompressionAlgorithmLZFSE: NSData.CompressionAlgorithm { get }
    case lz4
    @available(swift, obsoleted: 3, renamed: "lz4")
    static var NSDataCompressionAlgorithmLZ4: NSData.CompressionAlgorithm { get }
    case lzma
    @available(swift, obsoleted: 3, renamed: "lzma")
    static var NSDataCompressionAlgorithmLZMA: NSData.CompressionAlgorithm { get }
    case zlib
    @available(swift, obsoleted: 3, renamed: "zlib")
    static var NSDataCompressionAlgorithmZlib: NSData.CompressionAlgorithm { get }
  }
}
extension NSData {
  @available(iOS 13.0, *)
  func decompressed(using algorithm: NSData.CompressionAlgorithm) throws -> Self
  @available(iOS 13.0, *)
  @available(swift, obsoleted: 3, renamed: "decompressed(using:)")
  func decompressedDataUsingAlgorithm(_ algorithm: NSData.CompressionAlgorithm) throws -> Self
  @available(iOS 13.0, *)
  func compressed(using algorithm: NSData.CompressionAlgorithm) throws -> Self
  @available(iOS 13.0, *)
  @available(swift, obsoleted: 3, renamed: "compressed(using:)")
  func compressedDataUsingAlgorithm(_ algorithm: NSData.CompressionAlgorithm) throws -> Self
}
extension NSData {
  @available(iOS, introduced: 2.0, deprecated: 8.0, message: "This method is unsafe because it could potentially cause buffer overruns. Use -getBytes:length: instead.")
  func getBytes(_ buffer: UnsafeMutableRawPointer)
  @available(iOS, introduced: 2.0, deprecated: 8.0, message: "Use +dataWithContentsOfURL:options:error: and NSDataReadingMappedIfSafe or NSDataReadingMappedAlways instead.")
  class func dataWithContentsOfMappedFile(_ path: String) -> Any?
  @available(iOS, introduced: 2.0, deprecated: 8.0, message: "Use -initWithContentsOfURL:options:error: and NSDataReadingMappedIfSafe or NSDataReadingMappedAlways instead.")
  init?(contentsOfMappedFile path: String)
  @available(iOS, unavailable, introduced: 4.0, deprecated: 7.0, message: "Use initWithBase64EncodedString:options: instead")
  init?(base64Encoding base64String: String)
  @available(iOS, unavailable, introduced: 4.0, deprecated: 7.0, message: "Use base64EncodedStringWithOptions: instead")
  func base64Encoding() -> String
}

/****************	Mutable Data		****************/
class NSMutableData : NSData {
  var mutableBytes: UnsafeMutableRawPointer { get }
  var length: Int
  init()
  init?(coder: NSCoder)
  @available(*, unavailable, message: "superseded by import of -[NSData(NSDataCreation) initWithBytes:length:]")
  convenience init(bytes: UnsafeRawPointer?, length: Int)
  @available(*, unavailable, message: "superseded by import of -[NSData(NSDataCreation) initWithBytesNoCopy:length:]")
  convenience init(bytesNoCopy bytes: UnsafeMutableRawPointer, length: Int)
  @available(*, unavailable, message: "superseded by import of -[NSData(NSDataCreation) initWithBytesNoCopy:length:freeWhenDone:]")
  convenience init(bytesNoCopy bytes: UnsafeMutableRawPointer, length: Int, freeWhenDone b: Bool)
  @available(*, unavailable, message: "superseded by import of -[NSData(NSDataCreation) initWithContentsOfFile:options:error:]")
  convenience init(contentsOfFile path: String, options readOptionsMask: NSDataReadingOptions = []) throws
  @available(*, unavailable, message: "superseded by import of -[NSData(NSDataCreation) initWithContentsOfURL:options:error:]")
  convenience init(contentsOf url: URL, options readOptionsMask: NSDataReadingOptions = []) throws
  @available(*, unavailable, message: "superseded by import of -[NSData(NSDataCreation) initWithContentsOfFile:]")
  convenience init?(contentsOfFile path: String)
  @available(*, unavailable, message: "superseded by import of -[NSData(NSDataCreation) initWithContentsOfURL:]")
  convenience init?(contentsOf url: URL)
  init(bytes: UnsafeRawPointer?, length: Int)
  init(bytesNoCopy bytes: UnsafeMutableRawPointer, length: Int)
  init(bytesNoCopy bytes: UnsafeMutableRawPointer, length: Int, freeWhenDone b: Bool)
  @available(iOS 7.0, *)
  init(bytesNoCopy bytes: UnsafeMutableRawPointer, length: Int, deallocator: ((UnsafeMutableRawPointer, Int) -> Void)? = nil)
  init(contentsOfFile path: String, options readOptionsMask: NSDataReadingOptions = []) throws
  init(contentsOf url: URL, options readOptionsMask: NSDataReadingOptions = []) throws
  init?(contentsOfFile path: String)
  init?(contentsOf url: URL)
  init(data: Data)
  @available(iOS 7.0, *)
  init?(base64Encoded base64String: String, options: NSDataBase64DecodingOptions = [])
  @available(iOS 7.0, *)
  init?(base64Encoded base64Data: Data, options: NSDataBase64DecodingOptions = [])
  @available(iOS, introduced: 2.0, deprecated: 8.0, message: "Use -initWithContentsOfURL:options:error: and NSDataReadingMappedIfSafe or NSDataReadingMappedAlways instead.")
  init?(contentsOfMappedFile path: String)
  @available(iOS, unavailable, introduced: 4.0, deprecated: 7.0, message: "Use initWithBase64EncodedString:options: instead")
  init?(base64Encoding base64String: String)
}
extension NSMutableData {
  func append(_ bytes: UnsafeRawPointer, length: Int)
  @available(swift, obsoleted: 3, renamed: "append(_:length:)")
  func appendBytes(_ bytes: UnsafeRawPointer, length: Int)
  func append(_ other: Data)
  @available(swift, obsoleted: 3, renamed: "append(_:)")
  func appendData(_ other: Data)
  func increaseLength(by extraLength: Int)
  @available(swift, obsoleted: 3, renamed: "increaseLength(by:)")
  func increaseLengthBy(_ extraLength: Int)
  func replaceBytes(in range: NSRange, withBytes bytes: UnsafeRawPointer)
  @available(swift, obsoleted: 3, renamed: "replaceBytes(in:withBytes:)")
  func replaceBytesInRange(_ range: NSRange, withBytes bytes: UnsafeRawPointer)
  func resetBytes(in range: NSRange)
  @available(swift, obsoleted: 3, renamed: "resetBytes(in:)")
  func resetBytesInRange(_ range: NSRange)
  func setData(_ data: Data)
  func replaceBytes(in range: NSRange, withBytes replacementBytes: UnsafeRawPointer?, length replacementLength: Int)
  @available(swift, obsoleted: 3, renamed: "replaceBytes(in:withBytes:length:)")
  func replaceBytesInRange(_ range: NSRange, withBytes replacementBytes: UnsafeRawPointer?, length replacementLength: Int)
}
extension NSMutableData {
  @available(*, unavailable, message: "superseded by import of -[NSMutableData(NSMutableDataCreation) initWithCapacity:]")
  convenience init?(capacity aNumItems: Int)
  @available(*, unavailable, renamed: "init(capacity:)", message: "Not available in Swift")
  class func dataWithCapacity(_ aNumItems: Int) -> Self?
  @available(*, unavailable, message: "superseded by import of -[NSMutableData(NSMutableDataCreation) initWithLength:]")
  convenience init?(length: Int)
  @available(*, unavailable, renamed: "init(length:)", message: "Not available in Swift")
  class func dataWithLength(_ length: Int) -> Self?
  init?(capacity: Int)
  init?(length: Int)
}
extension NSMutableData {
  @available(iOS 13.0, *)
  func decompress(using algorithm: NSData.CompressionAlgorithm) throws
  @available(iOS 13.0, *)
  @available(swift, obsoleted: 3, renamed: "decompress(using:)")
  func decompressUsingAlgorithm(_ algorithm: NSData.CompressionAlgorithm) throws
  @available(iOS 13.0, *)
  func compress(using algorithm: NSData.CompressionAlgorithm) throws
  @available(iOS 13.0, *)
  @available(swift, obsoleted: 3, renamed: "compress(using:)")
  func compressUsingAlgorithm(_ algorithm: NSData.CompressionAlgorithm) throws
}

/****************	    Purgeable Data	****************/
@available(iOS 4.0, *)
class NSPurgeableData : NSMutableData, NSDiscardableContent {
  init()
  init?(coder: NSCoder)
  @available(*, unavailable, message: "superseded by import of -[NSData(NSDataCreation) initWithBytes:length:]")
  convenience init(bytes: UnsafeRawPointer?, length: Int)
  @available(*, unavailable, message: "superseded by import of -[NSData(NSDataCreation) initWithBytesNoCopy:length:]")
  convenience init(bytesNoCopy bytes: UnsafeMutableRawPointer, length: Int)
  @available(*, unavailable, message: "superseded by import of -[NSData(NSDataCreation) initWithBytesNoCopy:length:freeWhenDone:]")
  convenience init(bytesNoCopy bytes: UnsafeMutableRawPointer, length: Int, freeWhenDone b: Bool)
  @available(*, unavailable, message: "superseded by import of -[NSData(NSDataCreation) initWithContentsOfFile:options:error:]")
  convenience init(contentsOfFile path: String, options readOptionsMask: NSDataReadingOptions = []) throws
  @available(*, unavailable, message: "superseded by import of -[NSData(NSDataCreation) initWithContentsOfURL:options:error:]")
  convenience init(contentsOf url: URL, options readOptionsMask: NSDataReadingOptions = []) throws
  @available(*, unavailable, message: "superseded by import of -[NSData(NSDataCreation) initWithContentsOfFile:]")
  convenience init?(contentsOfFile path: String)
  @available(*, unavailable, message: "superseded by import of -[NSData(NSDataCreation) initWithContentsOfURL:]")
  convenience init?(contentsOf url: URL)
  init(bytes: UnsafeRawPointer?, length: Int)
  init(bytesNoCopy bytes: UnsafeMutableRawPointer, length: Int)
  init(bytesNoCopy bytes: UnsafeMutableRawPointer, length: Int, freeWhenDone b: Bool)
  @available(iOS 7.0, *)
  init(bytesNoCopy bytes: UnsafeMutableRawPointer, length: Int, deallocator: ((UnsafeMutableRawPointer, Int) -> Void)? = nil)
  init(contentsOfFile path: String, options readOptionsMask: NSDataReadingOptions = []) throws
  init(contentsOf url: URL, options readOptionsMask: NSDataReadingOptions = []) throws
  init?(contentsOfFile path: String)
  init?(contentsOf url: URL)
  init(data: Data)
  @available(iOS 7.0, *)
  init?(base64Encoded base64String: String, options: NSDataBase64DecodingOptions = [])
  @available(iOS 7.0, *)
  init?(base64Encoded base64Data: Data, options: NSDataBase64DecodingOptions = [])
  @available(iOS, introduced: 2.0, deprecated: 8.0, message: "Use -initWithContentsOfURL:options:error: and NSDataReadingMappedIfSafe or NSDataReadingMappedAlways instead.")
  init?(contentsOfMappedFile path: String)
  @available(iOS, unavailable, introduced: 4.0, deprecated: 7.0, message: "Use initWithBase64EncodedString:options: instead")
  init?(base64Encoding base64String: String)
  @available(*, unavailable, message: "superseded by import of -[NSMutableData(NSMutableDataCreation) initWithCapacity:]")
  convenience init?(capacity aNumItems: Int)
  @available(*, unavailable, message: "superseded by import of -[NSMutableData(NSMutableDataCreation) initWithLength:]")
  convenience init?(length: Int)
  init?(capacity: Int)
  init?(length: Int)
  @available(iOS 4.0, *)
  func beginContentAccess() -> Bool
  @available(iOS 4.0, *)
  func endContentAccess()
  @available(iOS 4.0, *)
  func discardContentIfPossible()
  @available(iOS 4.0, *)
  func isContentDiscarded() -> Bool
}
