@_exported import CoreFoundation

extension NSString {
  class func path(withComponents components: [String]) -> String
  @available(swift, obsoleted: 3, renamed: "path(withComponents:)")
  class func pathWithComponents(_ components: [String]) -> String
  var pathComponents: [String] { get }
  var isAbsolutePath: Bool { get }
  @available(swift, obsoleted: 3, renamed: "isAbsolutePath")
  var absolutePath: Bool { get }
  var lastPathComponent: String { get }
  var deletingLastPathComponent: String { get }
  @available(swift, obsoleted: 3, renamed: "deletingLastPathComponent")
  var stringByDeletingLastPathComponent: String { get }
  func appendingPathComponent(_ str: String) -> String
  @available(swift, obsoleted: 3, renamed: "appendingPathComponent(_:)")
  func stringByAppendingPathComponent(_ str: String) -> String
  var pathExtension: String { get }
  var deletingPathExtension: String { get }
  @available(swift, obsoleted: 3, renamed: "deletingPathExtension")
  var stringByDeletingPathExtension: String { get }
  func appendingPathExtension(_ str: String) -> String?
  @available(swift, obsoleted: 3, renamed: "appendingPathExtension(_:)")
  func stringByAppendingPathExtension(_ str: String) -> String?
  var abbreviatingWithTildeInPath: String { get }
  @available(swift, obsoleted: 3, renamed: "abbreviatingWithTildeInPath")
  var stringByAbbreviatingWithTildeInPath: String { get }
  var expandingTildeInPath: String { get }
  @available(swift, obsoleted: 3, renamed: "expandingTildeInPath")
  var stringByExpandingTildeInPath: String { get }
  var standardizingPath: String { get }
  @available(swift, obsoleted: 3, renamed: "standardizingPath")
  var stringByStandardizingPath: String { get }
  var resolvingSymlinksInPath: String { get }
  @available(swift, obsoleted: 3, renamed: "resolvingSymlinksInPath")
  var stringByResolvingSymlinksInPath: String { get }
  func strings(byAppendingPaths paths: [String]) -> [String]
  @available(swift, obsoleted: 3, renamed: "strings(byAppendingPaths:)")
  func stringsByAppendingPaths(_ paths: [String]) -> [String]
  func completePath(into outputName: AutoreleasingUnsafeMutablePointer<NSString?>?, caseSensitive flag: Bool, matchesInto outputArray: AutoreleasingUnsafeMutablePointer<NSArray?>?, filterTypes: [String]?) -> Int
  @available(swift, obsoleted: 3, renamed: "completePath(into:caseSensitive:matchesInto:filterTypes:)")
  func completePathIntoString(_ outputName: AutoreleasingUnsafeMutablePointer<NSString?>?, caseSensitive flag: Bool, matchesIntoArray outputArray: AutoreleasingUnsafeMutablePointer<NSArray?>?, filterTypes: [String]?) -> Int
  var fileSystemRepresentation: UnsafePointer<CChar> { get }
  func getFileSystemRepresentation(_ cname: UnsafeMutablePointer<CChar>, maxLength max: Int) -> Bool
}
extension NSArray {
  func pathsMatchingExtensions(_ filterTypes: [String]) -> [String]
}
func NSUserName() -> String
func NSFullUserName() -> String
func NSHomeDirectory() -> String
func NSHomeDirectoryForUser(_ userName: String?) -> String?
func NSTemporaryDirectory() -> String
func NSOpenStepRootDirectory() -> String
@available(swift, obsoleted: 3, renamed: "FileManager.SearchPathDirectory")
typealias NSSearchPathDirectory = FileManager.SearchPathDirectory
extension FileManager {
  enum SearchPathDirectory : UInt, @unchecked Sendable {
    init?(rawValue: UInt)
    var rawValue: UInt { get }
    typealias RawValue = UInt
    case applicationDirectory
    @available(swift, obsoleted: 3, renamed: "applicationDirectory")
    static var ApplicationDirectory: FileManager.SearchPathDirectory { get }
    case demoApplicationDirectory
    @available(swift, obsoleted: 3, renamed: "demoApplicationDirectory")
    static var DemoApplicationDirectory: FileManager.SearchPathDirectory { get }
    case developerApplicationDirectory
    @available(swift, obsoleted: 3, renamed: "developerApplicationDirectory")
    static var DeveloperApplicationDirectory: FileManager.SearchPathDirectory { get }
    case adminApplicationDirectory
    @available(swift, obsoleted: 3, renamed: "adminApplicationDirectory")
    static var AdminApplicationDirectory: FileManager.SearchPathDirectory { get }
    case libraryDirectory
    @available(swift, obsoleted: 3, renamed: "libraryDirectory")
    static var LibraryDirectory: FileManager.SearchPathDirectory { get }
    case developerDirectory
    @available(swift, obsoleted: 3, renamed: "developerDirectory")
    static var DeveloperDirectory: FileManager.SearchPathDirectory { get }
    case userDirectory
    @available(swift, obsoleted: 3, renamed: "userDirectory")
    static var UserDirectory: FileManager.SearchPathDirectory { get }
    case documentationDirectory
    @available(swift, obsoleted: 3, renamed: "documentationDirectory")
    static var DocumentationDirectory: FileManager.SearchPathDirectory { get }
    case documentDirectory
    @available(swift, obsoleted: 3, renamed: "documentDirectory")
    static var DocumentDirectory: FileManager.SearchPathDirectory { get }
    case coreServiceDirectory
    @available(swift, obsoleted: 3, renamed: "coreServiceDirectory")
    static var CoreServiceDirectory: FileManager.SearchPathDirectory { get }
    @available(iOS 4.0, *)
    case autosavedInformationDirectory
    @available(iOS 4.0, *)
    @available(swift, obsoleted: 3, renamed: "autosavedInformationDirectory")
    static var AutosavedInformationDirectory: FileManager.SearchPathDirectory { get }
    case desktopDirectory
    @available(swift, obsoleted: 3, renamed: "desktopDirectory")
    static var DesktopDirectory: FileManager.SearchPathDirectory { get }
    case cachesDirectory
    @available(swift, obsoleted: 3, renamed: "cachesDirectory")
    static var CachesDirectory: FileManager.SearchPathDirectory { get }
    case applicationSupportDirectory
    @available(swift, obsoleted: 3, renamed: "applicationSupportDirectory")
    static var ApplicationSupportDirectory: FileManager.SearchPathDirectory { get }
    @available(iOS 2.0, *)
    case downloadsDirectory
    @available(iOS 2.0, *)
    @available(swift, obsoleted: 3, renamed: "downloadsDirectory")
    static var DownloadsDirectory: FileManager.SearchPathDirectory { get }
    @available(iOS 4.0, *)
    case inputMethodsDirectory
    @available(iOS 4.0, *)
    @available(swift, obsoleted: 3, renamed: "inputMethodsDirectory")
    static var InputMethodsDirectory: FileManager.SearchPathDirectory { get }
    @available(iOS 4.0, *)
    case moviesDirectory
    @available(iOS 4.0, *)
    @available(swift, obsoleted: 3, renamed: "moviesDirectory")
    static var MoviesDirectory: FileManager.SearchPathDirectory { get }
    @available(iOS 4.0, *)
    case musicDirectory
    @available(iOS 4.0, *)
    @available(swift, obsoleted: 3, renamed: "musicDirectory")
    static var MusicDirectory: FileManager.SearchPathDirectory { get }
    @available(iOS 4.0, *)
    case picturesDirectory
    @available(iOS 4.0, *)
    @available(swift, obsoleted: 3, renamed: "picturesDirectory")
    static var PicturesDirectory: FileManager.SearchPathDirectory { get }
    @available(iOS 4.0, *)
    case printerDescriptionDirectory
    @available(iOS 4.0, *)
    @available(swift, obsoleted: 3, renamed: "printerDescriptionDirectory")
    static var PrinterDescriptionDirectory: FileManager.SearchPathDirectory { get }
    @available(iOS 4.0, *)
    case sharedPublicDirectory
    @available(iOS 4.0, *)
    @available(swift, obsoleted: 3, renamed: "sharedPublicDirectory")
    static var SharedPublicDirectory: FileManager.SearchPathDirectory { get }
    @available(iOS 4.0, *)
    case preferencePanesDirectory
    @available(iOS 4.0, *)
    @available(swift, obsoleted: 3, renamed: "preferencePanesDirectory")
    static var PreferencePanesDirectory: FileManager.SearchPathDirectory { get }
    @available(iOS, unavailable)
    case applicationScriptsDirectory
    @available(iOS 4.0, *)
    case itemReplacementDirectory
    @available(iOS 4.0, *)
    @available(swift, obsoleted: 3, renamed: "itemReplacementDirectory")
    static var ItemReplacementDirectory: FileManager.SearchPathDirectory { get }
    case allApplicationsDirectory
    @available(swift, obsoleted: 3, renamed: "allApplicationsDirectory")
    static var AllApplicationsDirectory: FileManager.SearchPathDirectory { get }
    case allLibrariesDirectory
    @available(swift, obsoleted: 3, renamed: "allLibrariesDirectory")
    static var AllLibrariesDirectory: FileManager.SearchPathDirectory { get }
    @available(iOS 11.0, *)
    case trashDirectory
    @available(iOS 11.0, *)
    @available(swift, obsoleted: 3, renamed: "trashDirectory")
    static var TrashDirectory: FileManager.SearchPathDirectory { get }
  }
  struct SearchPathDomainMask : OptionSet, @unchecked Sendable {
    init(rawValue: UInt)
    let rawValue: UInt
    typealias RawValue = UInt
    typealias Element = FileManager.SearchPathDomainMask
    typealias ArrayLiteralElement = FileManager.SearchPathDomainMask
    static var userDomainMask: FileManager.SearchPathDomainMask { get }
    @available(swift, obsoleted: 3, renamed: "userDomainMask")
    static var UserDomainMask: FileManager.SearchPathDomainMask { get }
    static var localDomainMask: FileManager.SearchPathDomainMask { get }
    @available(swift, obsoleted: 3, renamed: "localDomainMask")
    static var LocalDomainMask: FileManager.SearchPathDomainMask { get }
    static var networkDomainMask: FileManager.SearchPathDomainMask { get }
    @available(swift, obsoleted: 3, renamed: "networkDomainMask")
    static var NetworkDomainMask: FileManager.SearchPathDomainMask { get }
    static var systemDomainMask: FileManager.SearchPathDomainMask { get }
    @available(swift, obsoleted: 3, renamed: "systemDomainMask")
    static var SystemDomainMask: FileManager.SearchPathDomainMask { get }
    static var allDomainsMask: FileManager.SearchPathDomainMask { get }
    @available(swift, obsoleted: 3, renamed: "allDomainsMask")
    static var AllDomainsMask: FileManager.SearchPathDomainMask { get }
  }
}
@available(*, unavailable, message: "Not available in Swift")
typealias NSSearchPathDomainMask = Int
@available(swift, obsoleted: 3, renamed: "FileManager.SearchPathDomainMask")
typealias NSSearchPathDomainMask = FileManager.SearchPathDomainMask
func NSSearchPathForDirectoriesInDomains(_ directory: FileManager.SearchPathDirectory, _ domainMask: FileManager.SearchPathDomainMask, _ expandTilde: Bool) -> [String]
