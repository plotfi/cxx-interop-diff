@_exported import CoreFoundation

struct FileAttributeKey : _ObjectiveCBridgeable, Hashable, Equatable, _SwiftNewtypeWrapper, RawRepresentable, @unchecked Sendable {
  init(_ rawValue: String)
  init(rawValue: String)
  var _rawValue: NSString
  var rawValue: String { get }
  typealias RawValue = String
  typealias _ObjectiveCType = NSString
}
@available(swift, obsoleted: 3, renamed: "FileAttributeKey")
typealias NSFileAttributeKey = FileAttributeKey
struct FileAttributeType : _ObjectiveCBridgeable, Hashable, Equatable, _SwiftNewtypeWrapper, RawRepresentable, @unchecked Sendable {
  init(rawValue: String)
  var _rawValue: NSString
  var rawValue: String { get }
  typealias RawValue = String
  typealias _ObjectiveCType = NSString
}
@available(swift, obsoleted: 3, renamed: "FileAttributeType")
typealias NSFileAttributeType = FileAttributeType
struct FileProtectionType : _ObjectiveCBridgeable, Hashable, Equatable, _SwiftNewtypeWrapper, RawRepresentable, @unchecked Sendable {
  init(rawValue: String)
  var _rawValue: NSString
  var rawValue: String { get }
  typealias RawValue = String
  typealias _ObjectiveCType = NSString
}
@available(swift, obsoleted: 3, renamed: "FileProtectionType")
typealias NSFileProtectionType = FileProtectionType
struct NSFileProviderServiceName : _ObjectiveCBridgeable, Hashable, Equatable, _SwiftNewtypeWrapper, RawRepresentable, @unchecked Sendable {
  init(_ rawValue: String)
  init(rawValue: String)
  var _rawValue: NSString
  var rawValue: String { get }
  typealias RawValue = String
  typealias _ObjectiveCType = NSString
}
var NSFoundationVersionWithFileManagerResourceForkSupport: Int32 { get }
typealias NSVolumeEnumerationOptions = Int
var NSVolumeEnumerationSkipHiddenVolumes: Int { get }
var NSVolumeEnumerationProduceFileReferenceURLs: Int { get }
typealias NSDirectoryEnumerationOptions = Int
var NSDirectoryEnumerationSkipsSubdirectoryDescendants: Int { get }
var NSDirectoryEnumerationSkipsPackageDescendants: Int { get }
var NSDirectoryEnumerationSkipsHiddenFiles: Int { get }
@available(iOS 13.0, *)
var NSDirectoryEnumerationIncludesDirectoriesPostOrder: Int { get }
@available(iOS 13.0, *)
var NSDirectoryEnumerationProducesRelativePathURLs: Int { get }
typealias NSFileManagerItemReplacementOptions = Int
var NSFileManagerItemReplacementUsingNewMetadataOnly: Int { get }
var NSFileManagerItemReplacementWithoutDeletingBackupItem: Int { get }
@available(iOS 8.0, *)
@available(swift, obsoleted: 3, renamed: "FileManager.URLRelationship")
typealias NSURLRelationship = FileManager.URLRelationship
typealias NSFileManagerUnmountOptions = Int
var NSFileManagerUnmountAllPartitionsAndEjectDisk: Int { get }
var NSFileManagerUnmountWithoutUI: Int { get }
@available(iOS, unavailable)
let NSFileManagerUnmountDissentingProcessIdentifierErrorKey: String
@available(iOS 6.0, *)
@available(swift, obsoleted: 3, renamed: "NSNotification.Name.NSUbiquityIdentityDidChange")
let NSUbiquityIdentityDidChangeNotification: NSNotification.Name
extension NSNotification.Name {
  @available(iOS 6.0, *)
  static let NSUbiquityIdentityDidChange: NSNotification.Name
}
class FileManager : NSObject {
  class var `default`: FileManager { get }
  @available(swift, obsoleted: 3, renamed: "default")
  class var defaultManager: FileManager { get }
  @available(iOS 4.0, *)
  func mountedVolumeURLs(includingResourceValuesForKeys propertyKeys: [URLResourceKey]?, options: NSVolumeEnumerationOptions = []) -> [URL]?
  @available(iOS 4.0, *)
  @available(swift, obsoleted: 3, renamed: "mountedVolumeURLs(includingResourceValuesForKeys:options:)")
  func mountedVolumeURLsIncludingResourceValuesForKeys(_ propertyKeys: [URLResourceKey]?, options: NSVolumeEnumerationOptions = []) -> [URL]?
  @available(iOS, unavailable)
  func unmountVolume(at url: URL, options mask: NSFileManagerUnmountOptions = [], completionHandler: @escaping @Sendable (Error?) -> Void)
  @available(iOS, unavailable)
  func unmountVolume(at url: URL, options mask: NSFileManagerUnmountOptions = []) async throws
  @available(swift, obsoleted: 3, renamed: "unmountVolume(at:options:completionHandler:)")
  @available(iOS, unavailable)
  func unmountVolumeAtURL(_ url: URL, options mask: NSFileManagerUnmountOptions = [], completionHandler: @escaping @Sendable (Error?) -> Void)
  @available(iOS 4.0, *)
  func contentsOfDirectory(at url: URL, includingPropertiesForKeys keys: [URLResourceKey]?, options mask: NSDirectoryEnumerationOptions = []) throws -> [URL]
  @available(iOS 4.0, *)
  @available(swift, obsoleted: 3, renamed: "contentsOfDirectory(at:includingPropertiesForKeys:options:)")
  func contentsOfDirectoryAtURL(_ url: URL, includingPropertiesForKeys keys: [URLResourceKey]?, options mask: NSDirectoryEnumerationOptions = []) throws -> [URL]
  @available(iOS 4.0, *)
  func urls(for directory: FileManager.SearchPathDirectory, in domainMask: NSSearchPathDomainMask) -> [URL]
  @available(iOS 4.0, *)
  @available(swift, obsoleted: 3, renamed: "urls(for:in:)")
  func URLsForDirectory(_ directory: FileManager.SearchPathDirectory, inDomains domainMask: NSSearchPathDomainMask) -> [URL]
  @available(iOS 4.0, *)
  func url(for directory: FileManager.SearchPathDirectory, in domain: NSSearchPathDomainMask, appropriateFor url: URL?, create shouldCreate: Bool) throws -> URL
  @available(iOS 4.0, *)
  @available(swift, obsoleted: 3, renamed: "url(for:in:appropriateFor:create:)")
  func URLForDirectory(_ directory: FileManager.SearchPathDirectory, inDomain domain: NSSearchPathDomainMask, appropriateForURL url: URL?, create shouldCreate: Bool) throws -> URL
  @available(iOS 8.0, *)
  func getRelationship(_ outRelationship: UnsafeMutablePointer<FileManager.URLRelationship>, ofDirectoryAt directoryURL: URL, toItemAt otherURL: URL) throws
  @available(iOS 8.0, *)
  @available(swift, obsoleted: 3, renamed: "getRelationship(_:ofDirectoryAt:toItemAt:)")
  func getRelationship(_ outRelationship: UnsafeMutablePointer<FileManager.URLRelationship>, ofDirectoryAtURL directoryURL: URL, toItemAtURL otherURL: URL) throws
  @available(iOS 8.0, *)
  func getRelationship(_ outRelationship: UnsafeMutablePointer<FileManager.URLRelationship>, of directory: FileManager.SearchPathDirectory, inDomain domainMask: NSSearchPathDomainMask, toItemAt url: URL) throws
  @available(iOS 8.0, *)
  @available(swift, obsoleted: 3, renamed: "getRelationship(_:of:inDomain:toItemAt:)")
  func getRelationship(_ outRelationship: UnsafeMutablePointer<FileManager.URLRelationship>, ofDirectory directory: FileManager.SearchPathDirectory, inDomain domainMask: NSSearchPathDomainMask, toItemAtURL url: URL) throws
  @available(iOS 5.0, *)
  func createDirectory(at url: URL, withIntermediateDirectories createIntermediates: Bool, attributes: [FileAttributeKey : Any]? = nil) throws
  @available(iOS 5.0, *)
  @available(swift, obsoleted: 3, renamed: "createDirectory(at:withIntermediateDirectories:attributes:)")
  func createDirectoryAtURL(_ url: URL, withIntermediateDirectories createIntermediates: Bool, attributes: [FileAttributeKey : Any]? = nil) throws
  @available(iOS 5.0, *)
  func createSymbolicLink(at url: URL, withDestinationURL destURL: URL) throws
  @available(iOS 5.0, *)
  @available(swift, obsoleted: 3, renamed: "createSymbolicLink(at:withDestinationURL:)")
  func createSymbolicLinkAtURL(_ url: URL, withDestinationURL destURL: URL) throws
  @available(iOS 2.0, *)
  unowned(unsafe) var delegate: @sil_unmanaged FileManagerDelegate?
  @available(iOS 2.0, *)
  func setAttributes(_ attributes: [FileAttributeKey : Any], ofItemAtPath path: String) throws
  @available(iOS 2.0, *)
  func createDirectory(atPath path: String, withIntermediateDirectories createIntermediates: Bool, attributes: [FileAttributeKey : Any]? = nil) throws
  @available(iOS 2.0, *)
  @available(swift, obsoleted: 3, renamed: "createDirectory(atPath:withIntermediateDirectories:attributes:)")
  func createDirectoryAtPath(_ path: String, withIntermediateDirectories createIntermediates: Bool, attributes: [FileAttributeKey : Any]? = nil) throws
  @available(iOS 2.0, *)
  func contentsOfDirectory(atPath path: String) throws -> [String]
  @available(iOS 2.0, *)
  @available(swift, obsoleted: 3, renamed: "contentsOfDirectory(atPath:)")
  func contentsOfDirectoryAtPath(_ path: String) throws -> [String]
  @available(iOS 2.0, *)
  func subpathsOfDirectory(atPath path: String) throws -> [String]
  @available(iOS 2.0, *)
  @available(swift, obsoleted: 3, renamed: "subpathsOfDirectory(atPath:)")
  func subpathsOfDirectoryAtPath(_ path: String) throws -> [String]
  @available(iOS 2.0, *)
  func attributesOfItem(atPath path: String) throws -> [FileAttributeKey : Any]
  @available(iOS 2.0, *)
  @available(swift, obsoleted: 3, renamed: "attributesOfItem(atPath:)")
  func attributesOfItemAtPath(_ path: String) throws -> [FileAttributeKey : Any]
  @available(iOS 2.0, *)
  func attributesOfFileSystem(forPath path: String) throws -> [FileAttributeKey : Any]
  @available(iOS 2.0, *)
  @available(swift, obsoleted: 3, renamed: "attributesOfFileSystem(forPath:)")
  func attributesOfFileSystemForPath(_ path: String) throws -> [FileAttributeKey : Any]
  @available(iOS 2.0, *)
  func createSymbolicLink(atPath path: String, withDestinationPath destPath: String) throws
  @available(iOS 2.0, *)
  @available(swift, obsoleted: 3, renamed: "createSymbolicLink(atPath:withDestinationPath:)")
  func createSymbolicLinkAtPath(_ path: String, withDestinationPath destPath: String) throws
  @available(iOS 2.0, *)
  func destinationOfSymbolicLink(atPath path: String) throws -> String
  @available(iOS 2.0, *)
  @available(swift, obsoleted: 3, renamed: "destinationOfSymbolicLink(atPath:)")
  func destinationOfSymbolicLinkAtPath(_ path: String) throws -> String
  @available(iOS 2.0, *)
  func copyItem(atPath srcPath: String, toPath dstPath: String) throws
  @available(iOS 2.0, *)
  @available(swift, obsoleted: 3, renamed: "copyItem(atPath:toPath:)")
  func copyItemAtPath(_ srcPath: String, toPath dstPath: String) throws
  @available(iOS 2.0, *)
  func moveItem(atPath srcPath: String, toPath dstPath: String) throws
  @available(iOS 2.0, *)
  @available(swift, obsoleted: 3, renamed: "moveItem(atPath:toPath:)")
  func moveItemAtPath(_ srcPath: String, toPath dstPath: String) throws
  @available(iOS 2.0, *)
  func linkItem(atPath srcPath: String, toPath dstPath: String) throws
  @available(iOS 2.0, *)
  @available(swift, obsoleted: 3, renamed: "linkItem(atPath:toPath:)")
  func linkItemAtPath(_ srcPath: String, toPath dstPath: String) throws
  @available(iOS 2.0, *)
  func removeItem(atPath path: String) throws
  @available(iOS 2.0, *)
  @available(swift, obsoleted: 3, renamed: "removeItem(atPath:)")
  func removeItemAtPath(_ path: String) throws
  @available(iOS 4.0, *)
  func copyItem(at srcURL: URL, to dstURL: URL) throws
  @available(iOS 4.0, *)
  @available(swift, obsoleted: 3, renamed: "copyItem(at:to:)")
  func copyItemAtURL(_ srcURL: URL, toURL dstURL: URL) throws
  @available(iOS 4.0, *)
  func moveItem(at srcURL: URL, to dstURL: URL) throws
  @available(iOS 4.0, *)
  @available(swift, obsoleted: 3, renamed: "moveItem(at:to:)")
  func moveItemAtURL(_ srcURL: URL, toURL dstURL: URL) throws
  @available(iOS 4.0, *)
  func linkItem(at srcURL: URL, to dstURL: URL) throws
  @available(iOS 4.0, *)
  @available(swift, obsoleted: 3, renamed: "linkItem(at:to:)")
  func linkItemAtURL(_ srcURL: URL, toURL dstURL: URL) throws
  @available(iOS 4.0, *)
  func removeItem(at URL: URL) throws
  @available(iOS 4.0, *)
  @available(swift, obsoleted: 3, renamed: "removeItem(at:)")
  func removeItemAtURL(_ URL: URL) throws
  @available(iOS 11.0, *)
  func trashItem(at url: URL, resultingItemURL outResultingURL: AutoreleasingUnsafeMutablePointer<NSURL?>?) throws
  @available(iOS 11.0, *)
  @available(swift, obsoleted: 3, renamed: "trashItem(at:resultingItemURL:)")
  func trashItemAtURL(_ url: URL, resultingItemURL outResultingURL: AutoreleasingUnsafeMutablePointer<NSURL?>?) throws
  @available(iOS, unavailable, introduced: 2.0, deprecated: 2.0, message: "Use -attributesOfItemAtPath:error: instead")
  func fileAttributes(atPath path: String, traverseLink yorn: Bool) -> [AnyHashable : Any]?
  @available(swift, obsoleted: 3, renamed: "fileAttributes(atPath:traverseLink:)")
  @available(iOS, unavailable, introduced: 2.0, deprecated: 2.0, message: "Use -attributesOfItemAtPath:error: instead")
  func fileAttributesAtPath(_ path: String, traverseLink yorn: Bool) -> [AnyHashable : Any]?
  @available(iOS, unavailable, introduced: 2.0, deprecated: 2.0, message: "Use -setAttributes:ofItemAtPath:error: instead")
  func changeFileAttributes(_ attributes: [AnyHashable : Any] = [:], atPath path: String) -> Bool
  @available(iOS, unavailable, introduced: 2.0, deprecated: 2.0, message: "Use -contentsOfDirectoryAtPath:error: instead")
  func directoryContents(atPath path: String) -> [Any]?
  @available(swift, obsoleted: 3, renamed: "directoryContents(atPath:)")
  @available(iOS, unavailable, introduced: 2.0, deprecated: 2.0, message: "Use -contentsOfDirectoryAtPath:error: instead")
  func directoryContentsAtPath(_ path: String) -> [Any]?
  @available(iOS, unavailable, introduced: 2.0, deprecated: 2.0, message: "Use -attributesOfFileSystemForPath:error: instead")
  func fileSystemAttributes(atPath path: String) -> [AnyHashable : Any]?
  @available(swift, obsoleted: 3, renamed: "fileSystemAttributes(atPath:)")
  @available(iOS, unavailable, introduced: 2.0, deprecated: 2.0, message: "Use -attributesOfFileSystemForPath:error: instead")
  func fileSystemAttributesAtPath(_ path: String) -> [AnyHashable : Any]?
  @available(iOS, unavailable, introduced: 2.0, deprecated: 2.0, message: "Use -destinationOfSymbolicLinkAtPath:error:")
  func pathContentOfSymbolicLink(atPath path: String) -> String?
  @available(swift, obsoleted: 3, renamed: "pathContentOfSymbolicLink(atPath:)")
  @available(iOS, unavailable, introduced: 2.0, deprecated: 2.0, message: "Use -destinationOfSymbolicLinkAtPath:error:")
  func pathContentOfSymbolicLinkAtPath(_ path: String) -> String?
  @available(iOS, unavailable, introduced: 2.0, deprecated: 2.0, message: "Use -createSymbolicLinkAtPath:error: instead")
  func createSymbolicLink(atPath path: String, pathContent otherpath: String) -> Bool
  @available(swift, obsoleted: 3, renamed: "createSymbolicLink(atPath:pathContent:)")
  @available(iOS, unavailable, introduced: 2.0, deprecated: 2.0, message: "Use -createSymbolicLinkAtPath:error: instead")
  func createSymbolicLinkAtPath(_ path: String, pathContent otherpath: String) -> Bool
  @available(iOS, unavailable, introduced: 2.0, deprecated: 2.0, message: "Use -createDirectoryAtPath:withIntermediateDirectories:attributes:error: instead")
  func createDirectory(atPath path: String, attributes: [AnyHashable : Any] = [:]) -> Bool
  @available(swift, obsoleted: 3, renamed: "createDirectory(atPath:attributes:)")
  @available(iOS, unavailable, introduced: 2.0, deprecated: 2.0, message: "Use -createDirectoryAtPath:withIntermediateDirectories:attributes:error: instead")
  func createDirectoryAtPath(_ path: String, attributes: [AnyHashable : Any] = [:]) -> Bool
  var currentDirectoryPath: String { get }
  func changeCurrentDirectoryPath(_ path: String) -> Bool
  func fileExists(atPath path: String) -> Bool
  @available(swift, obsoleted: 3, renamed: "fileExists(atPath:)")
  func fileExistsAtPath(_ path: String) -> Bool
  func fileExists(atPath path: String, isDirectory: UnsafeMutablePointer<ObjCBool>?) -> Bool
  @available(swift, obsoleted: 3, renamed: "fileExists(atPath:isDirectory:)")
  func fileExistsAtPath(_ path: String, isDirectory: UnsafeMutablePointer<ObjCBool>?) -> Bool
  func isReadableFile(atPath path: String) -> Bool
  @available(swift, obsoleted: 3, renamed: "isReadableFile(atPath:)")
  func isReadableFileAtPath(_ path: String) -> Bool
  func isWritableFile(atPath path: String) -> Bool
  @available(swift, obsoleted: 3, renamed: "isWritableFile(atPath:)")
  func isWritableFileAtPath(_ path: String) -> Bool
  func isExecutableFile(atPath path: String) -> Bool
  @available(swift, obsoleted: 3, renamed: "isExecutableFile(atPath:)")
  func isExecutableFileAtPath(_ path: String) -> Bool
  func isDeletableFile(atPath path: String) -> Bool
  @available(swift, obsoleted: 3, renamed: "isDeletableFile(atPath:)")
  func isDeletableFileAtPath(_ path: String) -> Bool
  func contentsEqual(atPath path1: String, andPath path2: String) -> Bool
  @available(swift, obsoleted: 3, renamed: "contentsEqual(atPath:andPath:)")
  func contentsEqualAtPath(_ path1: String, andPath path2: String) -> Bool
  func displayName(atPath path: String) -> String
  @available(swift, obsoleted: 3, renamed: "displayName(atPath:)")
  func displayNameAtPath(_ path: String) -> String
  func componentsToDisplay(forPath path: String) -> [String]?
  @available(swift, obsoleted: 3, renamed: "componentsToDisplay(forPath:)")
  func componentsToDisplayForPath(_ path: String) -> [String]?
  func enumerator(atPath path: String) -> FileManager.DirectoryEnumerator?
  @available(swift, obsoleted: 3, renamed: "enumerator(atPath:)")
  func enumeratorAtPath(_ path: String) -> FileManager.DirectoryEnumerator?
  @available(iOS 4.0, *)
  func __enumerator(at url: URL, includingPropertiesForKeys keys: [URLResourceKey]?, options mask: NSDirectoryEnumerationOptions = [], errorHandler handler: ((URL, Error) -> Bool)? = nil) -> FileManager.DirectoryEnumerator?
  @available(iOS 4.0, *)
  @available(swift, obsoleted: 3, renamed: "__enumerator(at:includingPropertiesForKeys:options:errorHandler:)")
  func __enumeratorAtURL(_ url: URL, includingPropertiesForKeys keys: [URLResourceKey]?, options mask: NSDirectoryEnumerationOptions = [], errorHandler handler: ((URL, Error) -> Bool)? = nil) -> FileManager.DirectoryEnumerator?
  func subpaths(atPath path: String) -> [String]?
  @available(swift, obsoleted: 3, renamed: "subpaths(atPath:)")
  func subpathsAtPath(_ path: String) -> [String]?
  func contents(atPath path: String) -> Data?
  @available(swift, obsoleted: 3, renamed: "contents(atPath:)")
  func contentsAtPath(_ path: String) -> Data?
  func createFile(atPath path: String, contents data: Data?, attributes attr: [FileAttributeKey : Any]? = nil) -> Bool
  @available(swift, obsoleted: 3, renamed: "createFile(atPath:contents:attributes:)")
  func createFileAtPath(_ path: String, contents data: Data?, attributes attr: [FileAttributeKey : Any]? = nil) -> Bool
  func fileSystemRepresentation(withPath path: String) -> UnsafePointer<CChar>
  @available(swift, obsoleted: 3, renamed: "fileSystemRepresentation(withPath:)")
  func fileSystemRepresentationWithPath(_ path: String) -> UnsafePointer<CChar>
  func string(withFileSystemRepresentation str: UnsafePointer<CChar>, length len: Int) -> String
  @available(swift, obsoleted: 3, renamed: "string(withFileSystemRepresentation:length:)")
  func stringWithFileSystemRepresentation(_ str: UnsafePointer<CChar>, length len: Int) -> String
  @available(iOS 4.0, *)
  func replaceItem(at originalItemURL: URL, withItemAt newItemURL: URL, backupItemName: String?, options: NSFileManagerItemReplacementOptions = [], resultingItemURL resultingURL: AutoreleasingUnsafeMutablePointer<NSURL?>?) throws
  @available(iOS 4.0, *)
  @available(swift, obsoleted: 3, renamed: "replaceItem(at:withItemAt:backupItemName:options:resultingItemURL:)")
  func replaceItemAtURL(_ originalItemURL: URL, withItemAtURL newItemURL: URL, backupItemName: String?, options: NSFileManagerItemReplacementOptions = [], resultingItemURL resultingURL: AutoreleasingUnsafeMutablePointer<NSURL?>?) throws
  @available(iOS 5.0, *)
  func setUbiquitous(_ flag: Bool, itemAt url: URL, destinationURL: URL) throws
  @available(iOS 5.0, *)
  @available(swift, obsoleted: 3, renamed: "setUbiquitous(_:itemAt:destinationURL:)")
  func setUbiquitous(_ flag: Bool, itemAtURL url: URL, destinationURL: URL) throws
  @available(iOS 5.0, *)
  func isUbiquitousItem(at url: URL) -> Bool
  @available(iOS 5.0, *)
  @available(swift, obsoleted: 3, renamed: "isUbiquitousItem(at:)")
  func isUbiquitousItemAtURL(_ url: URL) -> Bool
  @available(iOS 5.0, *)
  func startDownloadingUbiquitousItem(at url: URL) throws
  @available(iOS 5.0, *)
  @available(swift, obsoleted: 3, renamed: "startDownloadingUbiquitousItem(at:)")
  func startDownloadingUbiquitousItemAtURL(_ url: URL) throws
  @available(iOS 5.0, *)
  func evictUbiquitousItem(at url: URL) throws
  @available(iOS 5.0, *)
  @available(swift, obsoleted: 3, renamed: "evictUbiquitousItem(at:)")
  func evictUbiquitousItemAtURL(_ url: URL) throws
  @available(iOS 5.0, *)
  func url(forUbiquityContainerIdentifier containerIdentifier: String?) -> URL?
  @available(iOS 5.0, *)
  @available(swift, obsoleted: 3, renamed: "url(forUbiquityContainerIdentifier:)")
  func URLForUbiquityContainerIdentifier(_ containerIdentifier: String?) -> URL?
  @available(iOS 5.0, *)
  func url(forPublishingUbiquitousItemAt url: URL, expiration outDate: AutoreleasingUnsafeMutablePointer<NSDate?>?) throws -> URL
  @available(iOS 5.0, *)
  @available(swift, obsoleted: 3, renamed: "url(forPublishingUbiquitousItemAt:expiration:)")
  func URLForPublishingUbiquitousItemAtURL(_ url: URL, expirationDate outDate: AutoreleasingUnsafeMutablePointer<NSDate?>?) throws -> URL
  @available(iOS 6.0, *)
  @NSCopying var ubiquityIdentityToken: (NSCoding & NSCopying & NSObjectProtocol)? { get }
  @available(iOS 11.0, *)
  func getFileProviderServicesForItem(at url: URL, completionHandler: @escaping @Sendable ([NSFileProviderServiceName : NSFileProviderService]?, Error?) -> Void)
  @available(iOS 11.0, *)
  func fileProviderServicesForItem(at url: URL) async throws -> [NSFileProviderServiceName : NSFileProviderService]
  @available(iOS 11.0, *)
  @available(swift, obsoleted: 3, renamed: "getFileProviderServicesForItem(at:completionHandler:)")
  func getFileProviderServicesForItemAtURL(_ url: URL, completionHandler: @escaping @Sendable ([NSFileProviderServiceName : NSFileProviderService]?, Error?) -> Void)
  @available(iOS 7.0, *)
  func containerURL(forSecurityApplicationGroupIdentifier groupIdentifier: String) -> URL?
  @available(iOS 7.0, *)
  @available(swift, obsoleted: 3, renamed: "containerURL(forSecurityApplicationGroupIdentifier:)")
  func containerURLForSecurityApplicationGroupIdentifier(_ groupIdentifier: String) -> URL?
  init()
}

extension FileManager {
}
@available(swift, obsoleted: 3, renamed: "FileManager")
typealias NSFileManager = FileManager
extension FileManager {
  @available(iOS, unavailable)
  var homeDirectoryForCurrentUser: URL { get }
  @available(iOS 10.0, *)
  var temporaryDirectory: URL { get }
  @available(iOS, unavailable)
  func homeDirectory(forUser userName: String) -> URL?
  @available(swift, obsoleted: 3, renamed: "homeDirectory(forUser:)")
  @available(iOS, unavailable)
  func homeDirectoryForUser(_ userName: String) -> URL?
}
extension NSObject {
  @available(iOS, unavailable, introduced: 2.0, deprecated: 2.0, message: " Handler API no longer supported")
  class func fileManager(_ fm: FileManager, shouldProceedAfterError errorInfo: [AnyHashable : Any]) -> Bool
  @available(iOS, unavailable, introduced: 2.0, deprecated: 2.0, message: " Handler API no longer supported")
  func fileManager(_ fm: FileManager, shouldProceedAfterError errorInfo: [AnyHashable : Any]) -> Bool
  @available(iOS, unavailable, introduced: 2.0, deprecated: 2.0, message: "Handler API no longer supported")
  class func fileManager(_ fm: FileManager, willProcessPath path: String)
  @available(iOS, unavailable, introduced: 2.0, deprecated: 2.0, message: "Handler API no longer supported")
  func fileManager(_ fm: FileManager, willProcessPath path: String)
}
protocol FileManagerDelegate : NSObjectProtocol {
  optional func fileManager(_ fileManager: FileManager, shouldCopyItemAtPath srcPath: String, toPath dstPath: String) -> Bool
  @available(iOS 4.0, *)
  optional func fileManager(_ fileManager: FileManager, shouldCopyItemAt srcURL: URL, to dstURL: URL) -> Bool
  @available(iOS 4.0, *)
  @available(swift, obsoleted: 3, renamed: "fileManager(_:shouldCopyItemAt:to:)")
  optional func fileManager(_ fileManager: FileManager, shouldCopyItemAtURL srcURL: URL, toURL dstURL: URL) -> Bool
  optional func fileManager(_ fileManager: FileManager, shouldProceedAfterError error: Error, copyingItemAtPath srcPath: String, toPath dstPath: String) -> Bool
  @available(iOS 4.0, *)
  optional func fileManager(_ fileManager: FileManager, shouldProceedAfterError error: Error, copyingItemAt srcURL: URL, to dstURL: URL) -> Bool
  @available(iOS 4.0, *)
  @available(swift, obsoleted: 3, renamed: "fileManager(_:shouldProceedAfterError:copyingItemAt:to:)")
  optional func fileManager(_ fileManager: FileManager, shouldProceedAfterError error: Error, copyingItemAtURL srcURL: URL, toURL dstURL: URL) -> Bool
  optional func fileManager(_ fileManager: FileManager, shouldMoveItemAtPath srcPath: String, toPath dstPath: String) -> Bool
  @available(iOS 4.0, *)
  optional func fileManager(_ fileManager: FileManager, shouldMoveItemAt srcURL: URL, to dstURL: URL) -> Bool
  @available(iOS 4.0, *)
  @available(swift, obsoleted: 3, renamed: "fileManager(_:shouldMoveItemAt:to:)")
  optional func fileManager(_ fileManager: FileManager, shouldMoveItemAtURL srcURL: URL, toURL dstURL: URL) -> Bool
  optional func fileManager(_ fileManager: FileManager, shouldProceedAfterError error: Error, movingItemAtPath srcPath: String, toPath dstPath: String) -> Bool
  @available(iOS 4.0, *)
  optional func fileManager(_ fileManager: FileManager, shouldProceedAfterError error: Error, movingItemAt srcURL: URL, to dstURL: URL) -> Bool
  @available(iOS 4.0, *)
  @available(swift, obsoleted: 3, renamed: "fileManager(_:shouldProceedAfterError:movingItemAt:to:)")
  optional func fileManager(_ fileManager: FileManager, shouldProceedAfterError error: Error, movingItemAtURL srcURL: URL, toURL dstURL: URL) -> Bool
  optional func fileManager(_ fileManager: FileManager, shouldLinkItemAtPath srcPath: String, toPath dstPath: String) -> Bool
  @available(iOS 4.0, *)
  optional func fileManager(_ fileManager: FileManager, shouldLinkItemAt srcURL: URL, to dstURL: URL) -> Bool
  @available(iOS 4.0, *)
  @available(swift, obsoleted: 3, renamed: "fileManager(_:shouldLinkItemAt:to:)")
  optional func fileManager(_ fileManager: FileManager, shouldLinkItemAtURL srcURL: URL, toURL dstURL: URL) -> Bool
  optional func fileManager(_ fileManager: FileManager, shouldProceedAfterError error: Error, linkingItemAtPath srcPath: String, toPath dstPath: String) -> Bool
  @available(iOS 4.0, *)
  optional func fileManager(_ fileManager: FileManager, shouldProceedAfterError error: Error, linkingItemAt srcURL: URL, to dstURL: URL) -> Bool
  @available(iOS 4.0, *)
  @available(swift, obsoleted: 3, renamed: "fileManager(_:shouldProceedAfterError:linkingItemAt:to:)")
  optional func fileManager(_ fileManager: FileManager, shouldProceedAfterError error: Error, linkingItemAtURL srcURL: URL, toURL dstURL: URL) -> Bool
  optional func fileManager(_ fileManager: FileManager, shouldRemoveItemAtPath path: String) -> Bool
  @available(iOS 4.0, *)
  optional func fileManager(_ fileManager: FileManager, shouldRemoveItemAt URL: URL) -> Bool
  @available(iOS 4.0, *)
  @available(swift, obsoleted: 3, renamed: "fileManager(_:shouldRemoveItemAt:)")
  optional func fileManager(_ fileManager: FileManager, shouldRemoveItemAtURL URL: URL) -> Bool
  optional func fileManager(_ fileManager: FileManager, shouldProceedAfterError error: Error, removingItemAtPath path: String) -> Bool
  @available(iOS 4.0, *)
  optional func fileManager(_ fileManager: FileManager, shouldProceedAfterError error: Error, removingItemAt URL: URL) -> Bool
  @available(iOS 4.0, *)
  @available(swift, obsoleted: 3, renamed: "fileManager(_:shouldProceedAfterError:removingItemAt:)")
  optional func fileManager(_ fileManager: FileManager, shouldProceedAfterError error: Error, removingItemAtURL URL: URL) -> Bool
}
@available(swift, obsoleted: 3, renamed: "FileManagerDelegate")
typealias NSFileManagerDelegate = FileManagerDelegate
@available(swift, obsoleted: 3, renamed: "FileManager.DirectoryEnumerator")
typealias NSDirectoryEnumerator = FileManager.DirectoryEnumerator
extension FileManager {
  class DirectoryEnumerator : NSEnumerator {
    var fileAttributes: [FileAttributeKey : Any]? { get }
    var directoryAttributes: [FileAttributeKey : Any]? { get }
    @available(iOS 13.0, *)
    var isEnumeratingDirectoryPostOrder: Bool { get }
    func skipDescendents()
    @available(iOS 4.0, *)
    var level: Int { get }
    @available(iOS 4.0, *)
    func skipDescendants()
    init()
  }
  @available(iOS 8.0, *)
  enum URLRelationship : Int, @unchecked Sendable {
    init?(rawValue: Int)
    var rawValue: Int { get }
    typealias RawValue = Int
    case contains
    @available(swift, obsoleted: 3, renamed: "contains")
    static var Contains: FileManager.URLRelationship { get }
    case same
    @available(swift, obsoleted: 3, renamed: "same")
    static var Same: FileManager.URLRelationship { get }
    case other
    @available(swift, obsoleted: 3, renamed: "other")
    static var Other: FileManager.URLRelationship { get }
  }
}
@available(iOS 11.0, *)
class NSFileProviderService : NSObject {
  func getFileProviderConnection(completionHandler: @escaping @Sendable (NSXPCConnection?, Error?) -> Void)
  func fileProviderConnection() async throws -> NSXPCConnection
  @available(swift, obsoleted: 3, renamed: "getFileProviderConnection(completionHandler:)")
  func getFileProviderConnectionWithCompletionHandler(_ completionHandler: @escaping @Sendable (NSXPCConnection?, Error?) -> Void)
  var name: NSFileProviderServiceName { get }
  init()
}
@available(swift, obsoleted: 3, renamed: "FileAttributeKey.type")
let NSFileType: FileAttributeKey
extension FileAttributeKey {
  static let type: FileAttributeKey
  static let size: FileAttributeKey
  static let modificationDate: FileAttributeKey
  static let referenceCount: FileAttributeKey
  static let deviceIdentifier: FileAttributeKey
  static let ownerAccountName: FileAttributeKey
  static let groupOwnerAccountName: FileAttributeKey
  static let posixPermissions: FileAttributeKey
  static let systemNumber: FileAttributeKey
  static let systemFileNumber: FileAttributeKey
  static let extensionHidden: FileAttributeKey
  static let hfsCreatorCode: FileAttributeKey
  static let hfsTypeCode: FileAttributeKey
  static let immutable: FileAttributeKey
  static let appendOnly: FileAttributeKey
  static let creationDate: FileAttributeKey
  static let ownerAccountID: FileAttributeKey
  static let groupOwnerAccountID: FileAttributeKey
  static let busy: FileAttributeKey
  @available(iOS 4.0, *)
  static let protectionKey: FileAttributeKey
  static let systemSize: FileAttributeKey
  static let systemFreeSize: FileAttributeKey
  static let systemNodes: FileAttributeKey
  static let systemFreeNodes: FileAttributeKey
}
@available(swift, obsoleted: 3, renamed: "FileAttributeType.typeDirectory")
let NSFileTypeDirectory: FileAttributeType
extension FileAttributeType {
  static let typeDirectory: FileAttributeType
  static let typeRegular: FileAttributeType
  static let typeSymbolicLink: FileAttributeType
  static let typeSocket: FileAttributeType
  static let typeCharacterSpecial: FileAttributeType
  static let typeBlockSpecial: FileAttributeType
  static let typeUnknown: FileAttributeType
}
@available(swift, obsoleted: 3, renamed: "FileAttributeType.typeRegular")
let NSFileTypeRegular: FileAttributeType
@available(swift, obsoleted: 3, renamed: "FileAttributeType.typeSymbolicLink")
let NSFileTypeSymbolicLink: FileAttributeType
@available(swift, obsoleted: 3, renamed: "FileAttributeType.typeSocket")
let NSFileTypeSocket: FileAttributeType
@available(swift, obsoleted: 3, renamed: "FileAttributeType.typeCharacterSpecial")
let NSFileTypeCharacterSpecial: FileAttributeType
@available(swift, obsoleted: 3, renamed: "FileAttributeType.typeBlockSpecial")
let NSFileTypeBlockSpecial: FileAttributeType
@available(swift, obsoleted: 3, renamed: "FileAttributeType.typeUnknown")
let NSFileTypeUnknown: FileAttributeType
@available(swift, obsoleted: 3, renamed: "FileAttributeKey.size")
let NSFileSize: FileAttributeKey
@available(swift, obsoleted: 3, renamed: "FileAttributeKey.modificationDate")
let NSFileModificationDate: FileAttributeKey
@available(swift, obsoleted: 3, renamed: "FileAttributeKey.referenceCount")
let NSFileReferenceCount: FileAttributeKey
@available(swift, obsoleted: 3, renamed: "FileAttributeKey.deviceIdentifier")
let NSFileDeviceIdentifier: FileAttributeKey
@available(swift, obsoleted: 3, renamed: "FileAttributeKey.ownerAccountName")
let NSFileOwnerAccountName: FileAttributeKey
@available(swift, obsoleted: 3, renamed: "FileAttributeKey.groupOwnerAccountName")
let NSFileGroupOwnerAccountName: FileAttributeKey
@available(swift, obsoleted: 3, renamed: "FileAttributeKey.posixPermissions")
let NSFilePosixPermissions: FileAttributeKey
@available(swift, obsoleted: 3, renamed: "FileAttributeKey.systemNumber")
let NSFileSystemNumber: FileAttributeKey
@available(swift, obsoleted: 3, renamed: "FileAttributeKey.systemFileNumber")
let NSFileSystemFileNumber: FileAttributeKey
@available(swift, obsoleted: 3, renamed: "FileAttributeKey.extensionHidden")
let NSFileExtensionHidden: FileAttributeKey
@available(swift, obsoleted: 3, renamed: "FileAttributeKey.hfsCreatorCode")
let NSFileHFSCreatorCode: FileAttributeKey
@available(swift, obsoleted: 3, renamed: "FileAttributeKey.hfsTypeCode")
let NSFileHFSTypeCode: FileAttributeKey
@available(swift, obsoleted: 3, renamed: "FileAttributeKey.immutable")
let NSFileImmutable: FileAttributeKey
@available(swift, obsoleted: 3, renamed: "FileAttributeKey.appendOnly")
let NSFileAppendOnly: FileAttributeKey
@available(swift, obsoleted: 3, renamed: "FileAttributeKey.creationDate")
let NSFileCreationDate: FileAttributeKey
@available(swift, obsoleted: 3, renamed: "FileAttributeKey.ownerAccountID")
let NSFileOwnerAccountID: FileAttributeKey
@available(swift, obsoleted: 3, renamed: "FileAttributeKey.groupOwnerAccountID")
let NSFileGroupOwnerAccountID: FileAttributeKey
@available(swift, obsoleted: 3, renamed: "FileAttributeKey.busy")
let NSFileBusy: FileAttributeKey
@available(iOS 4.0, *)
@available(swift, obsoleted: 3, renamed: "FileAttributeKey.protectionKey")
let NSFileProtectionKey: FileAttributeKey
@available(iOS 4.0, *)
@available(swift, obsoleted: 3, renamed: "FileProtectionType.none")
let NSFileProtectionNone: FileProtectionType
extension FileProtectionType {
  @available(iOS 4.0, *)
  static let none: FileProtectionType
  @available(iOS 4.0, *)
  static let complete: FileProtectionType
  @available(iOS 5.0, *)
  static let completeUnlessOpen: FileProtectionType
  @available(iOS 5.0, *)
  static let completeUntilFirstUserAuthentication: FileProtectionType
}
@available(iOS 4.0, *)
@available(swift, obsoleted: 3, renamed: "FileProtectionType.complete")
let NSFileProtectionComplete: FileProtectionType
@available(iOS 5.0, *)
@available(swift, obsoleted: 3, renamed: "FileProtectionType.completeUnlessOpen")
let NSFileProtectionCompleteUnlessOpen: FileProtectionType
@available(iOS 5.0, *)
@available(swift, obsoleted: 3, renamed: "FileProtectionType.completeUntilFirstUserAuthentication")
let NSFileProtectionCompleteUntilFirstUserAuthentication: FileProtectionType
@available(swift, obsoleted: 3, renamed: "FileAttributeKey.systemSize")
let NSFileSystemSize: FileAttributeKey
@available(swift, obsoleted: 3, renamed: "FileAttributeKey.systemFreeSize")
let NSFileSystemFreeSize: FileAttributeKey
@available(swift, obsoleted: 3, renamed: "FileAttributeKey.systemNodes")
let NSFileSystemNodes: FileAttributeKey
@available(swift, obsoleted: 3, renamed: "FileAttributeKey.systemFreeNodes")
let NSFileSystemFreeNodes: FileAttributeKey
extension NSDictionary {
  func fileSize() -> UInt64
  func fileModificationDate() -> Date?
  func fileType() -> String?
  func filePosixPermissions() -> Int
  func fileOwnerAccountName() -> String?
  func fileGroupOwnerAccountName() -> String?
  func fileSystemNumber() -> Int
  func fileSystemFileNumber() -> Int
  func fileExtensionHidden() -> Bool
  func fileHFSCreatorCode() -> OSType
  func fileHFSTypeCode() -> OSType
  func fileIsImmutable() -> Bool
  func fileIsAppendOnly() -> Bool
  func fileCreationDate() -> Date?
  func fileOwnerAccountID() -> NSNumber?
  func fileGroupOwnerAccountID() -> NSNumber?
}
