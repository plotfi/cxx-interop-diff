@_exported import Foundation

@available(iOS 15.0, *)
@available(swift, obsoleted: 3, renamed: "NSTextLayoutManager.SegmentType")
typealias NSTextLayoutManagerSegmentType = NSTextLayoutManager.SegmentType
extension NSTextLayoutManager {
  @available(iOS 15.0, *)
  enum SegmentType : Int, @unchecked Sendable {
    init?(rawValue: Int)
    var rawValue: Int { get }
    typealias RawValue = Int
    case standard
    @available(swift, obsoleted: 3, renamed: "standard")
    static var Standard: NSTextLayoutManager.SegmentType { get }
    case selection
    @available(swift, obsoleted: 3, renamed: "selection")
    static var Selection: NSTextLayoutManager.SegmentType { get }
    case highlight
    @available(swift, obsoleted: 3, renamed: "highlight")
    static var Highlight: NSTextLayoutManager.SegmentType { get }
  }
}
typealias NSTextLayoutManagerSegmentOptions = Int
var NSTextLayoutManagerSegmentOptionsNone: Int { get }
var NSTextLayoutManagerSegmentOptionsRangeNotRequired: Int { get }
var NSTextLayoutManagerSegmentOptionsMiddleFragmentsExcluded: Int { get }
var NSTextLayoutManagerSegmentOptionsHeadSegmentExtended: Int { get }
var NSTextLayoutManagerSegmentOptionsTailSegmentExtended: Int { get }
var NSTextLayoutManagerSegmentOptionsUpstreamAffinity: Int { get }
@available(iOS 15.0, *)
class NSTextLayoutManager : NSObject, NSSecureCoding, NSTextSelectionDataSource {
  init()
  init?(coder: NSCoder)
  weak var delegate: @sil_weak NSTextLayoutManagerDelegate?
  var usesFontLeading: Bool
  var limitsLayoutForSuspiciousContents: Bool
  var usesHyphenation: Bool
  weak var textContentManager: @sil_weak NSTextContentManager? { get }
  func replace(_ textContentManager: NSTextContentManager)
  @available(swift, obsoleted: 3, renamed: "replace(_:)")
  func replaceTextContentManager(_ textContentManager: NSTextContentManager)
  var textContainer: NSTextContainer?
  var usageBoundsForTextContainer: CGRect { get }
  var textViewportLayoutController: NSTextViewportLayoutController { get }
  var layoutQueue: OperationQueue?
  func ensureLayout(for range: NSTextRange)
  @available(swift, obsoleted: 3, renamed: "ensureLayout(for:)")
  func ensureLayoutForRange(_ range: NSTextRange)
  func ensureLayout(for bounds: CGRect)
  @available(swift, obsoleted: 3, renamed: "ensureLayout(for:)")
  func ensureLayoutForBounds(_ bounds: CGRect)
  func invalidateLayout(for range: NSTextRange)
  @available(swift, obsoleted: 3, renamed: "invalidateLayout(for:)")
  func invalidateLayoutForRange(_ range: NSTextRange)
  func textLayoutFragment(for position: CGPoint) -> NSTextLayoutFragment?
  @available(swift, obsoleted: 3, renamed: "textLayoutFragment(for:)")
  func textLayoutFragmentForPosition(_ position: CGPoint) -> NSTextLayoutFragment?
  func textLayoutFragment(for location: NSTextLocation) -> NSTextLayoutFragment?
  @available(swift, obsoleted: 3, renamed: "textLayoutFragment(for:)")
  func textLayoutFragmentForLocation(_ location: NSTextLocation) -> NSTextLayoutFragment?
  func enumerateTextLayoutFragments(from location: NSTextLocation?, options: NSTextLayoutFragmentEnumerationOptions = [], using block: (NSTextLayoutFragment) -> Bool) -> NSTextLocation?
  @available(swift, obsoleted: 3, renamed: "enumerateTextLayoutFragments(from:options:using:)")
  func enumerateTextLayoutFragmentsFromLocation(_ location: NSTextLocation?, options: NSTextLayoutFragmentEnumerationOptions = [], usingBlock block: (NSTextLayoutFragment) -> Bool) -> NSTextLocation?
  var textSelections: [NSTextSelection]
  var textSelectionNavigation: NSTextSelectionNavigation
  func enumerateRenderingAttributes(from location: NSTextLocation, reverse: Bool, using block: (NSTextLayoutManager, [NSAttributedString.Key : Any], NSTextRange) -> Bool)
  @available(swift, obsoleted: 3, renamed: "enumerateRenderingAttributes(from:reverse:using:)")
  func enumerateRenderingAttributesFromLocation(_ location: NSTextLocation, reverse: Bool, usingBlock block: (NSTextLayoutManager, [NSAttributedString.Key : Any], NSTextRange) -> Bool)
  func setRenderingAttributes(_ renderingAttributes: [NSAttributedString.Key : Any], for textRange: NSTextRange)
  @available(swift, obsoleted: 3, renamed: "setRenderingAttributes(_:for:)")
  func setRenderingAttributes(_ renderingAttributes: [NSAttributedString.Key : Any], forTextRange textRange: NSTextRange)
  func addRenderingAttribute(_ renderingAttribute: NSAttributedString.Key, value: Any?, for textRange: NSTextRange)
  @available(swift, obsoleted: 3, renamed: "addRenderingAttribute(_:value:for:)")
  func addRenderingAttribute(_ renderingAttribute: NSAttributedString.Key, value: Any?, forTextRange textRange: NSTextRange)
  func removeRenderingAttribute(_ renderingAttribute: NSAttributedString.Key, for textRange: NSTextRange)
  @available(swift, obsoleted: 3, renamed: "removeRenderingAttribute(_:for:)")
  func removeRenderingAttribute(_ renderingAttribute: NSAttributedString.Key, forTextRange textRange: NSTextRange)
  func invalidateRenderingAttributes(for textRange: NSTextRange)
  @available(swift, obsoleted: 3, renamed: "invalidateRenderingAttributes(for:)")
  func invalidateRenderingAttributesForTextRange(_ textRange: NSTextRange)
  var renderingAttributesValidator: ((NSTextLayoutManager, NSTextLayoutFragment) -> Void)?
  class var linkRenderingAttributes: [NSAttributedString.Key : Any] { get }
  func renderingAttributes(forLink link: Any, at location: NSTextLocation) -> [NSAttributedString.Key : Any]
  @available(swift, obsoleted: 3, renamed: "renderingAttributes(forLink:at:)")
  func renderingAttributesForLink(_ link: Any, atLocation location: NSTextLocation) -> [NSAttributedString.Key : Any]
  func enumerateTextSegments(in textRange: NSTextRange, type: NSTextLayoutManager.SegmentType, options: NSTextLayoutManagerSegmentOptions = [], using block: (NSTextRange?, CGRect, CGFloat, NSTextContainer) -> Bool)
  @available(swift, obsoleted: 3, renamed: "enumerateTextSegments(in:type:options:using:)")
  func enumerateTextSegmentsInRange(_ textRange: NSTextRange, type: NSTextLayoutManager.SegmentType, options: NSTextLayoutManagerSegmentOptions = [], usingBlock block: (NSTextRange?, CGRect, CGFloat, NSTextContainer) -> Bool)
  func replaceContents(in range: NSTextRange, with textElements: [NSTextElement])
  @available(swift, obsoleted: 3, renamed: "replaceContents(in:with:)")
  func replaceContentsInRange(_ range: NSTextRange, withTextElements textElements: [NSTextElement])
  func replaceContents(in range: NSTextRange, with attributedString: NSAttributedString)
  @available(swift, obsoleted: 3, renamed: "replaceContents(in:with:)")
  func replaceContentsInRange(_ range: NSTextRange, withAttributedString attributedString: NSAttributedString)
  @available(iOS 15.0, *)
  class var supportsSecureCoding: Bool { get }
  @available(iOS 15.0, *)
  var documentRange: NSTextRange { get }
  @available(iOS 15.0, *)
  func encode(with coder: NSCoder)
  @available(iOS 15.0, *)
  func enumerateSubstrings(from location: NSTextLocation, options: NSStringEnumerationOptions = [], using block: (String?, NSTextRange, NSTextRange?, UnsafeMutablePointer<ObjCBool>) -> Void)
  @available(iOS 15.0, *)
  func textRange(for selectionGranularity: NSTextSelection.Granularity, enclosing location: NSTextLocation) -> NSTextRange?
  @available(iOS 15.0, *)
  func location(_ location: NSTextLocation, offsetBy offset: Int) -> NSTextLocation?
  @available(iOS 15.0, *)
  func offset(from: NSTextLocation, to: NSTextLocation) -> Int
  @available(iOS 15.0, *)
  func baseWritingDirection(at location: NSTextLocation) -> NSTextSelectionNavigation.WritingDirection
  @available(iOS 15.0, *)
  func enumerateCaretOffsetsInLineFragment(at location: NSTextLocation, using block: (CGFloat, NSTextLocation, Bool, UnsafeMutablePointer<ObjCBool>) -> Void)
  @available(iOS 15.0, *)
  func lineFragmentRange(for point: CGPoint, inContainerAt location: NSTextLocation) -> NSTextRange?
  @available(iOS 15.0, *)
  func enumerateContainerBoundaries(from location: NSTextLocation, reverse: Bool, using block: (NSTextLocation, UnsafeMutablePointer<ObjCBool>) -> Void)
  @available(iOS 15.0, *)
  func textLayoutOrientation(at location: NSTextLocation) -> NSTextSelectionNavigation.LayoutOrientation
}
@available(iOS 15.0, *)
protocol NSTextLayoutManagerDelegate : NSObjectProtocol {
  optional func textLayoutManager(_ textLayoutManager: NSTextLayoutManager, textLayoutFragmentFor location: NSTextLocation, in textElement: NSTextElement) -> NSTextLayoutFragment
  @available(swift, obsoleted: 3, renamed: "textLayoutManager(_:textLayoutFragmentFor:in:)")
  optional func textLayoutManager(_ textLayoutManager: NSTextLayoutManager, textLayoutFragmentForLocation location: NSTextLocation, inTextElement textElement: NSTextElement) -> NSTextLayoutFragment
  optional func textLayoutManager(_ textLayoutManager: NSTextLayoutManager, shouldBreakLineBefore location: NSTextLocation, hyphenating: Bool) -> Bool
  @available(swift, obsoleted: 3, renamed: "textLayoutManager(_:shouldBreakLineBefore:hyphenating:)")
  optional func textLayoutManager(_ textLayoutManager: NSTextLayoutManager, shouldBreakLineBeforeLocation location: NSTextLocation, hyphenating: Bool) -> Bool
  optional func textLayoutManager(_ textLayoutManager: NSTextLayoutManager, renderingAttributesForLink link: Any, at location: NSTextLocation, defaultAttributes renderingAttributes: [NSAttributedString.Key : Any] = [:]) -> [NSAttributedString.Key : Any]?
  @available(swift, obsoleted: 3, renamed: "textLayoutManager(_:renderingAttributesForLink:at:defaultAttributes:)")
  optional func textLayoutManager(_ textLayoutManager: NSTextLayoutManager, renderingAttributesForLink link: Any, atLocation location: NSTextLocation, defaultAttributes renderingAttributes: [NSAttributedString.Key : Any] = [:]) -> [NSAttributedString.Key : Any]?
}
