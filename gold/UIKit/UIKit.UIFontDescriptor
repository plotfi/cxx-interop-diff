@_exported import Foundation

typealias UIFontDescriptorSymbolicTraits = UInt32
var UIFontDescriptorTraitItalic: UInt32 { get }
var UIFontDescriptorTraitBold: UInt32 { get }
var UIFontDescriptorTraitExpanded: UInt32 { get }
var UIFontDescriptorTraitCondensed: UInt32 { get }
var UIFontDescriptorTraitMonoSpace: UInt32 { get }
var UIFontDescriptorTraitVertical: UInt32 { get }
var UIFontDescriptorTraitUIOptimized: UInt32 { get }
var UIFontDescriptorTraitTightLeading: UInt32 { get }
var UIFontDescriptorTraitLooseLeading: UInt32 { get }
var UIFontDescriptorClassMask: UInt32 { get }
var UIFontDescriptorClassUnknown: UInt32 { get }
var UIFontDescriptorClassOldStyleSerifs: UInt32 { get }
var UIFontDescriptorClassTransitionalSerifs: UInt32 { get }
var UIFontDescriptorClassModernSerifs: UInt32 { get }
var UIFontDescriptorClassClarendonSerifs: UInt32 { get }
var UIFontDescriptorClassSlabSerifs: UInt32 { get }
var UIFontDescriptorClassFreeformSerifs: UInt32 { get }
var UIFontDescriptorClassSansSerif: UInt32 { get }
var UIFontDescriptorClassOrnamentals: UInt32 { get }
var UIFontDescriptorClassScripts: UInt32 { get }
var UIFontDescriptorClassSymbolic: UInt32 { get }
@available(swift, obsoleted: 4.2, renamed: "UIFontDescriptor.Class")
typealias UIFontDescriptorClass = UIFontDescriptor.Class
extension UIFontDescriptor {
  typealias Class = Int
  struct AttributeName : _ObjectiveCBridgeable, Hashable, Equatable, _SwiftNewtypeWrapper, RawRepresentable, @unchecked Sendable {
    init(rawValue: String)
    var _rawValue: NSString
    var rawValue: String { get }
    typealias RawValue = String
    typealias _ObjectiveCType = NSString
  }
  struct TraitKey : _ObjectiveCBridgeable, Hashable, Equatable, _SwiftNewtypeWrapper, RawRepresentable, @unchecked Sendable {
    init(rawValue: String)
    var _rawValue: NSString
    var rawValue: String { get }
    typealias RawValue = String
    typealias _ObjectiveCType = NSString
  }
  struct FeatureKey : _ObjectiveCBridgeable, Hashable, Equatable, _SwiftNewtypeWrapper, RawRepresentable, @unchecked Sendable {
    init(_ rawValue: String)
    init(rawValue: String)
    var _rawValue: NSString
    var rawValue: String { get }
    typealias RawValue = String
    typealias _ObjectiveCType = NSString
  }
  struct SystemDesign : _ObjectiveCBridgeable, Hashable, Equatable, _SwiftNewtypeWrapper, RawRepresentable, @unchecked Sendable {
    init(rawValue: String)
    var _rawValue: NSString
    var rawValue: String { get }
    typealias RawValue = String
    typealias _ObjectiveCType = NSString
  }
}
@available(swift, obsoleted: 4.2, renamed: "UIFont.TextStyle")
typealias UIFontTextStyle = UIFont.TextStyle
extension UIFont {
  struct TextStyle : _ObjectiveCBridgeable, Hashable, Equatable, _SwiftNewtypeWrapper, RawRepresentable, @unchecked Sendable {
    init(rawValue: String)
    var _rawValue: NSString
    var rawValue: String { get }
    typealias RawValue = String
    typealias _ObjectiveCType = NSString
  }
  struct Weight : _ObjectiveCBridgeable, Hashable, Equatable, _SwiftNewtypeWrapper, RawRepresentable, @unchecked Sendable {
    init(_ rawValue: CGFloat)
    init(rawValue: CGFloat)
    let rawValue: CGFloat
    typealias RawValue = CGFloat
  }
}
@available(swift, obsoleted: 3, renamed: "UIFontDescriptor.AttributeName")
typealias UIFontDescriptorAttributeName = UIFontDescriptor.AttributeName
@available(swift, obsoleted: 3, renamed: "UIFontDescriptor.TraitKey")
typealias UIFontDescriptorTraitKey = UIFontDescriptor.TraitKey
@available(swift, obsoleted: 3, renamed: "UIFontDescriptor.FeatureKey")
typealias UIFontDescriptorFeatureKey = UIFontDescriptor.FeatureKey
@available(swift, obsoleted: 3, renamed: "UIFont.Weight")
typealias UIFontWeight = UIFont.Weight
@available(swift, obsoleted: 3, renamed: "UIFontDescriptor.SystemDesign")
typealias UIFontDescriptorSystemDesign = UIFontDescriptor.SystemDesign
@available(iOS 13.0, *)
@available(swift, obsoleted: 3, renamed: "UIFontDescriptor.SystemDesign.default")
let UIFontDescriptorSystemDesignDefault: UIFontDescriptor.SystemDesign
extension UIFontDescriptor.SystemDesign {
  @available(iOS 13.0, *)
  static let `default`: UIFontDescriptor.SystemDesign
  @available(iOS 13.0, *)
  static let rounded: UIFontDescriptor.SystemDesign
  @available(iOS 13.0, *)
  static let serif: UIFontDescriptor.SystemDesign
  @available(iOS 13.0, *)
  static let monospaced: UIFontDescriptor.SystemDesign
}
@available(iOS 13.0, *)
@available(swift, obsoleted: 3, renamed: "UIFontDescriptor.SystemDesign.rounded")
let UIFontDescriptorSystemDesignRounded: UIFontDescriptor.SystemDesign
@available(iOS 13.0, *)
@available(swift, obsoleted: 3, renamed: "UIFontDescriptor.SystemDesign.serif")
let UIFontDescriptorSystemDesignSerif: UIFontDescriptor.SystemDesign
@available(iOS 13.0, *)
@available(swift, obsoleted: 3, renamed: "UIFontDescriptor.SystemDesign.monospaced")
let UIFontDescriptorSystemDesignMonospaced: UIFontDescriptor.SystemDesign
@available(iOS 7.0, *)
class UIFontDescriptor : NSObject, NSCopying, NSSecureCoding {
  convenience init()
  init?(coder: NSCoder)
  var postscriptName: String { get }
  var pointSize: CGFloat { get }
  var matrix: CGAffineTransform { get }
  var symbolicTraits: UIFontDescriptorSymbolicTraits { get }
  func object(forKey anAttribute: UIFontDescriptor.AttributeName) -> Any?
  @available(swift, obsoleted: 3, renamed: "object(forKey:)")
  func objectForKey(_ anAttribute: UIFontDescriptor.AttributeName) -> Any?
  var fontAttributes: [UIFontDescriptor.AttributeName : Any] { get }
  func matchingFontDescriptors(withMandatoryKeys mandatoryKeys: Set<UIFontDescriptor.AttributeName>?) -> [UIFontDescriptor]
  @available(swift, obsoleted: 3, renamed: "matchingFontDescriptors(withMandatoryKeys:)")
  func matchingFontDescriptorsWithMandatoryKeys(_ mandatoryKeys: Set<UIFontDescriptor.AttributeName>?) -> [UIFontDescriptor]
  @available(*, unavailable, message: "superseded by import of -[UIFontDescriptor initWithFontAttributes:]")
  /*not inherited*/ init(fontAttributes attributes: [UIFontDescriptor.AttributeName : Any] = [:])
  @available(*, unavailable, renamed: "init(fontAttributes:)", message: "Not available in Swift")
  class func fontDescriptorWithFontAttributes(_ attributes: [UIFontDescriptor.AttributeName : Any] = [:]) -> UIFontDescriptor
  /*not inherited*/ init(name fontName: String, size: CGFloat)
  @available(*, unavailable, renamed: "init(name:size:)", message: "Not available in Swift")
  class func fontDescriptorWithName(_ fontName: String, size: CGFloat) -> UIFontDescriptor
  /*not inherited*/ init(name fontName: String, matrix: CGAffineTransform)
  @available(*, unavailable, renamed: "init(name:matrix:)", message: "Not available in Swift")
  class func fontDescriptorWithName(_ fontName: String, matrix: CGAffineTransform) -> UIFontDescriptor
  class func preferredFontDescriptor(withTextStyle style: UIFont.TextStyle) -> UIFontDescriptor
  @available(swift, obsoleted: 3, renamed: "preferredFontDescriptor(withTextStyle:)")
  class func preferredFontDescriptorWithTextStyle(_ style: UIFont.TextStyle) -> UIFontDescriptor
  @available(iOS 10.0, *)
  class func preferredFontDescriptor(withTextStyle style: UIFont.TextStyle, compatibleWith traitCollection: UITraitCollection?) -> UIFontDescriptor
  @available(iOS 10.0, *)
  @available(swift, obsoleted: 3, renamed: "preferredFontDescriptor(withTextStyle:compatibleWith:)")
  class func preferredFontDescriptorWithTextStyle(_ style: UIFont.TextStyle, compatibleWithTraitCollection traitCollection: UITraitCollection?) -> UIFontDescriptor
  init(fontAttributes attributes: [UIFontDescriptor.AttributeName : Any] = [:])
  func addingAttributes(_ attributes: [UIFontDescriptor.AttributeName : Any] = [:]) -> UIFontDescriptor
  @available(swift, obsoleted: 3, renamed: "addingAttributes(_:)")
  func fontDescriptorByAddingAttributes(_ attributes: [UIFontDescriptor.AttributeName : Any] = [:]) -> UIFontDescriptor
  func withSize(_ newPointSize: CGFloat) -> UIFontDescriptor
  @available(swift, obsoleted: 3, renamed: "withSize(_:)")
  func fontDescriptorWithSize(_ newPointSize: CGFloat) -> UIFontDescriptor
  func withMatrix(_ matrix: CGAffineTransform) -> UIFontDescriptor
  @available(swift, obsoleted: 3, renamed: "withMatrix(_:)")
  func fontDescriptorWithMatrix(_ matrix: CGAffineTransform) -> UIFontDescriptor
  func withFace(_ newFace: String) -> UIFontDescriptor
  @available(swift, obsoleted: 3, renamed: "withFace(_:)")
  func fontDescriptorWithFace(_ newFace: String) -> UIFontDescriptor
  func withFamily(_ newFamily: String) -> UIFontDescriptor
  @available(swift, obsoleted: 3, renamed: "withFamily(_:)")
  func fontDescriptorWithFamily(_ newFamily: String) -> UIFontDescriptor
  func withSymbolicTraits(_ symbolicTraits: UIFontDescriptorSymbolicTraits) -> UIFontDescriptor?
  @available(swift, obsoleted: 3, renamed: "withSymbolicTraits(_:)")
  func fontDescriptorWithSymbolicTraits(_ symbolicTraits: UIFontDescriptorSymbolicTraits) -> UIFontDescriptor?
  @available(iOS 13.0, *)
  func withDesign(_ design: UIFontDescriptor.SystemDesign) -> UIFontDescriptor?
  @available(iOS 13.0, *)
  @available(swift, obsoleted: 3, renamed: "withDesign(_:)")
  func fontDescriptorWithDesign(_ design: UIFontDescriptor.SystemDesign) -> UIFontDescriptor?
  @available(iOS 7.0, *)
  class var supportsSecureCoding: Bool { get }
  @available(iOS 7.0, *)
  func copy(with zone: NSZone? = nil) -> Any
  @available(iOS 7.0, *)
  func encode(with coder: NSCoder)
}
@available(iOS 7.0, *)
@available(swift, obsoleted: 3, renamed: "UIFontDescriptor.AttributeName.family")
let UIFontDescriptorFamilyAttribute: UIFontDescriptor.AttributeName
extension UIFontDescriptor.AttributeName {
  @available(iOS 7.0, *)
  static let family: UIFontDescriptor.AttributeName
  @available(iOS 7.0, *)
  @available(swift, obsoleted: 4, renamed: "UIFontDescriptor.AttributeName.family")
  static let UIFontDescriptorFamilyAttribute: UIFontDescriptor.AttributeName
  @available(iOS 7.0, *)
  static let name: UIFontDescriptor.AttributeName
  @available(iOS 7.0, *)
  @available(swift, obsoleted: 4, renamed: "UIFontDescriptor.AttributeName.name")
  static let UIFontDescriptorNameAttribute: UIFontDescriptor.AttributeName
  @available(iOS 7.0, *)
  static let face: UIFontDescriptor.AttributeName
  @available(iOS 7.0, *)
  @available(swift, obsoleted: 4, renamed: "UIFontDescriptor.AttributeName.face")
  static let UIFontDescriptorFaceAttribute: UIFontDescriptor.AttributeName
  @available(iOS 7.0, *)
  static let size: UIFontDescriptor.AttributeName
  @available(iOS 7.0, *)
  @available(swift, obsoleted: 4, renamed: "UIFontDescriptor.AttributeName.size")
  static let UIFontDescriptorSizeAttribute: UIFontDescriptor.AttributeName
  @available(iOS 7.0, *)
  static let visibleName: UIFontDescriptor.AttributeName
  @available(iOS 7.0, *)
  @available(swift, obsoleted: 4, renamed: "UIFontDescriptor.AttributeName.visibleName")
  static let UIFontDescriptorVisibleNameAttribute: UIFontDescriptor.AttributeName
  @available(iOS 7.0, *)
  static let matrix: UIFontDescriptor.AttributeName
  @available(iOS 7.0, *)
  @available(swift, obsoleted: 4, renamed: "UIFontDescriptor.AttributeName.matrix")
  static let UIFontDescriptorMatrixAttribute: UIFontDescriptor.AttributeName
  @available(iOS 7.0, *)
  static let characterSet: UIFontDescriptor.AttributeName
  @available(iOS 7.0, *)
  @available(swift, obsoleted: 4, renamed: "UIFontDescriptor.AttributeName.characterSet")
  static let UIFontDescriptorCharacterSetAttribute: UIFontDescriptor.AttributeName
  @available(iOS 7.0, *)
  static let cascadeList: UIFontDescriptor.AttributeName
  @available(iOS 7.0, *)
  @available(swift, obsoleted: 4, renamed: "UIFontDescriptor.AttributeName.cascadeList")
  static let UIFontDescriptorCascadeListAttribute: UIFontDescriptor.AttributeName
  @available(iOS 7.0, *)
  static let traits: UIFontDescriptor.AttributeName
  @available(iOS 7.0, *)
  @available(swift, obsoleted: 4, renamed: "UIFontDescriptor.AttributeName.traits")
  static let UIFontDescriptorTraitsAttribute: UIFontDescriptor.AttributeName
  @available(iOS 7.0, *)
  static let fixedAdvance: UIFontDescriptor.AttributeName
  @available(iOS 7.0, *)
  @available(swift, obsoleted: 4, renamed: "UIFontDescriptor.AttributeName.fixedAdvance")
  static let UIFontDescriptorFixedAdvanceAttribute: UIFontDescriptor.AttributeName
  @available(iOS 7.0, *)
  static let featureSettings: UIFontDescriptor.AttributeName
  @available(iOS 7.0, *)
  @available(swift, obsoleted: 4, renamed: "UIFontDescriptor.AttributeName.featureSettings")
  static let UIFontDescriptorFeatureSettingsAttribute: UIFontDescriptor.AttributeName
  @available(iOS 7.0, *)
  static let textStyle: UIFontDescriptor.AttributeName
  @available(iOS 7.0, *)
  @available(swift, obsoleted: 4, renamed: "UIFontDescriptor.AttributeName.textStyle")
  static let UIFontDescriptorTextStyleAttribute: UIFontDescriptor.AttributeName
}
@available(iOS 7.0, *)
@available(swift, obsoleted: 3, renamed: "UIFontDescriptor.AttributeName.name")
let UIFontDescriptorNameAttribute: UIFontDescriptor.AttributeName
@available(iOS 7.0, *)
@available(swift, obsoleted: 3, renamed: "UIFontDescriptor.AttributeName.face")
let UIFontDescriptorFaceAttribute: UIFontDescriptor.AttributeName
@available(iOS 7.0, *)
@available(swift, obsoleted: 3, renamed: "UIFontDescriptor.AttributeName.size")
let UIFontDescriptorSizeAttribute: UIFontDescriptor.AttributeName
@available(iOS 7.0, *)
@available(swift, obsoleted: 3, renamed: "UIFontDescriptor.AttributeName.visibleName")
let UIFontDescriptorVisibleNameAttribute: UIFontDescriptor.AttributeName
@available(iOS 7.0, *)
@available(swift, obsoleted: 3, renamed: "UIFontDescriptor.AttributeName.matrix")
let UIFontDescriptorMatrixAttribute: UIFontDescriptor.AttributeName
@available(iOS 7.0, *)
@available(swift, obsoleted: 3, renamed: "UIFontDescriptor.AttributeName.characterSet")
let UIFontDescriptorCharacterSetAttribute: UIFontDescriptor.AttributeName
@available(iOS 7.0, *)
@available(swift, obsoleted: 3, renamed: "UIFontDescriptor.AttributeName.cascadeList")
let UIFontDescriptorCascadeListAttribute: UIFontDescriptor.AttributeName
@available(iOS 7.0, *)
@available(swift, obsoleted: 3, renamed: "UIFontDescriptor.AttributeName.traits")
let UIFontDescriptorTraitsAttribute: UIFontDescriptor.AttributeName
@available(iOS 7.0, *)
@available(swift, obsoleted: 3, renamed: "UIFontDescriptor.AttributeName.fixedAdvance")
let UIFontDescriptorFixedAdvanceAttribute: UIFontDescriptor.AttributeName
@available(iOS 7.0, *)
@available(swift, obsoleted: 3, renamed: "UIFontDescriptor.AttributeName.featureSettings")
let UIFontDescriptorFeatureSettingsAttribute: UIFontDescriptor.AttributeName
@available(iOS 7.0, *)
@available(swift, obsoleted: 3, renamed: "UIFontDescriptor.AttributeName.textStyle")
let UIFontDescriptorTextStyleAttribute: UIFontDescriptor.AttributeName
@available(iOS 7.0, *)
@available(swift, obsoleted: 3, renamed: "UIFontDescriptor.TraitKey.symbolic")
let UIFontSymbolicTrait: UIFontDescriptor.TraitKey
extension UIFontDescriptor.TraitKey {
  @available(iOS 7.0, *)
  static let symbolic: UIFontDescriptor.TraitKey
  @available(iOS 7.0, *)
  @available(swift, obsoleted: 4, renamed: "UIFontDescriptor.TraitKey.symbolic")
  static let UIFontSymbolicTrait: UIFontDescriptor.TraitKey
  @available(iOS 7.0, *)
  static let weight: UIFontDescriptor.TraitKey
  @available(iOS 7.0, *)
  @available(swift, obsoleted: 4, renamed: "UIFontDescriptor.TraitKey.weight")
  static let UIFontWeightTrait: UIFontDescriptor.TraitKey
  @available(iOS 7.0, *)
  static let width: UIFontDescriptor.TraitKey
  @available(iOS 7.0, *)
  @available(swift, obsoleted: 4, renamed: "UIFontDescriptor.TraitKey.width")
  static let UIFontWidthTrait: UIFontDescriptor.TraitKey
  @available(iOS 7.0, *)
  static let slant: UIFontDescriptor.TraitKey
  @available(iOS 7.0, *)
  @available(swift, obsoleted: 4, renamed: "UIFontDescriptor.TraitKey.slant")
  static let UIFontSlantTrait: UIFontDescriptor.TraitKey
}
@available(iOS 7.0, *)
@available(swift, obsoleted: 3, renamed: "UIFontDescriptor.TraitKey.weight")
let UIFontWeightTrait: UIFontDescriptor.TraitKey
@available(iOS 7.0, *)
@available(swift, obsoleted: 3, renamed: "UIFontDescriptor.TraitKey.width")
let UIFontWidthTrait: UIFontDescriptor.TraitKey
@available(iOS 7.0, *)
@available(swift, obsoleted: 3, renamed: "UIFontDescriptor.TraitKey.slant")
let UIFontSlantTrait: UIFontDescriptor.TraitKey
@available(iOS 8.2, *)
@available(swift, obsoleted: 3, renamed: "UIFont.Weight.ultraLight")
let UIFontWeightUltraLight: UIFont.Weight
extension UIFont.Weight {
  @available(iOS 8.2, *)
  static let ultraLight: UIFont.Weight
  @available(iOS 8.2, *)
  @available(swift, obsoleted: 4, renamed: "UIFont.Weight.ultraLight")
  static let UIFontWeightUltraLight: UIFont.Weight
  @available(iOS 8.2, *)
  static let thin: UIFont.Weight
  @available(iOS 8.2, *)
  @available(swift, obsoleted: 4, renamed: "UIFont.Weight.thin")
  static let UIFontWeightThin: UIFont.Weight
  @available(iOS 8.2, *)
  static let light: UIFont.Weight
  @available(iOS 8.2, *)
  @available(swift, obsoleted: 4, renamed: "UIFont.Weight.light")
  static let UIFontWeightLight: UIFont.Weight
  @available(iOS 8.2, *)
  static let regular: UIFont.Weight
  @available(iOS 8.2, *)
  @available(swift, obsoleted: 4, renamed: "UIFont.Weight.regular")
  static let UIFontWeightRegular: UIFont.Weight
  @available(iOS 8.2, *)
  static let medium: UIFont.Weight
  @available(iOS 8.2, *)
  @available(swift, obsoleted: 4, renamed: "UIFont.Weight.medium")
  static let UIFontWeightMedium: UIFont.Weight
  @available(iOS 8.2, *)
  static let semibold: UIFont.Weight
  @available(iOS 8.2, *)
  @available(swift, obsoleted: 4, renamed: "UIFont.Weight.semibold")
  static let UIFontWeightSemibold: UIFont.Weight
  @available(iOS 8.2, *)
  static let bold: UIFont.Weight
  @available(iOS 8.2, *)
  @available(swift, obsoleted: 4, renamed: "UIFont.Weight.bold")
  static let UIFontWeightBold: UIFont.Weight
  @available(iOS 8.2, *)
  static let heavy: UIFont.Weight
  @available(iOS 8.2, *)
  @available(swift, obsoleted: 4, renamed: "UIFont.Weight.heavy")
  static let UIFontWeightHeavy: UIFont.Weight
  @available(iOS 8.2, *)
  static let black: UIFont.Weight
  @available(iOS 8.2, *)
  @available(swift, obsoleted: 4, renamed: "UIFont.Weight.black")
  static let UIFontWeightBlack: UIFont.Weight
}
@available(iOS 8.2, *)
@available(swift, obsoleted: 3, renamed: "UIFont.Weight.thin")
let UIFontWeightThin: UIFont.Weight
@available(iOS 8.2, *)
@available(swift, obsoleted: 3, renamed: "UIFont.Weight.light")
let UIFontWeightLight: UIFont.Weight
@available(iOS 8.2, *)
@available(swift, obsoleted: 3, renamed: "UIFont.Weight.regular")
let UIFontWeightRegular: UIFont.Weight
@available(iOS 8.2, *)
@available(swift, obsoleted: 3, renamed: "UIFont.Weight.medium")
let UIFontWeightMedium: UIFont.Weight
@available(iOS 8.2, *)
@available(swift, obsoleted: 3, renamed: "UIFont.Weight.semibold")
let UIFontWeightSemibold: UIFont.Weight
@available(iOS 8.2, *)
@available(swift, obsoleted: 3, renamed: "UIFont.Weight.bold")
let UIFontWeightBold: UIFont.Weight
@available(iOS 8.2, *)
@available(swift, obsoleted: 3, renamed: "UIFont.Weight.heavy")
let UIFontWeightHeavy: UIFont.Weight
@available(iOS 8.2, *)
@available(swift, obsoleted: 3, renamed: "UIFont.Weight.black")
let UIFontWeightBlack: UIFont.Weight
@available(swift, obsoleted: 3, renamed: "UIFontDescriptor.FeatureKey.featureIdentifier")
@available(iOS, introduced: 7.0, deprecated: 15.0)
let UIFontFeatureTypeIdentifierKey: UIFontDescriptor.FeatureKey
extension UIFontDescriptor.FeatureKey {
  @available(iOS, introduced: 7.0, deprecated: 15.0)
  static let featureIdentifier: UIFontDescriptor.FeatureKey
  @available(swift, obsoleted: 4, renamed: "UIFontDescriptor.FeatureKey.featureIdentifier")
  @available(iOS, introduced: 7.0, deprecated: 15.0)
  static let UIFontFeatureTypeIdentifierKey: UIFontDescriptor.FeatureKey
  @available(iOS, introduced: 7.0, deprecated: 15.0)
  static let typeIdentifier: UIFontDescriptor.FeatureKey
  @available(swift, obsoleted: 4, renamed: "UIFontDescriptor.FeatureKey.typeIdentifier")
  @available(iOS, introduced: 7.0, deprecated: 15.0)
  static let UIFontFeatureSelectorIdentifierKey: UIFontDescriptor.FeatureKey
  @available(iOS 15.0, *)
  static let type: UIFontDescriptor.FeatureKey
  @available(iOS 15.0, *)
  static let selector: UIFontDescriptor.FeatureKey
}
@available(swift, obsoleted: 3, renamed: "UIFontDescriptor.FeatureKey.typeIdentifier")
@available(iOS, introduced: 7.0, deprecated: 15.0)
let UIFontFeatureSelectorIdentifierKey: UIFontDescriptor.FeatureKey
@available(iOS 15.0, *)
@available(swift, obsoleted: 3, renamed: "UIFontDescriptorFeatureKey.type")
let UIFontFeatureTypeIdentifierKey_ForNewSwiftAPI: UIFontDescriptor.FeatureKey
@available(iOS 15.0, *)
@available(swift, obsoleted: 3, renamed: "UIFontDescriptorFeatureKey.selector")
let UIFontFeatureSelectorIdentifierKey_ForNewSwiftAPI: UIFontDescriptor.FeatureKey
@available(iOS 11.0, *)
@available(swift, obsoleted: 3, renamed: "UIFont.TextStyle.largeTitle")
let UIFontTextStyleLargeTitle: UIFont.TextStyle
extension UIFont.TextStyle {
  @available(iOS 11.0, *)
  static let largeTitle: UIFont.TextStyle
  @available(iOS 9.0, *)
  static let title1: UIFont.TextStyle
  @available(iOS 9.0, *)
  static let title2: UIFont.TextStyle
  @available(iOS 9.0, *)
  static let title3: UIFont.TextStyle
  @available(iOS 7.0, *)
  static let headline: UIFont.TextStyle
  @available(iOS 7.0, *)
  static let subheadline: UIFont.TextStyle
  @available(iOS 7.0, *)
  static let body: UIFont.TextStyle
  @available(iOS 9.0, *)
  static let callout: UIFont.TextStyle
  @available(iOS 7.0, *)
  static let footnote: UIFont.TextStyle
  @available(iOS 7.0, *)
  static let caption1: UIFont.TextStyle
  @available(iOS 7.0, *)
  static let caption2: UIFont.TextStyle
}
@available(iOS 9.0, *)
@available(swift, obsoleted: 3, renamed: "UIFont.TextStyle.title1")
let UIFontTextStyleTitle1: UIFont.TextStyle
@available(iOS 9.0, *)
@available(swift, obsoleted: 3, renamed: "UIFont.TextStyle.title2")
let UIFontTextStyleTitle2: UIFont.TextStyle
@available(iOS 9.0, *)
@available(swift, obsoleted: 3, renamed: "UIFont.TextStyle.title3")
let UIFontTextStyleTitle3: UIFont.TextStyle
@available(iOS 7.0, *)
@available(swift, obsoleted: 3, renamed: "UIFont.TextStyle.headline")
let UIFontTextStyleHeadline: UIFont.TextStyle
@available(iOS 7.0, *)
@available(swift, obsoleted: 3, renamed: "UIFont.TextStyle.subheadline")
let UIFontTextStyleSubheadline: UIFont.TextStyle
@available(iOS 7.0, *)
@available(swift, obsoleted: 3, renamed: "UIFont.TextStyle.body")
let UIFontTextStyleBody: UIFont.TextStyle
@available(iOS 9.0, *)
@available(swift, obsoleted: 3, renamed: "UIFont.TextStyle.callout")
let UIFontTextStyleCallout: UIFont.TextStyle
@available(iOS 7.0, *)
@available(swift, obsoleted: 3, renamed: "UIFont.TextStyle.footnote")
let UIFontTextStyleFootnote: UIFont.TextStyle
@available(iOS 7.0, *)
@available(swift, obsoleted: 3, renamed: "UIFont.TextStyle.caption1")
let UIFontTextStyleCaption1: UIFont.TextStyle
@available(iOS 7.0, *)
@available(swift, obsoleted: 3, renamed: "UIFont.TextStyle.caption2")
let UIFontTextStyleCaption2: UIFont.TextStyle
