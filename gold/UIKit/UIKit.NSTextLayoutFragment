@_exported import Foundation

@available(*, unavailable, message: "Not available in Swift")
typealias NSTextLayoutFragmentEnumerationOptions = Int
@available(iOS 15.0, *)
@available(swift, obsoleted: 3, renamed: "NSTextLayoutFragment.EnumerationOptions")
typealias NSTextLayoutFragmentEnumerationOptions = NSTextLayoutFragment.EnumerationOptions
extension NSTextLayoutFragment {
  @available(iOS 15.0, *)
  struct EnumerationOptions : OptionSet, @unchecked Sendable {
    init(rawValue: UInt)
    let rawValue: UInt
    typealias RawValue = UInt
    typealias Element = NSTextLayoutFragment.EnumerationOptions
    typealias ArrayLiteralElement = NSTextLayoutFragment.EnumerationOptions
    @available(*, unavailable, message: "use [] to construct an empty option set")
    static var none: NSTextLayoutFragment.EnumerationOptions { get }
    @available(*, unavailable, message: "use [] to construct an empty option set")
    @available(swift, obsoleted: 3, renamed: "none")
    static var None: NSTextLayoutFragment.EnumerationOptions { get }
    static var reverse: NSTextLayoutFragment.EnumerationOptions { get }
    @available(swift, obsoleted: 3, renamed: "reverse")
    static var Reverse: NSTextLayoutFragment.EnumerationOptions { get }
    static var estimatesSize: NSTextLayoutFragment.EnumerationOptions { get }
    @available(swift, obsoleted: 3, renamed: "estimatesSize")
    static var EstimatesSize: NSTextLayoutFragment.EnumerationOptions { get }
    static var ensuresLayout: NSTextLayoutFragment.EnumerationOptions { get }
    @available(swift, obsoleted: 3, renamed: "ensuresLayout")
    static var EnsuresLayout: NSTextLayoutFragment.EnumerationOptions { get }
    static var ensuresExtraLineFragment: NSTextLayoutFragment.EnumerationOptions { get }
    @available(swift, obsoleted: 3, renamed: "ensuresExtraLineFragment")
    static var EnsuresExtraLineFragment: NSTextLayoutFragment.EnumerationOptions { get }
  }
  @available(iOS 15.0, *)
  enum State : UInt, @unchecked Sendable {
    init?(rawValue: UInt)
    var rawValue: UInt { get }
    typealias RawValue = UInt
    case none
    @available(swift, obsoleted: 3, renamed: "none")
    static var None: NSTextLayoutFragment.State { get }
    case estimatedUsageBounds
    @available(swift, obsoleted: 3, renamed: "estimatedUsageBounds")
    static var EstimatedUsageBounds: NSTextLayoutFragment.State { get }
    case calculatedUsageBounds
    @available(swift, obsoleted: 3, renamed: "calculatedUsageBounds")
    static var CalculatedUsageBounds: NSTextLayoutFragment.State { get }
    case layoutAvailable
    @available(swift, obsoleted: 3, renamed: "layoutAvailable")
    static var LayoutAvailable: NSTextLayoutFragment.State { get }
  }
}
@available(iOS 15.0, *)
@available(swift, obsoleted: 3, renamed: "NSTextLayoutFragment.State")
typealias NSTextLayoutFragmentState = NSTextLayoutFragment.State
@available(iOS 15.0, *)
class NSTextLayoutFragment : NSObject, NSSecureCoding {
  init(textElement: NSTextElement, range rangeInElement: NSTextRange?)
  init?(coder: NSCoder)
  @available(*, unavailable)
  convenience init()
  weak var textLayoutManager: @sil_weak NSTextLayoutManager? { get }
  weak var textElement: @sil_weak NSTextElement? { get }
  var rangeInElement: NSTextRange { get }
  var textLineFragments: [NSTextLineFragment] { get }
  var layoutQueue: OperationQueue?
  var state: NSTextLayoutFragment.State { get }
  func invalidateLayout()
  var layoutFragmentFrame: CGRect { get }
  var renderingSurfaceBounds: CGRect { get }
  var leadingPadding: CGFloat { get }
  var trailingPadding: CGFloat { get }
  var topMargin: CGFloat { get }
  var bottomMargin: CGFloat { get }
  func draw(at point: CGPoint, in context: CGContext)
  @available(swift, obsoleted: 3, renamed: "draw(at:in:)")
  func drawAtPoint(_ point: CGPoint, inContext context: CGContext)
  var textAttachmentViewProviders: [NSTextAttachmentViewProvider] { get }
  func frameForTextAttachment(at location: NSTextLocation) -> CGRect
  @available(swift, obsoleted: 3, renamed: "frameForTextAttachment(at:)")
  func frameForTextAttachmentAtLocation(_ location: NSTextLocation) -> CGRect
  @available(iOS 15.0, *)
  class var supportsSecureCoding: Bool { get }
  @available(iOS 15.0, *)
  func encode(with coder: NSCoder)
}
